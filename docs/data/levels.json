{
  "levels": [
    {
      "id": 1,
      "tier": 1,
      "title": "Hello World",
      "description": "Create and run your first C# program.",
      "requirements": [
        "Install .NET SDK",
        "Create a new console app",
        "Run the app"
      ],
      "theory": "<div class='theory-content'><h4>üöÄ Welcome to C# Programming!</h4><p><strong>C# (pronounced 'C-Sharp')</strong> is a modern, object-oriented programming language developed by Microsoft. It's part of the .NET ecosystem and is widely used for building desktop applications, web applications, mobile apps, games, and more.</p><h4>üèóÔ∏è Understanding Your First Program</h4><p>Every C# console application starts with the <code>Main</code> method, which serves as the <strong>entry point</strong> of your program. Think of it as the front door of your application - when you run your program, the operating system looks for this method and starts executing code from there.</p><pre><code>static void Main()</code></pre><ul><li><strong>static</strong>: The method belongs to the class itself, not to any instance of the class</li><li><strong>void</strong>: The method doesn't return any value</li><li><strong>Main</strong>: The special name that tells .NET this is where to start</li></ul><h4>üìö Namespaces - Organizing Your Code</h4><p>The <code>using System;</code> directive at the top tells the compiler that we want to use types from the <code>System</code> namespace without having to type the full name every time. It's like importing a library of pre-built functionality.</p><p>Without this directive, you'd have to write <code>System.Console.WriteLine()</code> instead of just <code>Console.WriteLine()</code>.</p><h4>üñ•Ô∏è Console.WriteLine() - Your First Output</h4><p><code>Console.WriteLine()</code> is a method that prints text to the console (command line) and moves to a new line. It's your primary way of seeing output when learning C#.</p><h4>üîß The Compilation Process</h4><ol><li><strong>Source Code (.cs)</strong>: You write human-readable C# code</li><li><strong>Compiler (csc.exe)</strong>: Converts your C# code into Intermediate Language (IL)</li><li><strong>Common Language Runtime (CLR)</strong>: Executes the IL code using Just-In-Time (JIT) compilation</li></ol><p>This process makes C# both powerful and portable across different platforms!</p><h4>üéØ Best Practices from Day One</h4><ul><li>Always use meaningful names for your classes and methods</li><li>Indent your code properly for readability</li><li>Add comments to explain complex logic</li><li>Follow C# naming conventions (PascalCase for classes and methods)</li></ul></div>",
      "code": "using System;\nclass Program {\n    static void Main() {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}",
      "quiz": [
        { "q": "What is the entry point in a C# console program?", "options": ["Main", "Start", "Run", "Init"], "answer": 0 },
        { "q": "Which type prints to the console?", "options": ["System.IO.File", "System.Console", "System.Text.StringBuilder"], "answer": 1 }
      ],
      "completionCriteria": "Console prints 'Hello, World!'",
      "nextLevel": 2
    },
    {
      "id": 2,
      "tier": 1,
      "title": "Data Types",
      "description": "Understand value vs reference types and primitives.",
      "requirements": [
        "Declare value types (int, bool)",
        "Declare reference types (string, arrays)"
      ],
      "theory": "<div class='theory-content'><h4>üéØ Understanding Data Types - The Foundation of Programming</h4><p>Data types are the building blocks of any program. They tell the computer how to interpret and store different kinds of information. In C#, all data types fall into two main categories: <strong>Value Types</strong> and <strong>Reference Types</strong>.</p><h4>üì¶ Value Types - Stored Directly</h4><p><strong>Value types</strong> store their data directly in memory. When you assign one value type variable to another, you're making a complete copy of the data.</p><h5>üìä Common Value Types:</h5><ul><li><strong>int</strong>: Whole numbers (-2,147,483,648 to 2,147,483,647)</li><li><strong>double</strong>: Decimal numbers with high precision</li><li><strong>float</strong>: Decimal numbers with lower precision (faster)</li><li><strong>bool</strong>: True or false values</li><li><strong>char</strong>: Single character ('A', '5', '$')</li><li><strong>DateTime</strong>: Date and time values</li><li><strong>decimal</strong>: High precision decimal numbers (perfect for money)</li></ul><h4>üîó Reference Types - Stored with Pointers</h4><p><strong>Reference types</strong> store a reference (pointer) to the actual data location in memory. When you assign one reference type variable to another, both variables point to the same object.</p><h5>üè∑Ô∏è Common Reference Types:</h5><ul><li><strong>string</strong>: Text data (\"Hello World\")</li><li><strong>object</strong>: The base type for all other types</li><li><strong>Arrays</strong>: Collections of data (int[], string[])</li><li><strong>Classes</strong>: Custom types you define</li></ul><h4>üß† Memory Management Deep Dive</h4><h5>Stack vs Heap:</h5><ul><li><strong>Stack</strong>: Fast, limited space, stores value types and references</li><li><strong>Heap</strong>: Larger space, stores reference type objects, managed by Garbage Collector</li></ul><h4>‚ö†Ô∏è Special Case: Strings</h4><p>Strings are reference types, but they behave like value types due to <strong>immutability</strong>. When you modify a string, you're actually creating a new string object:</p><pre><code>string s1 = \"Hello\";\nstring s2 = s1;     // Both point to same \"Hello\" object\ns1 += \" World\";     // Creates new \"Hello World\" object\n// s1 now points to \"Hello World\", s2 still points to \"Hello\"</code></pre><h4>üé™ Boxing and Unboxing</h4><ul><li><strong>Boxing</strong>: Converting a value type to object (int ‚Üí object)</li><li><strong>Unboxing</strong>: Converting back to value type (object ‚Üí int)</li><li>These operations have performance costs, so avoid when possible</li></ul><h4>üèÜ Pro Tips</h4><ul><li>Use <code>decimal</code> for financial calculations to avoid floating-point errors</li><li>Be aware that string concatenation in loops can be expensive</li><li>Value types can't be null (unless nullable: int?)</li><li>Reference types can be null and may cause NullReferenceException</li></ul></div>",
      "code": "int x = 42;\nint y = x; // copy\ny++; // x remains 42\nstring s1 = \"hi\";\nstring s2 = s1; // reference to same string instance\ns2 += \"!\"; // new string created, s1 unchanged",
      "quiz": [
        { "q": "Select all value types.", "options": ["int", "string", "bool", "DateTime"], "answer": [0,2,3], "multi": true }
      ],
      "completionCriteria": "Explain value vs reference behavior with an example.",
      "nextLevel": 3
    },
    {
      "id": 3,
      "tier": 1,
      "title": "Variables, Operators, Expressions",
      "description": "Work with variables and operators.",
      "requirements": [
        "Use arithmetic and comparison operators",
        "Use var with type inference"
      ],
      "theory": "<div class='theory-content'><h4>üîß Variables - Containers for Your Data</h4><p>Variables are named storage locations that hold data. Think of them as labeled boxes where you can store different types of information. In C#, every variable must have a specific type that determines what kind of data it can hold.</p><h4>üìù Variable Declaration and Initialization</h4><h5>Explicit Type Declaration:</h5><pre><code>int age = 25;              // Declare and initialize\ndouble price;              // Declare only\nprice = 99.99;             // Initialize later\nstring name = \"John\";       // String variable</code></pre><h5>Type Inference with 'var':</h5><p>The <code>var</code> keyword lets the compiler figure out the type based on the assigned value:</p><pre><code>var age = 25;              // Compiler infers int\nvar price = 99.99;         // Compiler infers double\nvar name = \"John\";          // Compiler infers string</code></pre><p><strong>Important:</strong> <code>var</code> still creates strongly-typed variables. You can't change the type later!</p><h4>üßÆ Operators - Performing Operations</h4><h5>Arithmetic Operators:</h5><ul><li><strong>+</strong> Addition: <code>5 + 3 = 8</code></li><li><strong>-</strong> Subtraction: <code>5 - 3 = 2</code></li><li><strong>*</strong> Multiplication: <code>5 * 3 = 15</code></li><li><strong>/</strong> Division: <code>10 / 3 = 3</code> (integer division!)</li><li><strong>%</strong> Modulus (remainder): <code>10 % 3 = 1</code></li></ul><h5>‚ö†Ô∏è Integer Division Gotcha:</h5><p>When dividing two integers, C# performs integer division and truncates the decimal part:</p><pre><code>int result = 10 / 3;       // result = 3, not 3.333...\ndouble result = 10.0 / 3;  // result = 3.333...\ndouble result = (double)10 / 3; // Casting to get decimal result</code></pre><h5>Comparison Operators:</h5><ul><li><strong>==</strong> Equal to: <code>5 == 5</code> ‚Üí true</li><li><strong>!=</strong> Not equal to: <code>5 != 3</code> ‚Üí true</li><li><strong><</strong> Less than: <code>3 < 5</code> ‚Üí true</li><li><strong>></strong> Greater than: <code>5 > 3</code> ‚Üí true</li><li><strong><=</strong> Less than or equal: <code>3 <= 3</code> ‚Üí true</li><li><strong>>=</strong> Greater than or equal: <code>5 >= 3</code> ‚Üí true</li></ul><h5>Logical Operators:</h5><ul><li><strong>&&</strong> AND: Both must be true</li><li><strong>||</strong> OR: At least one must be true</li><li><strong>!</strong> NOT: Flips true/false</li></ul><h4>üéØ Assignment Operators:</h4><ul><li><strong>=</strong> Simple assignment: <code>x = 5</code></li><li><strong>+=</strong> Add and assign: <code>x += 3</code> (same as <code>x = x + 3</code>)</li><li><strong>-=</strong> Subtract and assign: <code>x -= 2</code></li><li><strong>*=</strong> Multiply and assign: <code>x *= 4</code></li><li><strong>/=</strong> Divide and assign: <code>x /= 2</code></li></ul><h4>üîÑ Increment and Decrement:</h4><ul><li><strong>++</strong> Increment by 1: <code>x++</code> or <code>++x</code></li><li><strong>--</strong> Decrement by 1: <code>x--</code> or <code>--x</code></li></ul><p><strong>Prefix vs Postfix:</strong></p><pre><code>int x = 5;\nint a = ++x;  // x becomes 6, then a gets 6\nint b = x++;  // b gets 6, then x becomes 7</code></pre><h4>üìê Expressions and Operator Precedence</h4><p>Expressions combine variables, operators, and values. C# follows mathematical precedence:</p><ol><li>Parentheses: <code>()</code></li><li>Multiplication, Division, Modulus: <code>* / %</code></li><li>Addition, Subtraction: <code>+ -</code></li><li>Comparison: <code>< > <= >=</code></li><li>Equality: <code>== !=</code></li><li>Logical AND: <code>&&</code></li><li>Logical OR: <code>||</code></li></ol><h4>üèÜ Best Practices</h4><ul><li>Use descriptive variable names: <code>customerAge</code> instead of <code>a</code></li><li>Initialize variables when declaring them when possible</li><li>Be careful with integer division - cast to double when needed</li><li>Use parentheses to make complex expressions clear</li><li>Consider using <code>var</code> when the type is obvious from the right side</li></ul></div>",
      "code": "var a = 5; var b = 2;\nint sum = a + b; // 7\nint div = a / b; // 2 (integer division)\ndouble d = (double)a / b; // 2.5",
      "quiz": [
        { "q": "What is 5/2 with int operands?", "options": ["2", "2.5", "3"], "answer": 0 }
      ],
      "completionCriteria": "Program prints correct results for mixed int/double division.",
      "nextLevel": 4
    },
    {
      "id": 4,
      "tier": 1,
      "title": "Type Conversion",
      "description": "Implicit/explicit conversions, boxing/unboxing.",
      "requirements": [
        "Cast between numeric types",
        "Box and unbox value types"
      ],
      "theory": "<div class='theory-content'><h4>üîÑ Type Conversion - Transforming Data Between Types</h4><p>Type conversion is the process of changing a value from one data type to another. This is essential when working with different types of data, receiving user input, or calling methods that expect specific types.</p><h4>‚úÖ Implicit Conversions (Safe and Automatic)</h4><p><strong>Implicit conversions</strong> happen automatically when there's no risk of data loss. The compiler performs these conversions for you:</p><h5>Widening Conversions (Safe):</h5><ul><li><code>int</code> ‚Üí <code>long</code> ‚Üí <code>float</code> ‚Üí <code>double</code></li><li><code>char</code> ‚Üí <code>int</code> ‚Üí <code>long</code></li><li><code>byte</code> ‚Üí <code>short</code> ‚Üí <code>int</code></li></ul><pre><code>int smallNumber = 42;\nlong bigNumber = smallNumber;      // Implicit conversion\ndouble decimal = smallNumber;      // Also implicit\nchar letter = 'A';\nint asciiValue = letter;           // 'A' becomes 65</code></pre><h4>‚ö†Ô∏è Explicit Conversions (Casting - Potential Data Loss)</h4><p><strong>Explicit conversions</strong> require a cast operator because they might lose data or precision:</p><pre><code>double bigDecimal = 123.456;\nint wholeNumber = (int)bigDecimal; // Explicit cast, loses .456\n// wholeNumber = 123\n\nlong bigNumber = 1000000000000;\nint smaller = (int)bigNumber;      // Might overflow!</code></pre><h4>üéØ Safe Conversion Methods</h4><p>C# provides safer ways to convert that won't throw exceptions:</p><h5>Convert Class Methods:</h5><pre><code>string numberText = \"123\";\nint number = Convert.ToInt32(numberText);     // Converts string to int\nbool flag = Convert.ToBoolean(\"true\");       // Converts string to bool\ndouble price = Convert.ToDouble(\"99.99\");    // Converts string to double</code></pre><h5>Parse Methods:</h5><pre><code>int age = int.Parse(\"25\");                   // Throws exception if invalid\ndouble price = double.Parse(\"19.99\");\nDateTime date = DateTime.Parse(\"2023-12-25\");</code></pre><h5>TryParse Methods (Recommended):</h5><pre><code>string input = \"123\";\nif (int.TryParse(input, out int result))\n{\n    // Conversion successful, use 'result'\n    Console.WriteLine($\"Number: {result}\");\n}\nelse\n{\n    // Conversion failed, handle error\n    Console.WriteLine(\"Invalid number\");\n}</code></pre><h4>üì¶ Boxing and Unboxing - Value Types ‚Üî Object</h4><h5>Boxing (Value Type ‚Üí Object):</h5><p>Boxing wraps a value type in an object wrapper, moving it from stack to heap:</p><pre><code>int number = 42;\nobject boxed = number;        // Boxing happens automatically\nArrayList list = new ArrayList();\nlist.Add(123);               // Boxing int to object</code></pre><h5>Unboxing (Object ‚Üí Value Type):</h5><p>Unboxing extracts the value type from the object wrapper:</p><pre><code>object boxed = 42;\nint unboxed = (int)boxed;    // Explicit unboxing required\n\n// ‚ö†Ô∏è Must unbox to the EXACT same type!\nobject boxedInt = 42;\nlong wrongType = (long)boxedInt;  // Runtime exception!</nlong correct = (long)(int)boxedInt; // First unbox to int, then convert</code></pre><h4>‚ö° Performance Considerations</h4><ul><li><strong>Boxing/Unboxing</strong> has performance overhead - avoid in loops</li><li><strong>Use Generics</strong> instead of object collections to avoid boxing</li><li><strong>String conversions</strong> create new objects - consider StringBuilder for many operations</li></ul><h4>üõ°Ô∏è Null Safety and Nullable Types</h4><pre><code>// Nullable value types (C# 2.0+)\nint? nullableInt = null;             // Can be null\nif (nullableInt.HasValue)\n{\n    int actualValue = nullableInt.Value;\n}\n\n// Null-coalescing operator\nint safeValue = nullableInt ?? 0;    // Use 0 if null</code></pre><h4>üîß Advanced Conversion Techniques</h4><h5>Custom Conversion Operators:</h5><pre><code>public class Temperature\n{\n    public double Celsius { get; set; }\n    \n    // Implicit conversion from double\n    public static implicit operator Temperature(double celsius)\n    {\n        return new Temperature { Celsius = celsius };\n    }\n    \n    // Explicit conversion to double\n    public static explicit operator double(Temperature temp)\n    {\n        return temp.Celsius;\n    }\n}</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Overflow:</strong> Converting large numbers to smaller types</li><li><strong>Precision Loss:</strong> double ‚Üí float ‚Üí int</li><li><strong>Invalid Casts:</strong> Unboxing to wrong type</li><li><strong>Culture Issues:</strong> Parsing numbers/dates in different locales</li></ul><h4>üèÜ Best Practices</h4><ul><li>Use TryParse instead of Parse for user input</li><li>Check for overflow with <code>checked</code> keyword when needed</li><li>Prefer implicit conversions when safe</li><li>Use generics to avoid boxing/unboxing</li><li>Be aware of precision loss in floating-point conversions</li></ul></div>",
      "code": "int i = 42; double d = i; // implicit\nd = 3.14; i = (int)d; // explicit (i = 3)\nobject o = i; // boxing\nint j = (int)o; // unboxing",
      "quiz": [
        { "q": "Which is boxing?", "options": ["int i = 1; object o = i;", "object o = \"x\"; string s = (string)o;"], "answer": 0 }
      ],
      "completionCriteria": "Demonstrate boxing/unboxing without InvalidCastException.",
      "nextLevel": 5
    },
    {
      "id": 5,
      "tier": 1,
      "title": "Namespaces",
      "description": "Organize code with namespaces and using directives.",
      "requirements": [
        "Declare a namespace",
        "Use using directives"
      ],
      "theory": "<div class='theory-content'><h4>üìÅ Namespaces - Organizing Your Code Universe</h4><p>Namespaces are like folders for your code. They provide a way to organize related classes, interfaces, and other types into logical groups. This prevents naming conflicts and makes large codebases manageable.</p><h4>üéØ Why Namespaces Matter</h4><p>Imagine if every file on your computer had to have a unique name - no two files could be called \"document.txt\" anywhere! Namespaces solve this problem for code by creating different \"folders\" where the same class name can exist without conflict.</p><h5>Real-World Example:</h5><pre><code>// Both classes are named \"Timer\" but in different namespaces\nSystem.Timers.Timer serverTimer;        // For server applications\nSystem.Windows.Forms.Timer uiTimer;     // For UI applications</code></pre><h4>üì¶ Declaring Namespaces</h4><h5>Basic Namespace Declaration:</h5><pre><code>namespace MyCompany.ProjectName.Features\n{\n    public class CustomerService\n    {\n        // Class implementation\n    }\n    \n    public class OrderService\n    {\n        // Class implementation\n    }\n}</code></pre><h5>Nested Namespaces:</h5><pre><code>namespace MyCompany\n{\n    namespace ECommerce\n    {\n        namespace Services\n        {\n            public class PaymentProcessor { }\n        }\n        \n        namespace Models\n        {\n            public class Product { }\n            public class Customer { }\n        }\n    }\n}</code></pre><h4>üîß Using Directives - Importing Functionality</h4><h5>Basic Using Statement:</h5><pre><code>using System;                    // Import entire namespace\nusing System.Collections.Generic; // Import collections\nusing MyCompany.ECommerce.Models; // Import your custom namespace\n\n// Now you can use types without full qualification\nConsole.WriteLine(\"Hello\");      // Instead of System.Console.WriteLine\nList<string> names = new List<string>(); // Instead of System.Collections.Generic.List</code></pre><h5>Alias Directives:</h5><pre><code>using WinForms = System.Windows.Forms;  // Create an alias\nusing WebControls = System.Web.UI.WebControls;\n\n// Now use the aliases\nWinForms.Button winButton = new WinForms.Button();\nWebControls.Button webButton = new WebControls.Button();</code></pre><h4>üåç Global Using (C# 10+)</h4><p>Global using statements apply to all files in the project:</p><pre><code>// In GlobalUsings.cs or any .cs file\nglobal using System;\nglobal using System.Collections.Generic;\nglobal using Microsoft.Extensions.Logging;\n\n// Now these are available in ALL files without explicit using statements</code></pre><h4>üèóÔ∏è Common Namespace Patterns</h4><h5>Microsoft's Naming Convention:</h5><ul><li><strong>Company.Product.Feature:</strong> Microsoft.AspNetCore.Mvc</li><li><strong>Company.Technology:</strong> Microsoft.EntityFrameworkCore</li><li><strong>System.Area:</strong> System.IO, System.Net.Http</li></ul><h5>Your Project Structure:</h5><pre><code>MyCompany.ProjectName.Controllers    // Web controllers\nMyCompany.ProjectName.Services      // Business logic\nMyCompany.ProjectName.Models        // Data models\nMyCompany.ProjectName.Data          // Data access\nMyCompany.ProjectName.Utilities     // Helper classes</code></pre><h4>üîç Fully Qualified Names</h4><p>Sometimes you need to use the full namespace path:</p><pre><code>// When there are naming conflicts\nSystem.Console.WriteLine(\"Hello\");           // System's Console\nMyCompany.Logging.Console.WriteLine(\"Hi\");   // Your custom Console class\n\n// When you don't have a using statement\nvar timer = new System.Timers.Timer(1000);</code></pre><h4>üé™ Special Namespace Features</h4><h5>Root Namespace (Global Namespace):</h5><pre><code>// Classes without namespace are in the global namespace\nclass GlobalClass\n{\n    // This is in the root/global namespace\n}\n\n// Access from any namespace:\nglobal::GlobalClass instance = new global::GlobalClass();</code></pre><h5>Extern Alias:</h5><p>Used when you have different versions of the same assembly:</p><pre><code>extern alias OldVersion;\nextern alias NewVersion;\n\nOldVersion::MyNamespace.MyClass oldClass;\nNewVersion::MyNamespace.MyClass newClass;</code></pre><h4>üìö Built-in .NET Namespaces</h4><ul><li><strong>System:</strong> Core functionality (Console, DateTime, Math)</li><li><strong>System.IO:</strong> File and stream operations</li><li><strong>System.Collections.Generic:</strong> Generic collections (List, Dictionary)</li><li><strong>System.Linq:</strong> LINQ query operations</li><li><strong>System.Threading.Tasks:</strong> Asynchronous programming</li><li><strong>System.Text:</strong> String manipulation and encoding</li><li><strong>System.Net.Http:</strong> HTTP client operations</li></ul><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Circular Dependencies:</strong> Namespace A references B, B references A</li><li><strong>Too Many Using Statements:</strong> Can slow compilation and cause ambiguity</li><li><strong>Namespace vs Assembly Confusion:</strong> Namespaces are logical, assemblies are physical</li><li><strong>Global Namespace Pollution:</strong> Putting too much in the root namespace</li></ul><h4>üèÜ Best Practices</h4><ul><li>Use your company/project name as the root namespace</li><li>Keep namespace hierarchy 2-4 levels deep</li><li>Match folder structure to namespace structure</li><li>Don't put types directly in the root namespace</li><li>Use meaningful, descriptive names</li><li>Avoid abbreviations in namespace names</li><li>Place using statements at the top of files</li><li>Order using statements: System namespaces first, then third-party, then your own</li></ul><h4>üîß IDE Tips</h4><ul><li><strong>Visual Studio:</strong> Ctrl+. to add missing using statements</li><li><strong>Organize usings:</strong> Remove unused using statements automatically</li><li><strong>Code completion:</strong> Type a class name and the IDE suggests the namespace</li></ul></div>",
      "code": "namespace MyApp.Models {\n    public class Person { public string Name { get; set; } }\n}\nusing MyApp.Models;\nvar p = new Person { Name = \"Ada\" };",
      "quiz": [
        { "q": "Primary purpose of namespaces?", "options": ["Performance", "Security", "Organization"], "answer": 2 }
      ],
      "completionCriteria": "Type compiles in declared namespace and is used via using.",
      "nextLevel": 6
    },
    {
      "id": 6,
      "tier": 1,
      "title": "Branching",
      "description": "if/else and switch expressions.",
      "requirements": [
        "Implement if/else",
        "Use switch expression"
      ],
      "theory": "<div class='theory-content'><h4>üõ§Ô∏è Branching - Making Decisions in Code</h4><p>Branching allows your program to make decisions and execute different code paths based on conditions. It's like a choose-your-own-adventure book for your program!</p><h4>üîÄ If-Else Statements - The Foundation of Decision Making</h4><h5>Basic If Statement:</h5><pre><code>int age = 18;\nif (age >= 18)\n{\n    Console.WriteLine(\"You can vote!\");\n}</code></pre><h5>If-Else Structure:</h5><pre><code>int score = 85;\nif (score >= 90)\n{\n    Console.WriteLine(\"Grade: A\");\n}\nelse if (score >= 80)\n{\n    Console.WriteLine(\"Grade: B\");\n}\nelse if (score >= 70)\n{\n    Console.WriteLine(\"Grade: C\");\n}\nelse\n{\n    Console.WriteLine(\"Grade: F\");\n}</code></pre><h4>üéØ Switch Statements - Multiple Choice Made Easy</h4><h5>Traditional Switch Statement:</h5><pre><code>int dayOfWeek = 3;\nswitch (dayOfWeek)\n{\n    case 1:\n        Console.WriteLine(\"Monday\");\n        break;\n    case 2:\n        Console.WriteLine(\"Tuesday\");\n        break;\n    case 3:\n        Console.WriteLine(\"Wednesday\");\n        break;\n    default:\n        Console.WriteLine(\"Weekend!\");\n        break;\n}</code></pre><h4>üöÄ Switch Expressions (C# 8.0+) - Modern and Concise</h4><p>Switch expressions provide a more functional approach to branching:</p><h5>Basic Switch Expression:</h5><pre><code>int dayNumber = 3;\nstring dayName = dayNumber switch\n{\n    1 => \"Monday\",\n    2 => \"Tuesday\",\n    3 => \"Wednesday\",\n    4 => \"Thursday\",\n    5 => \"Friday\",\n    _ => \"Weekend\"  // _ is the discard pattern (default)\n};</code></pre><h5>Pattern Matching with Switch Expressions:</h5><pre><code>object value = 42;\nstring description = value switch\n{\n    int i when i > 0 => \"Positive integer\",\n    int i when i < 0 => \"Negative integer\",\n    int => \"Zero\",\n    string s when s.Length > 5 => \"Long string\",\n    string s => \"Short string\",\n    null => \"It's null\",\n    _ => \"Something else\"\n};</code></pre><h4>üé® Advanced Pattern Matching</h4><h5>Type Patterns:</h5><pre><code>object obj = \"Hello\";\nstring result = obj switch\n{\n    string s => $\"String: {s}\",\n    int i => $\"Integer: {i}\",\n    bool b => $\"Boolean: {b}\",\n    null => \"Null value\",\n    _ => \"Unknown type\"\n};</code></pre><h5>Property Patterns:</h5><pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\n// Pattern matching on properties\nstring GetCategory(Person person) => person switch\n{\n    { Age: < 13 } => \"Child\",\n    { Age: >= 13 and < 20 } => \"Teenager\",\n    { Age: >= 20 and < 65 } => \"Adult\",\n    { Age: >= 65 } => \"Senior\",\n    _ => \"Unknown\"\n};</code></pre><h5>Tuple Patterns:</h5><pre><code>(int x, int y) point = (3, 4);\nstring quadrant = point switch\n{\n    (0, 0) => \"Origin\",\n    (var x, var y) when x > 0 && y > 0 => \"Quadrant I\",\n    (var x, var y) when x < 0 && y > 0 => \"Quadrant II\",\n    (var x, var y) when x < 0 && y < 0 => \"Quadrant III\",\n    (var x, var y) when x > 0 && y < 0 => \"Quadrant IV\",\n    _ => \"On axis\"\n};</code></pre><h4>‚ö° Performance Considerations</h4><ul><li><strong>Switch expressions</strong> can be more efficient than if-else chains</li><li><strong>Jump tables</strong> are used for contiguous integer cases</li><li><strong>String switches</strong> use hash codes for fast lookup</li><li><strong>Pattern matching</strong> may have overhead compared to simple value checks</li></ul><h4>üõ°Ô∏è Null Safety in Branching</h4><pre><code>string text = GetSomeString();\n\n// Traditional null check\nif (text != null && text.Length > 0)\n{\n    Console.WriteLine(text);\n}\n\n// Null-conditional operator\nif (text?.Length > 0)\n{\n    Console.WriteLine(text);\n}\n\n// Pattern matching with null check\nstring result = text switch\n{\n    null => \"No text\",\n    \"\" => \"Empty text\",\n    var t when t.Length < 5 => \"Short text\",\n    _ => \"Long text\"\n};</code></pre><h4>üé≠ Conditional (Ternary) Operator</h4><p>For simple conditions, the ternary operator provides a concise alternative:</p><pre><code>int age = 20;\nstring status = age >= 18 ? \"Adult\" : \"Minor\";\n\n// Nested ternary (use sparingly)\nstring grade = score >= 90 ? \"A\" : \n               score >= 80 ? \"B\" : \n               score >= 70 ? \"C\" : \"F\";</code></pre><h4>üîß Logical Operators in Conditions</h4><h5>AND Operator (&&):</h5><pre><code>if (age >= 18 && hasLicense)\n{\n    Console.WriteLine(\"Can drive\");\n}</code></pre><h5>OR Operator (||):</h5><pre><code>if (isWeekend || isHoliday)\n{\n    Console.WriteLine(\"No work today!\");\n}</code></pre><h5>NOT Operator (!):</h5><pre><code>if (!isLoggedIn)\n{\n    Console.WriteLine(\"Please log in\");\n}</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Missing breaks</strong> in switch statements (fall-through)</li><li><strong>Complex conditions</strong> that are hard to read</li><li><strong>Deep nesting</strong> of if-else statements</li><li><strong>Comparing floats</strong> with == (use tolerance instead)</li><li><strong>Assignment vs comparison</strong> (= vs ==)</li></ul><h4>üèÜ Best Practices</h4><ul><li>Use switch expressions for multiple value comparisons</li><li>Keep conditions simple and readable</li><li>Use early returns to reduce nesting</li><li>Consider guard clauses for validation</li><li>Use meaningful variable names in conditions</li><li>Extract complex conditions into well-named methods</li><li>Prefer pattern matching for type checking</li></ul><h4>üéØ When to Use What</h4><ul><li><strong>If-else:</strong> Complex conditions, different data types</li><li><strong>Switch statement:</strong> Many discrete values, need multiple statements per case</li><li><strong>Switch expression:</strong> Mapping values, functional style, single expressions</li><li><strong>Ternary operator:</strong> Simple conditions with two outcomes</li></ul></div>",
      "code": "int n = 3;\nstring desc = n switch { 1 => \"one\", 2 => \"two\", _ => \"many\" };",
      "quiz": [
        { "q": "Which is a valid switch expression arm?", "options": ["case 1:", "1 => \"one\""], "answer": 1 }
      ],
      "completionCriteria": "Program uses switch expression for mapping values.",
      "nextLevel": 7
    },
    {
      "id": 7,
      "tier": 1,
      "title": "Looping",
      "description": "for, while, foreach patterns.",
      "requirements": [
        "Iterate arrays and lists",
        "Avoid off-by-one errors"
      ],
      "theory": "<div class='theory-content'><h4>üîÑ Looping - Repeating Code Efficiently</h4><p>Loops are fundamental programming constructs that allow you to execute code repeatedly. Instead of writing the same code multiple times, loops provide an elegant solution for repetitive tasks.</p><h4>üéØ For Loop - When You Know the Count</h4><h5>Basic For Loop Structure:</h5><pre><code>for (int i = 0; i < 10; i++)\n{\n    Console.WriteLine($\"Count: {i}\");\n}</code></pre><p><strong>Components of a for loop:</strong></p><ul><li><strong>Initialization:</strong> <code>int i = 0</code> - executed once at the start</li><li><strong>Condition:</strong> <code>i < 10</code> - checked before each iteration</li><li><strong>Increment:</strong> <code>i++</code> - executed after each iteration</li></ul><h5>Practical Examples:</h5><pre><code>// Print multiplication table\nfor (int i = 1; i <= 10; i++)\n{\n    Console.WriteLine($\"5 x {i} = {5 * i}\");\n}\n\n// Iterate through array indices\nint[] numbers = {1, 2, 3, 4, 5};\nfor (int i = 0; i < numbers.Length; i++)\n{\n    Console.WriteLine($\"Index {i}: {numbers[i]}\");\n}\n\n// Reverse iteration\nfor (int i = 10; i >= 1; i--)\n{\n    Console.WriteLine($\"Countdown: {i}\");\n}</code></pre><h4>üîÑ While Loop - Condition-Based Repetition</h4><h5>Basic While Loop:</h5><pre><code>int count = 0;\nwhile (count < 5)\n{\n    Console.WriteLine($\"Count: {count}\");\n    count++; // Don't forget to update the condition!\n}</code></pre><h5>Practical Examples:</h5><pre><code>// User input validation\nint userInput;\nwhile (true)\n{\n    Console.Write(\"Enter a number (1-10): \");\n    if (int.TryParse(Console.ReadLine(), out userInput) && \n        userInput >= 1 && userInput <= 10)\n    {\n        break; // Exit the loop when valid input is received\n    }\n    Console.WriteLine(\"Invalid input. Try again.\");\n}\n\n// Reading from a stream\nusing var reader = new StreamReader(\"file.txt\");\nstring line;\nwhile ((line = reader.ReadLine()) != null)\n{\n    Console.WriteLine(line);\n}</code></pre><h4>üé≤ Do-While Loop - Execute At Least Once</h4><h5>Basic Do-While Structure:</h5><pre><code>int attempts = 0;\ndo\n{\n    Console.WriteLine(\"Attempting connection...\");\n    attempts++;\n} while (attempts < 3);</code></pre><h5>Use Case - Menu Systems:</h5><pre><code>char choice;\ndo\n{\n    Console.WriteLine(\"Menu:\");\n    Console.WriteLine(\"1. Option A\");\n    Console.WriteLine(\"2. Option B\");\n    Console.WriteLine(\"3. Quit\");\n    Console.Write(\"Choose: \");\n    choice = Console.ReadKey().KeyChar;\n    Console.WriteLine();\n    \n    switch (choice)\n    {\n        case '1':\n            Console.WriteLine(\"You chose Option A\");\n            break;\n        case '2':\n            Console.WriteLine(\"You chose Option B\");\n            break;\n    }\n} while (choice != '3');</code></pre><h4>üé® Foreach Loop - Iterating Collections</h4><h5>Basic Foreach Syntax:</h5><pre><code>int[] numbers = {1, 2, 3, 4, 5};\nforeach (int number in numbers)\n{\n    Console.WriteLine(number);\n}</code></pre><h5>Advanced Foreach Examples:</h5><pre><code>// With different collection types\nList<string> names = new List<string> {\"Alice\", \"Bob\", \"Charlie\"};\nforeach (string name in names)\n{\n    Console.WriteLine($\"Hello, {name}!\");\n}\n\n// With dictionaries\nDictionary<string, int> scores = new Dictionary<string, int>\n{\n    {\"Alice\", 95},\n    {\"Bob\", 87},\n    {\"Charlie\", 92}\n};\n\nforeach (KeyValuePair<string, int> kvp in scores)\n{\n    Console.WriteLine($\"{kvp.Key}: {kvp.Value}\");\n}\n\n// Using var for type inference\nforeach (var item in scores)\n{\n    Console.WriteLine($\"{item.Key} scored {item.Value}\");\n}</code></pre><h4>üîß Loop Control Statements</h4><h5>Break Statement - Exit the Loop:</h5><pre><code>for (int i = 0; i < 100; i++)\n{\n    if (i == 50)\n    {\n        Console.WriteLine(\"Breaking at 50\");\n        break; // Exits the loop immediately\n    }\n    Console.WriteLine(i);\n}</code></pre><h5>Continue Statement - Skip Current Iteration:</h5><pre><code>for (int i = 0; i < 10; i++)\n{\n    if (i % 2 == 0) // Skip even numbers\n    {\n        continue; // Skip to next iteration\n    }\n    Console.WriteLine($\"Odd number: {i}\");\n}</code></pre><h4>üîÄ Nested Loops - Loops Within Loops</h4><h5>Matrix Operations:</h5><pre><code>int[,] matrix = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n};\n\nfor (int row = 0; row < 3; row++)\n{\n    for (int col = 0; col < 3; col++)\n    {\n        Console.Write($\"{matrix[row, col]} \");\n    }\n    Console.WriteLine(); // New line after each row\n}</code></pre><h5>Pattern Generation:</h5><pre><code>// Generate a multiplication table\nfor (int i = 1; i <= 10; i++)\n{\n    for (int j = 1; j <= 10; j++)\n    {\n        Console.Write($\"{i * j:D3} \"); // D3 formats to 3 digits\n    }\n    Console.WriteLine();\n}</code></pre><h4>‚ö° Performance Considerations</h4><ul><li><strong>For loops</strong> are fastest for indexed access</li><li><strong>Foreach loops</strong> are optimized for collections and are often as fast as for loops</li><li><strong>While loops</strong> have minimal overhead but require manual index management</li><li><strong>Avoid expensive operations</strong> in loop conditions</li><li><strong>Cache collection.Count</strong> in for loops when the collection doesn't change</li></ul><h5>Performance Example:</h5><pre><code>// Inefficient - Count is called every iteration\nfor (int i = 0; i < myList.Count; i++) { }\n\n// Better - Cache the count\nint count = myList.Count;\nfor (int i = 0; i < count; i++) { }\n\n// Best for this case - use foreach\nforeach (var item in myList) { }</code></pre><h4>üî¢ Loop Patterns and Techniques</h4><h5>Accumulator Pattern:</h5><pre><code>int[] numbers = {1, 2, 3, 4, 5};\nint sum = 0;\nforeach (int number in numbers)\n{\n    sum += number; // Accumulate the sum\n}\nConsole.WriteLine($\"Sum: {sum}\");</code></pre><h5>Counter Pattern:</h5><pre><code>string[] words = {\"apple\", \"banana\", \"cherry\", \"apple\"};\nint appleCount = 0;\nforeach (string word in words)\n{\n    if (word == \"apple\")\n    {\n        appleCount++;\n    }\n}\nConsole.WriteLine($\"Apples found: {appleCount}\");</code></pre><h5>Search Pattern:</h5><pre><code>int[] numbers = {1, 3, 7, 12, 18};\nint target = 12;\nbool found = false;\nint index = -1;\n\nfor (int i = 0; i < numbers.Length; i++)\n{\n    if (numbers[i] == target)\n    {\n        found = true;\n        index = i;\n        break; // Stop searching once found\n    }\n}\n\nif (found)\n{\n    Console.WriteLine($\"Found {target} at index {index}\");\n}\nelse\n{\n    Console.WriteLine($\"{target} not found\");\n}</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Infinite loops:</strong> Forgetting to update loop variables</li><li><strong>Off-by-one errors:</strong> Using <= instead of < with array.Length</li><li><strong>Modifying collections:</strong> Changing a collection while iterating</li><li><strong>Nested loop performance:</strong> O(n¬≤) complexity can be expensive</li><li><strong>Floating-point comparisons:</strong> Precision issues in loop conditions</li></ul><h4>üèÜ Best Practices</h4><ul><li>Use foreach for simple iteration over collections</li><li>Use for loops when you need the index</li><li>Use while loops for unknown iteration counts</li><li>Always ensure loop termination conditions</li><li>Keep loop bodies focused and simple</li><li>Extract complex loop logic into methods</li><li>Use meaningful variable names for loop counters</li><li>Consider LINQ for complex collection operations</li></ul><h4>üöÄ Modern C# Loop Features</h4><h5>Index and Range (C# 8.0+):</h5><pre><code>int[] numbers = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n// Using ranges in loops\nfor (int i = 2; i < 8; i++)\n{\n    Console.WriteLine(numbers[i]);\n}\n\n// Equivalent using range\nforeach (int number in numbers[2..8])\n{\n    Console.WriteLine(number);\n}</code></pre><h5>Parallel Loops:</h5><pre><code>using System.Threading.Tasks;\n\n// Parallel foreach for CPU-intensive operations\nParallel.ForEach(largeCollection, item =>\n{\n    // Process item in parallel\n    ProcessItem(item);\n});</code></pre></div>",
      "code": "var nums = new[] {1,2,3};\nforeach(var n in nums) Console.WriteLine(n);",
      "quiz": [
        { "q": "Which loop guarantees at least one iteration?", "options": ["for", "while", "do-while"], "answer": 2 }
      ],
      "completionCriteria": "Loop prints all items exactly once.",
      "nextLevel": 8
    },
    {
      "id": 8,
      "tier": 1,
      "title": "Iterators",
      "description": "yield return and IEnumerable.",
      "requirements": [
        "Implement an iterator method",
        "Use deferred execution"
      ],
      "theory": "<div class='theory-content'><h4>üé≠ Iterators - Creating Custom Sequences</h4><p>Iterators are a powerful C# feature that allows you to create custom enumerable sequences efficiently. They use the <code>yield</code> keyword to implement lazy evaluation and deferred execution.</p><h4>üéØ The yield Keyword - Lazy Evaluation</h4><h5>Basic Iterator Method:</h5><pre><code>public static IEnumerable<int> GetNumbers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}\n\n// Usage\nforeach (int number in GetNumbers())\n{\n    Console.WriteLine(number); // Prints 1, 2, 3\n}</code></pre><h5>Dynamic Iterator with Logic:</h5><pre><code>public static IEnumerable<int> GetEvenNumbers(int max)\n{\n    for (int i = 0; i <= max; i += 2)\n    {\n        Console.WriteLine($\"Generating: {i}\"); // This proves lazy evaluation\n        yield return i;\n    }\n}\n\n// Only generates values when enumerated\nvar evens = GetEvenNumbers(10); // No output yet!\nforeach (var num in evens.Take(3)) // Only generates 0, 2, 4\n{\n    Console.WriteLine($\"Received: {num}\");\n}</code></pre><h4>üîÑ How Iterators Work - State Machines</h4><p>When you use <code>yield return</code>, the C# compiler generates a state machine that implements <code>IEnumerable<T></code> and <code>IEnumerator<T></code>:</p><pre><code>// This method...\npublic static IEnumerable<string> GetMessages()\n{\n    Console.WriteLine(\"Before first yield\");\n    yield return \"Hello\";\n    Console.WriteLine(\"Between yields\");\n    yield return \"World\";\n    Console.WriteLine(\"After last yield\");\n}\n\n// Becomes a state machine that tracks:\n// - Current state (which yield we're at)\n// - Local variables\n// - Current value</code></pre><h4>üé® Practical Iterator Examples</h4><h5>Fibonacci Sequence:</h5><pre><code>public static IEnumerable<long> Fibonacci(int count)\n{\n    long a = 0, b = 1;\n    \n    for (int i = 0; i < count; i++)\n    {\n        yield return a;\n        (a, b) = (b, a + b); // Tuple deconstruction\n    }\n}\n\n// Generate first 10 Fibonacci numbers\nforeach (var fib in Fibonacci(10))\n{\n    Console.WriteLine(fib);\n}</code></pre><h5>File Line Reader:</h5><pre><code>public static IEnumerable<string> ReadLines(string filePath)\n{\n    using var reader = new StreamReader(filePath);\n    string line;\n    \n    while ((line = reader.ReadLine()) != null)\n    {\n        yield return line;\n    }\n} // File automatically closed when enumeration ends\n\n// Process large files efficiently\nforeach (var line in ReadLines(\"huge-file.txt\").Take(100))\n{\n    ProcessLine(line); // Only reads first 100 lines\n}</code></pre><h5>Tree Traversal:</h5><pre><code>public class TreeNode\n{\n    public string Value { get; set; }\n    public List<TreeNode> Children { get; set; } = new();\n    \n    // Depth-first traversal iterator\n    public IEnumerable<string> TraverseDepthFirst()\n    {\n        yield return Value; // Visit current node\n        \n        foreach (var child in Children)\n        {\n            foreach (var value in child.TraverseDepthFirst())\n            {\n                yield return value; // Recursively visit children\n            }\n        }\n    }\n}</code></pre><h4>üõë yield break - Early Termination</h4><pre><code>public static IEnumerable<int> GetNumbersUntilNegative(int[] numbers)\n{\n    foreach (int number in numbers)\n    {\n        if (number < 0)\n        {\n            yield break; // Stop iteration immediately\n        }\n        yield return number;\n    }\n}\n\nvar numbers = new[] { 1, 2, 3, -1, 4, 5 };\nforeach (var num in GetNumbersUntilNegative(numbers))\n{\n    Console.WriteLine(num); // Prints: 1, 2, 3 (stops at -1)\n}</code></pre><h4>‚ö° Performance Benefits</h4><h5>Memory Efficiency:</h5><pre><code>// Memory-efficient: Only one item in memory at a time\npublic static IEnumerable<int> GenerateMillionNumbers()\n{\n    for (int i = 0; i < 1_000_000; i++)\n    {\n        yield return i * i; // Calculate on demand\n    }\n}\n\n// vs. Memory-intensive: All items in memory\npublic static List<int> GenerateMillionNumbersList()\n{\n    var list = new List<int>();\n    for (int i = 0; i < 1_000_000; i++)\n    {\n        list.Add(i * i); // All stored in memory\n    }\n    return list;\n}</code></pre><h5>Lazy Evaluation Example:</h5><pre><code>public static IEnumerable<string> ProcessExpensiveData(IEnumerable<string> data)\n{\n    foreach (var item in data)\n    {\n        // Expensive operation only happens when enumerated\n        var processed = PerformExpensiveProcessing(item);\n        yield return processed;\n    }\n}\n\nvar data = GetLargeDataSet();\nvar processed = ProcessExpensiveData(data); // No processing yet!\n\n// Only processes first 5 items\nvar firstFive = processed.Take(5).ToList();</code></pre><h4>üîó Combining Iterators with LINQ</h4><pre><code>public static IEnumerable<T> Repeat<T>(T value, int count)\n{\n    for (int i = 0; i < count; i++)\n    {\n        yield return value;\n    }\n}\n\npublic static IEnumerable<int> Range(int start, int count)\n{\n    for (int i = 0; i < count; i++)\n    {\n        yield return start + i;\n    }\n}\n\n// Compose iterators with LINQ\nvar result = Range(1, 10)\n    .Where(x => x % 2 == 0)\n    .Select(x => x * x)\n    .Take(3);\n\nforeach (var value in result)\n{\n    Console.WriteLine(value); // 4, 16, 36\n}</code></pre><h4>üéØ IEnumerable vs IEnumerator</h4><h5>IEnumerable<T> - The Collection:</h5><pre><code>public interface IEnumerable<T>\n{\n    IEnumerator<T> GetEnumerator();\n}\n\n// Can be enumerated multiple times\nvar numbers = GetNumbers();\nforeach (var n in numbers) { } // First enumeration\nforeach (var n in numbers) { } // Second enumeration (starts over)</code></pre><h5>IEnumerator<T> - The Iterator:</h5><pre><code>public interface IEnumerator<T> : IDisposable\n{\n    T Current { get; }\n    bool MoveNext();\n    void Reset(); // Often not implemented\n}\n\n// Manual enumeration\nvar enumerator = GetNumbers().GetEnumerator();\nwhile (enumerator.MoveNext())\n{\n    Console.WriteLine(enumerator.Current);\n}\nenumerator.Dispose();</code></pre><h4>üîß Advanced Iterator Patterns</h4><h5>Parameterized Iterators:</h5><pre><code>public static IEnumerable<T> Generate<T>(T seed, Func<T, T> generator, int count)\n{\n    var current = seed;\n    for (int i = 0; i < count; i++)\n    {\n        yield return current;\n        current = generator(current);\n    }\n}\n\n// Generate powers of 2\nvar powersOfTwo = Generate(1, x => x * 2, 10);\nforeach (var power in powersOfTwo)\n{\n    Console.WriteLine(power); // 1, 2, 4, 8, 16, ...\n}</code></pre><h5>Infinite Sequences:</h5><pre><code>public static IEnumerable<DateTime> InfiniteDates(DateTime start)\n{\n    var current = start;\n    while (true) // Infinite loop!\n    {\n        yield return current;\n        current = current.AddDays(1);\n    }\n}\n\n// Safe to create (lazy evaluation)\nvar dates = InfiniteDates(DateTime.Today);\n\n// Only take what you need\nvar nextWeek = dates.Take(7).ToList();</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Multiple enumeration:</strong> Iterator methods execute each time they're enumerated</li><li><strong>Exception handling:</strong> Exceptions in iterators can be tricky</li><li><strong>Resource management:</strong> Be careful with disposable resources</li><li><strong>Debugging:</strong> Harder to debug due to deferred execution</li><li><strong>Side effects:</strong> Code executes when enumerated, not when called</li></ul><h5>Multiple Enumeration Issue:</h5><pre><code>// ‚ùå This can be expensive!\npublic static IEnumerable<string> ExpensiveOperation()\n{\n    Console.WriteLine(\"Doing expensive work...\");\n    yield return \"Result 1\";\n    yield return \"Result 2\";\n}\n\nvar data = ExpensiveOperation();\nvar count1 = data.Count(); // \"Doing expensive work...\" printed\nvar count2 = data.Count(); // \"Doing expensive work...\" printed AGAIN!\n\n// ‚úÖ Better: Materialize when needed\nvar materializedData = ExpensiveOperation().ToList();\nvar count1 = materializedData.Count(); // No re-execution\nvar count2 = materializedData.Count(); // No re-execution</code></pre><h4>üõ°Ô∏è Exception Handling in Iterators</h4><pre><code>public static IEnumerable<string> SafeIterator(IEnumerable<string> input)\n{\n    // Validation happens immediately\n    if (input == null)\n        throw new ArgumentNullException(nameof(input));\n    \n    return SafeIteratorImpl(input);\n}\n\nprivate static IEnumerable<string> SafeIteratorImpl(IEnumerable<string> input)\n{\n    foreach (var item in input)\n    {\n        // This exception happens during enumeration\n        if (string.IsNullOrEmpty(item))\n            throw new InvalidOperationException(\"Empty item found\");\n            \n        yield return item.ToUpper();\n    }\n}</code></pre><h4>üèÜ Best Practices</h4><ul><li>Use iterators for large or infinite sequences</li><li>Be mindful of multiple enumeration costs</li><li>Validate parameters before the iterator implementation</li><li>Use <code>yield break</code> for early termination</li><li>Consider materializing with <code>ToList()</code> when appropriate</li><li>Document deferred execution behavior</li><li>Use iterators with LINQ for powerful composition</li><li>Prefer iterators over manually implementing IEnumerable</li></ul><h4>üöÄ Modern Iterator Features</h4><h5>Async Iterators (C# 8.0+):</h5><pre><code>public static async IAsyncEnumerable<string> ReadLinesAsync(string filePath)\n{\n    using var reader = new StreamReader(filePath);\n    string line;\n    \n    while ((line = await reader.ReadLineAsync()) != null)\n    {\n        yield return line;\n    }\n}\n\n// Async enumeration\nawait foreach (var line in ReadLinesAsync(\"file.txt\"))\n{\n    await ProcessLineAsync(line);\n}</code></pre><h5>Local Functions with Iterators:</h5><pre><code>public static IEnumerable<int> GetPrimes(int max)\n{\n    return GetPrimesImpl();\n    \n    IEnumerable<int> GetPrimesImpl()\n    {\n        for (int i = 2; i <= max; i++)\n        {\n            if (IsPrime(i))\n                yield return i;\n        }\n    }\n    \n    bool IsPrime(int n) => /* prime check logic */;\n}</code></pre></div>",
      "code": "IEnumerable<int> Evens(int max){\n  for(int i=0;i<=max;i+=2) yield return i;\n}\nforeach(var e in Evens(6)) Console.WriteLine(e);",
      "quiz": [
        { "q": "What does yield return enable?", "options": ["Eager evaluation", "Deferred execution"], "answer": 1 }
      ],
      "completionCriteria": "Custom iterator yields expected sequence.",
      "nextLevel": 9
    },
    {
      "id": 9,
      "tier": 1,
      "title": ".NET Ecosystem",
      "description": "CLR, FCL, tooling overview.",
      "concepts": ["CLR", "FCL", "Visual Studio", "VS Code Setup"],
      "requirements": [
        "Explain CLR and FCL",
        "Install and verify .NET SDK"
      ],
      "theory": "<div class='theory-content'><h4>üåê .NET Ecosystem - Understanding the Foundation</h4><p>The .NET ecosystem is a comprehensive platform for building applications across different domains. Understanding its components is crucial for becoming a proficient C# developer.</p><h4>üèóÔ∏è Common Language Runtime (CLR) - The Engine</h4><p>The CLR is the execution environment that runs .NET applications. It provides several critical services:</p><h5>Key CLR Responsibilities:</h5><ul><li><strong>Memory Management:</strong> Automatic garbage collection</li><li><strong>Type Safety:</strong> Ensures type system integrity</li><li><strong>Exception Handling:</strong> Structured exception management</li><li><strong>Security:</strong> Code access security and verification</li><li><strong>Threading:</strong> Thread management and synchronization</li></ul><h5>JIT Compilation Process:</h5><pre><code>C# Source Code (.cs)\n       ‚Üì (C# Compiler - Roslyn)\nIntermediate Language (.dll/.exe with IL)\n       ‚Üì (Just-In-Time Compiler)\nNative Machine Code (x86, x64, ARM)\n       ‚Üì\nExecution on Target Platform</code></pre><h5>Memory Management - Heap vs Stack:</h5><pre><code>public class MemoryExample\n{\n    public static void DemonstrateMemory()\n    {\n        // Stack allocated (value types)\n        int stackValue = 42;        // Lives on stack\n        DateTime now = DateTime.Now; // Struct - stack\n        \n        // Heap allocated (reference types)\n        string text = \"Hello\";      // Reference on stack, object on heap\n        var list = new List<int>(); // Reference on stack, object on heap\n        \n        // The CLR's Garbage Collector will automatically\n        // clean up heap objects when they're no longer referenced\n    }\n}</code></pre><h4>üìö Framework Class Library (FCL) - The Toolkit</h4><p>The FCL provides thousands of pre-built classes and methods for common programming tasks:</p><h5>Core FCL Namespaces:</h5><pre><code>// System - Core types and utilities\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\n// Input/Output operations\nusing System.IO;\nusing System.Text;\n\n// Networking\nusing System.Net;\nusing System.Net.Http;\n\n// Threading and async operations\nusing System.Threading;\nusing System.Threading.Tasks;\n\n// Data access\nusing System.Data;\nusing System.Data.SqlClient;</code></pre><h5>FCL in Action:</h5><pre><code>// File operations\nstring content = File.ReadAllText(\"data.txt\");\n\n// HTTP client\nusing var client = new HttpClient();\nstring response = await client.GetStringAsync(\"https://api.example.com\");\n\n// JSON serialization\nvar person = new { Name = \"Alice\", Age = 30 };\nstring json = JsonSerializer.Serialize(person);\n\n// LINQ operations\nint[] numbers = { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(n => n % 2 == 0).ToArray();</code></pre><h4>üõ†Ô∏è .NET SDK and Tooling</h4><h5>Essential .NET CLI Commands:</h5><pre><code>// Check installed SDKs and runtimes\ndotnet --info\ndotnet --list-sdks\ndotnet --list-runtimes\n\n// Create new projects\ndotnet new console -n MyConsoleApp\ndotnet new classlib -n MyLibrary\ndotnet new web -n MyWebApp\ndotnet new blazorserver -n MyBlazorApp\n\n// Build and run\ndotnet build\ndotnet run\ndotnet publish -c Release\n\n// Package management\ndotnet add package Newtonsoft.Json\ndotnet remove package PackageName\ndotnet restore</code></pre><h5>Project File Structure (.csproj):</h5><pre><code><Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  \n  <ItemGroup>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n  </ItemGroup>\n</Project></code></pre><h4>üéØ .NET Implementations and Targets</h4><h5>.NET Framework vs .NET (Core):</h5><table><tr><th>Aspect</th><th>.NET Framework</th><th>.NET (5+)</th></tr><tr><td>Platform</td><td>Windows Only</td><td>Cross-platform</td></tr><tr><td>Open Source</td><td>Partially</td><td>Fully</td></tr><tr><td>Performance</td><td>Good</td><td>Excellent</td></tr><tr><td>Modern Features</td><td>Limited</td><td>Latest C# features</td></tr><tr><td>Deployment</td><td>Framework required</td><td>Self-contained options</td></tr></table><h5>Target Framework Monikers (TFMs):</h5><pre><code>// Modern .NET\nnet8.0          // .NET 8.0\nnet7.0          // .NET 7.0\nnet6.0          // .NET 6.0 (LTS)\n\n// Legacy .NET Framework\nnet48           // .NET Framework 4.8\nnet472          // .NET Framework 4.7.2\n\n// .NET Standard (for libraries)\nnetstandard2.1  // .NET Standard 2.1\nnetstandard2.0  // .NET Standard 2.0</code></pre><h4>üîß Development Environment Setup</h4><h5>Visual Studio vs VS Code:</h5><ul><li><strong>Visual Studio:</strong> Full-featured IDE, excellent for large projects, Windows/Mac</li><li><strong>VS Code:</strong> Lightweight, cross-platform, great for web development</li><li><strong>JetBrains Rider:</strong> Powerful cross-platform IDE, excellent refactoring tools</li><li><strong>Visual Studio for Mac:</strong> Native Mac IDE (being discontinued in favor of VS Code)</li></ul><h5>Essential VS Code Extensions for C#:</h5><pre><code>// Install via VS Code Extensions marketplace\n1. C# Dev Kit (ms-dotnettools.csdevkit)\n2. .NET Extension Pack\n3. NuGet Package Manager\n4. C# Extensions\n5. GitLens\n6. Prettier - Code formatter</code></pre><h4>üöÄ .NET Runtime Components</h4><h5>Base Class Library (BCL):</h5><pre><code>// Core types available in all .NET applications\nSystem.Object       // Base of all types\nSystem.String       // Immutable text\nSystem.Int32        // 32-bit integer\nSystem.DateTime     // Date and time\nSystem.Exception    // Base exception type\nSystem.Collections.Generic.List<T>  // Dynamic array</code></pre><h5>Runtime Services:</h5><pre><code>// Garbage Collector behavior\nGC.Collect();           // Force garbage collection (rarely needed)\nGC.GetTotalMemory(false); // Get current memory usage\n\n// Type reflection\nType stringType = typeof(string);\nMethodInfo[] methods = stringType.GetMethods();\n\n// Assembly loading\nAssembly assembly = Assembly.LoadFrom(\"MyLibrary.dll\");</code></pre><h4>üåç Cross-Platform Development</h4><h5>Platform Detection:</h5><pre><code>using System.Runtime.InteropServices;\n\npublic static class PlatformHelper\n{\n    public static void ShowPlatformInfo()\n    {\n        Console.WriteLine($\"OS: {RuntimeInformation.OSDescription}\");\n        Console.WriteLine($\"Architecture: {RuntimeInformation.OSArchitecture}\");\n        Console.WriteLine($\"Framework: {RuntimeInformation.FrameworkDescription}\");\n        \n        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n            Console.WriteLine(\"Running on Windows\");\n        else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))\n            Console.WriteLine(\"Running on Linux\");\n        else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))\n            Console.WriteLine(\"Running on macOS\");\n    }\n}</code></pre><h4>üì¶ Package Management with NuGet</h4><h5>Using NuGet Packages:</h5><pre><code>// Add packages via CLI\ndotnet add package Microsoft.Extensions.Logging\ndotnet add package EntityFrameworkCore\ndotnet add package AutoMapper\n\n// Using packages in code\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing AutoMapper;</code></pre><h5>Creating Your Own NuGet Package:</h5><pre><code>// In your .csproj file\n<PropertyGroup>\n  <PackageId>MyAwesomeLibrary</PackageId>\n  <Version>1.0.0</Version>\n  <Authors>Your Name</Authors>\n  <Description>A description of your library</Description>\n  <PackageLicenseExpression>MIT</PackageLicenseExpression>\n</PropertyGroup>\n\n// Build and pack\ndotnet pack -c Release\ndotnet nuget push bin/Release/*.nupkg --api-key YOUR_API_KEY</code></pre><h4>üîç Debugging and Diagnostics</h4><h5>Built-in Debugging Support:</h5><pre><code>using System.Diagnostics;\n\npublic class DebuggingExample\n{\n    public static void Main()\n    {\n        Debug.WriteLine(\"Debug message\"); // Only in Debug builds\n        Trace.WriteLine(\"Trace message\");  // In Debug and Release\n        \n        // Conditional compilation\n        #if DEBUG\n        Console.WriteLine(\"This only runs in debug mode\");\n        #endif\n        \n        // Performance measurement\n        var stopwatch = Stopwatch.StartNew();\n        DoSomeWork();\n        stopwatch.Stop();\n        Console.WriteLine($\"Elapsed: {stopwatch.ElapsedMilliseconds}ms\");\n    }\n}</code></pre><h4>‚ö° Performance and Optimization</h4><h5>JIT Optimization:</h5><pre><code>// The JIT compiler optimizes code based on usage patterns\n// Hot paths get more optimization\n// Cold code gets minimal optimization\n\n// AOT (Ahead-of-Time) compilation for faster startup\n// Available in .NET 7+ for specific scenarios\ndotnet publish -r win-x64 -c Release --self-contained -p:PublishAot=true</code></pre><h5>Memory Profiling Tools:</h5><ul><li><strong>dotMemory (JetBrains):</strong> Commercial memory profiler</li><li><strong>PerfView:</strong> Free Microsoft tool for memory analysis</li><li><strong>Visual Studio Diagnostic Tools:</strong> Built-in profiling</li><li><strong>dotnet-counters:</strong> Command-line performance monitoring</li></ul><h4>üèÜ Best Practices</h4><ul><li>Keep up with .NET LTS (Long Term Support) versions</li><li>Use the latest C# language features when possible</li><li>Leverage the FCL instead of reinventing common functionality</li><li>Understand memory management to write efficient code</li><li>Use appropriate project templates for your application type</li><li>Take advantage of cross-platform capabilities</li><li>Implement proper logging and diagnostics from the start</li><li>Use package management effectively</li></ul><h4>üöÄ Future of .NET</h4><ul><li><strong>.NET 8 (LTS):</strong> Current long-term support version</li><li><strong>Annual Releases:</strong> New version every November</li><li><strong>Cloud-Native:</strong> Optimized for containers and microservices</li><li><strong>Performance:</strong> Continuous improvements in speed and memory usage</li><li><strong>Native AOT:</strong> Compile-time optimization for specific scenarios</li><li><strong>WebAssembly:</strong> Running .NET in browsers with Blazor</li></ul></div>",
      "code": "// Verify SDK via command line\n// dotnet --version\n// dotnet new console -n Hello\n// dotnet run",
      "quiz": [
        { "q": "JIT compiles IL to?", "options": ["Java bytecode", "Native machine code"], "answer": 1 }
      ],
      "completionCriteria": "Explain CLR vs FCL in your own words.",
      "nextLevel": 10
    },
    {
      "id": 10,
      "tier": 1,
      "title": "Classes & Objects",
      "description": "Constructors, destructors, properties, indexers, static members.",
      "concepts": ["Constructors", "Destructors", "Properties", "Indexers", "Static Members"],
      "requirements": ["Define a class with properties", "Add a constructor", "Use a static member"],
      "theory": "<div class='theory-content'><h4>üèóÔ∏è Classes & Objects - Building Blocks of OOP</h4><p>Classes are blueprints for creating objects. They encapsulate data (fields and properties) and behavior (methods) into a single unit, forming the foundation of object-oriented programming in C#.</p><h4>üéØ Class Declaration and Structure</h4><h5>Basic Class Definition:</h5><pre><code>public class Person\n{\n    // Fields (usually private)\n    private string _name;\n    private int _age;\n    \n    // Properties (public interface)\n    public string Name \n    { \n        get => _name; \n        set => _name = value ?? throw new ArgumentNullException(nameof(value));\n    }\n    \n    public int Age\n    {\n        get => _age;\n        set => _age = value >= 0 ? value : throw new ArgumentException(\"Age cannot be negative\");\n    }\n    \n    // Auto-implemented properties\n    public DateTime BirthDate { get; set; }\n    public string Email { get; init; } // Init-only property (C# 9+)\n    \n    // Read-only computed property\n    public int YearsUntilRetirement => Math.Max(0, 65 - Age);\n}</code></pre><h4>üîß Constructors - Object Initialization</h4><h5>Multiple Constructor Patterns:</h5><pre><code>public class Employee\n{\n    public string Name { get; }\n    public int Id { get; }\n    public decimal Salary { get; set; }\n    public Department Department { get; set; }\n    \n    // Default constructor\n    public Employee()\n    {\n        Name = \"Unknown\";\n        Id = -1;\n        Salary = 0;\n    }\n    \n    // Primary constructor\n    public Employee(string name, int id)\n    {\n        Name = name ?? throw new ArgumentNullException(nameof(name));\n        Id = id > 0 ? id : throw new ArgumentException(\"ID must be positive\");\n        Salary = 0;\n    }\n    \n    // Constructor chaining\n    public Employee(string name, int id, decimal salary) : this(name, id)\n    {\n        Salary = salary;\n    }\n    \n    // Constructor with all parameters\n    public Employee(string name, int id, decimal salary, Department department) \n        : this(name, id, salary)\n    {\n        Department = department;\n    }\n}</code></pre><h5>Primary Constructors (C# 12+):</h5><pre><code>// Modern, concise syntax\npublic class Point(double x, double y)\n{\n    public double X { get; } = x;\n    public double Y { get; } = y;\n    \n    public double DistanceFromOrigin => Math.Sqrt(X * X + Y * Y);\n    \n    public override string ToString() => $\"({x}, {y})\"; // Can use constructor parameters\n}</code></pre><h4>üîí Access Modifiers and Encapsulation</h4><h5>Access Levels:</h5><pre><code>public class AccessExample\n{\n    public string PublicField;        // Accessible everywhere\n    private string _privateField;     // Only within this class\n    protected string ProtectedField;  // This class and derived classes\n    internal string InternalField;    // Within the same assembly\n    protected internal string ProtectedInternalField; // Protected OR internal\n    private protected string PrivateProtectedField;   // Protected AND internal\n    \n    // Property with different access levels for get/set\n    public string Name \n    { \n        get; \n        private set; // Only this class can set the value\n    }\n}</code></pre><h4>üé≠ Properties - Controlled Access to Data</h4><h5>Property Patterns:</h5><pre><code>public class BankAccount\n{\n    private decimal _balance;\n    \n    // Full property with validation\n    public decimal Balance\n    {\n        get => _balance;\n        private set\n        {\n            if (value < 0)\n                throw new ArgumentException(\"Balance cannot be negative\");\n            _balance = value;\n        }\n    }\n    \n    // Auto-implemented property with private setter\n    public string AccountNumber { get; private set; }\n    \n    // Computed property (read-only)\n    public string DisplayBalance => $\"${Balance:F2}\";\n    \n    // Property with backing field and lazy initialization\n    private List<Transaction> _transactions;\n    public List<Transaction> Transactions\n    {\n        get\n        {\n            _transactions ??= new List<Transaction>();\n            return _transactions;\n        }\n    }\n    \n    public void Deposit(decimal amount)\n    {\n        if (amount <= 0)\n            throw new ArgumentException(\"Deposit amount must be positive\");\n        \n        Balance += amount;\n        Transactions.Add(new Transaction(\"Deposit\", amount, DateTime.Now));\n    }\n}</code></pre><h4>üìö Indexers - Array-Like Access</h4><h5>Basic Indexer:</h5><pre><code>public class StudentGrades\n{\n    private Dictionary<string, double> _grades = new();\n    \n    // String indexer\n    public double this[string subject]\n    {\n        get => _grades.TryGetValue(subject, out var grade) ? grade : 0.0;\n        set\n        {\n            if (value < 0 || value > 100)\n                throw new ArgumentException(\"Grade must be between 0 and 100\");\n            _grades[subject] = value;\n        }\n    }\n    \n    // Multiple parameter indexer\n    public double this[string subject, int semester]\n    {\n        get => this[$\"{subject}_S{semester}\"];\n        set => this[$\"{subject}_S{semester}\"] = value;\n    }\n    \n    public IEnumerable<string> Subjects => _grades.Keys;\n    public double AverageGrade => _grades.Count > 0 ? _grades.Values.Average() : 0.0;\n}</code></pre><h5>Advanced Indexer Examples:</h5><pre><code>public class Matrix\n{\n    private double[,] _data;\n    \n    public Matrix(int rows, int cols)\n    {\n        _data = new double[rows, cols];\n    }\n    \n    // 2D indexer\n    public double this[int row, int col]\n    {\n        get\n        {\n            ValidateIndices(row, col);\n            return _data[row, col];\n        }\n        set\n        {\n            ValidateIndices(row, col);\n            _data[row, col] = value;\n        }\n    }\n    \n    // Range indexer (C# 8+)\n    public double[] this[int row, Range colRange]\n    {\n        get\n        {\n            var (start, length) = colRange.GetOffsetAndLength(_data.GetLength(1));\n            var result = new double[length];\n            for (int i = 0; i < length; i++)\n            {\n                result[i] = _data[row, start + i];\n            }\n            return result;\n        }\n    }\n    \n    private void ValidateIndices(int row, int col)\n    {\n        if (row < 0 || row >= _data.GetLength(0))\n            throw new IndexOutOfRangeException(\"Row index out of range\");\n        if (col < 0 || col >= _data.GetLength(1))\n            throw new IndexOutOfRangeException(\"Column index out of range\");\n    }\n}</code></pre><h4>‚ö° Static Members - Type-Level Functionality</h4><h5>Static Fields and Properties:</h5><pre><code>public class Counter\n{\n    // Static field - shared across all instances\n    private static int _totalInstances = 0;\n    \n    // Instance field - unique to each instance\n    private int _instanceId;\n    \n    // Static property\n    public static int TotalInstances => _totalInstances;\n    \n    // Instance property\n    public int InstanceId => _instanceId;\n    \n    public Counter()\n    {\n        _instanceId = ++_totalInstances; // Increment and assign\n    }\n    \n    // Static method\n    public static void ResetCounter()\n    {\n        _totalInstances = 0;\n    }\n    \n    // Static constructor - runs once when type is first used\n    static Counter()\n    {\n        Console.WriteLine(\"Counter type initialized\");\n        _totalInstances = 0;\n    }\n}</code></pre><h5>Static Classes and Extension Methods:</h5><pre><code>// Static class - cannot be instantiated\npublic static class MathHelper\n{\n    public static double ToRadians(double degrees) => degrees * Math.PI / 180;\n    public static double ToDegrees(double radians) => radians * 180 / Math.PI;\n    \n    public static bool IsPrime(int number)\n    {\n        if (number < 2) return false;\n        for (int i = 2; i <= Math.Sqrt(number); i++)\n        {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n}\n\n// Extension methods (must be in static class)\npublic static class StringExtensions\n{\n    public static bool IsValidEmail(this string email)\n    {\n        return !string.IsNullOrEmpty(email) && email.Contains('@');\n    }\n    \n    public static string Truncate(this string value, int maxLength)\n    {\n        if (string.IsNullOrEmpty(value)) return value;\n        return value.Length <= maxLength ? value : value[..maxLength] + \"...\";\n    }\n}\n\n// Usage\nstring email = \"user@example.com\";\nbool isValid = email.IsValidEmail(); // Extension method\nstring truncated = \"Very long text\".Truncate(10);</code></pre><h4>üíÄ Finalizers and IDisposable</h4><h5>Proper Resource Management:</h5><pre><code>public class FileProcessor : IDisposable\n{\n    private FileStream _fileStream;\n    private bool _disposed = false;\n    \n    public FileProcessor(string filePath)\n    {\n        _fileStream = new FileStream(filePath, FileMode.Open);\n    }\n    \n    // Finalizer (destructor) - rarely needed\n    ~FileProcessor()\n    {\n        Dispose(false);\n    }\n    \n    // IDisposable implementation\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n    \n    protected virtual void Dispose(bool disposing)\n    {\n        if (!_disposed)\n        {\n            if (disposing)\n            {\n                // Dispose managed resources\n                _fileStream?.Dispose();\n            }\n            \n            // Dispose unmanaged resources (if any)\n            _disposed = true;\n        }\n    }\n    \n    public void ProcessFile()\n    {\n        if (_disposed)\n            throw new ObjectDisposedException(nameof(FileProcessor));\n        \n        // Process the file...\n    }\n}</code></pre><h4>üîÑ Object Initialization Patterns</h4><h5>Object Initializers:</h5><pre><code>// Traditional constructor\nvar person1 = new Person(\"Alice\", 30);\n\n// Object initializer syntax\nvar person2 = new Person\n{\n    Name = \"Bob\",\n    Age = 25,\n    Email = \"bob@example.com\"\n};\n\n// Collection initializer\nvar people = new List<Person>\n{\n    new() { Name = \"Charlie\", Age = 35 },\n    new() { Name = \"Diana\", Age = 28 }\n};\n\n// With statement (C# 9+) - creates copy with changes\nvar person3 = person2 with { Age = 26 };</code></pre><h5>Record Types (C# 9+):</h5><pre><code>// Record - immutable by default\npublic record PersonRecord(string Name, int Age)\n{\n    public string Email { get; init; }\n}\n\n// Usage\nvar person = new PersonRecord(\"Alice\", 30) { Email = \"alice@example.com\" };\nvar olderPerson = person with { Age = 31 }; // Creates new instance\n\n// Value equality by default\nvar person1 = new PersonRecord(\"Bob\", 25);\nvar person2 = new PersonRecord(\"Bob\", 25);\nConsole.WriteLine(person1 == person2); // True (value equality)</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Public fields:</strong> Use properties instead for better encapsulation</li><li><strong>Constructors without validation:</strong> Always validate constructor parameters</li><li><strong>Mutable static state:</strong> Can cause thread safety issues</li><li><strong>Finalizers:</strong> Rarely needed and impact performance</li><li><strong>Property getters with side effects:</strong> Should be idempotent</li><li><strong>Circular references:</strong> Can prevent garbage collection</li></ul><h4>üèÜ Best Practices</h4><ul><li>Favor composition over inheritance</li><li>Keep classes focused on a single responsibility</li><li>Use properties instead of public fields</li><li>Implement IDisposable for resource management</li><li>Use readonly fields for immutable data</li><li>Prefer auto-implemented properties when possible</li><li>Use meaningful names for classes and members</li><li>Document complex indexers and their usage</li><li>Consider record types for data transfer objects</li></ul><h4>üöÄ Modern C# Features for Classes</h4><h5>Init-only Properties and Records:</h5><pre><code>public class ModernPerson\n{\n    public string Name { get; init; }     // Can only be set during initialization\n    public int Age { get; init; }\n    required public string Email { get; init; } // Required property (C# 11+)\n}\n\n// Usage\nvar person = new ModernPerson\n{\n    Name = \"Alice\",\n    Age = 30,\n    Email = \"alice@example.com\" // Required - compiler error if missing\n};</code></pre><h5>Pattern Matching with Classes:</h5><pre><code>public static string DescribePerson(Person person) => person switch\n{\n    { Age: < 18 } => \"Minor\",\n    { Age: >= 18 and < 65, Name: var name } => $\"Adult: {name}\",\n    { Age: >= 65 } => \"Senior\",\n    null => \"No person\"\n};</code></pre></div>",
      "code": "public class Counter {\n  public static int Instances;\n  public int Value { get; private set; }\n  public int this[int i] => Value + i;\n  public Counter(int start=0){ Value = start; Instances++; }\n}",
      "quiz": [ {"q":"What does static mean?","options":["Per instance","Per type"],"answer":1} ]
    },
    {
      "id": 11,
      "tier": 1,
      "title": "OOP Principles",
      "description": "Encapsulation, inheritance, polymorphism, abstraction.",
      "concepts": ["Encapsulation", "Inheritance", "Polymorphism", "Abstraction"],
      "requirements": ["Hide fields behind properties", "Derive a class and override a method"],
      "theory": "<div class='theory-content'><h4>üèõÔ∏è OOP Principles - The Four Pillars</h4><p>Object-Oriented Programming is built on four fundamental principles that help create maintainable, scalable, and robust software. Understanding these principles is crucial for writing professional C# code.</p><h4>üîí Encapsulation - Data Hiding and Protection</h4><p>Encapsulation is about bundling data and methods that operate on that data within a single unit (class) and controlling access to them.</p><h5>Proper Encapsulation Example:</h5><pre><code>public class BankAccount\n{\n    // Private fields - hidden from external access\n    private decimal _balance;\n    private string _accountNumber;\n    private List<Transaction> _transactions;\n    \n    // Public properties with controlled access\n    public decimal Balance \n    { \n        get => _balance; \n        private set // Only this class can modify balance\n        {\n            if (value < 0)\n                throw new ArgumentException(\"Balance cannot be negative\");\n            _balance = value;\n        }\n    }\n    \n    public string AccountNumber => _accountNumber; // Read-only\n    public IReadOnlyList<Transaction> Transactions => _transactions.AsReadOnly();\n    \n    public BankAccount(string accountNumber, decimal initialBalance = 0)\n    {\n        _accountNumber = accountNumber ?? throw new ArgumentNullException(nameof(accountNumber));\n        _transactions = new List<Transaction>();\n        Balance = initialBalance; // Uses property validation\n    }\n    \n    // Controlled methods for modifying state\n    public void Deposit(decimal amount)\n    {\n        if (amount <= 0)\n            throw new ArgumentException(\"Deposit amount must be positive\");\n        \n        Balance += amount;\n        _transactions.Add(new Transaction(\"Deposit\", amount, DateTime.Now));\n    }\n    \n    public bool Withdraw(decimal amount)\n    {\n        if (amount <= 0)\n            throw new ArgumentException(\"Withdrawal amount must be positive\");\n        \n        if (amount > Balance)\n            return false; // Insufficient funds\n        \n        Balance -= amount;\n        _transactions.Add(new Transaction(\"Withdrawal\", -amount, DateTime.Now));\n        return true;\n    }\n}</code></pre><h4>üß¨ Inheritance - Code Reuse and Specialization</h4><p>Inheritance allows a class to inherit properties and methods from another class, promoting code reuse and establishing \"is-a\" relationships.</p><h5>Inheritance Hierarchy:</h5><pre><code>// Base class\npublic abstract class Vehicle\n{\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public int Year { get; set; }\n    protected bool _isRunning;\n    \n    protected Vehicle(string make, string model, int year)\n    {\n        Make = make;\n        Model = model;\n        Year = year;\n        _isRunning = false;\n    }\n    \n    // Virtual method - can be overridden\n    public virtual void Start()\n    {\n        _isRunning = true;\n        Console.WriteLine($\"{Make} {Model} is starting...\");\n    }\n    \n    // Abstract method - must be implemented by derived classes\n    public abstract void Accelerate();\n    \n    // Sealed method - cannot be overridden further\n    public sealed override string ToString()\n    {\n        return $\"{Year} {Make} {Model}\";\n    }\n}\n\n// Derived class\npublic class Car : Vehicle\n{\n    public int NumberOfDoors { get; set; }\n    \n    public Car(string make, string model, int year, int doors) \n        : base(make, model, year) // Call base constructor\n    {\n        NumberOfDoors = doors;\n    }\n    \n    // Override virtual method\n    public override void Start()\n    {\n        base.Start(); // Call base implementation\n        Console.WriteLine(\"Car engine warming up...\");\n    }\n    \n    // Implement abstract method\n    public override void Accelerate()\n    {\n        if (!_isRunning)\n        {\n            Start();\n        }\n        Console.WriteLine(\"Car is accelerating with engine power...\");\n    }\n}\n\npublic class ElectricCar : Car\n{\n    public int BatteryCapacity { get; set; }\n    \n    public ElectricCar(string make, string model, int year, int doors, int batteryCapacity)\n        : base(make, model, year, doors)\n    {\n        BatteryCapacity = batteryCapacity;\n    }\n    \n    // Override method with different behavior\n    public override void Start()\n    {\n        _isRunning = true;\n        Console.WriteLine($\"{Make} {Model} electric motor is ready...\");\n        // Note: Not calling base.Start() for different behavior\n    }\n    \n    public override void Accelerate()\n    {\n        if (!_isRunning)\n        {\n            Start();\n        }\n        Console.WriteLine(\"Electric car accelerating silently...\");\n    }\n}</code></pre><h4>üé≠ Polymorphism - One Interface, Multiple Forms</h4><p>Polymorphism allows objects of different types to be treated as instances of the same base type, with the correct method being called at runtime.</p><h5>Runtime Polymorphism:</h5><pre><code>public abstract class Shape\n{\n    public abstract double CalculateArea();\n    public abstract double CalculatePerimeter();\n    \n    // Virtual method with default implementation\n    public virtual string GetDescription()\n    {\n        return $\"This is a shape with area {CalculateArea():F2}\";\n    }\n}\n\npublic class Rectangle : Shape\n{\n    public double Width { get; set; }\n    public double Height { get; set; }\n    \n    public Rectangle(double width, double height)\n    {\n        Width = width;\n        Height = height;\n    }\n    \n    public override double CalculateArea() => Width * Height;\n    public override double CalculatePerimeter() => 2 * (Width + Height);\n    \n    public override string GetDescription()\n    {\n        return $\"Rectangle {Width}x{Height} with area {CalculateArea():F2}\";\n    }\n}\n\npublic class Circle : Shape\n{\n    public double Radius { get; set; }\n    \n    public Circle(double radius)\n    {\n        Radius = radius;\n    }\n    \n    public override double CalculateArea() => Math.PI * Radius * Radius;\n    public override double CalculatePerimeter() => 2 * Math.PI * Radius;\n    \n    public override string GetDescription()\n    {\n        return $\"Circle with radius {Radius} and area {CalculateArea():F2}\";\n    }\n}\n\n// Polymorphism in action\npublic static void ProcessShapes()\n{\n    Shape[] shapes = {\n        new Rectangle(5, 3),\n        new Circle(4),\n        new Rectangle(2, 8)\n    };\n    \n    foreach (Shape shape in shapes)\n    {\n        // Polymorphic method calls - correct implementation called at runtime\n        Console.WriteLine(shape.GetDescription());\n        Console.WriteLine($\"Perimeter: {shape.CalculatePerimeter():F2}\");\n        Console.WriteLine();\n    }\n}</code></pre><h5>Interface Polymorphism:</h5><pre><code>public interface IDrawable\n{\n    void Draw();\n    void Move(int x, int y);\n}\n\npublic interface IResizable\n{\n    void Resize(double factor);\n}\n\npublic class Button : IDrawable, IResizable\n{\n    public string Text { get; set; }\n    public int X { get; set; }\n    public int Y { get; set; }\n    public int Width { get; set; }\n    public int Height { get; set; }\n    \n    public void Draw()\n    {\n        Console.WriteLine($\"Drawing button '{Text}' at ({X}, {Y}) size {Width}x{Height}\");\n    }\n    \n    public void Move(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n    \n    public void Resize(double factor)\n    {\n        Width = (int)(Width * factor);\n        Height = (int)(Height * factor);\n    }\n}\n\n// Using interface polymorphism\npublic static void DrawAll(IEnumerable<IDrawable> drawables)\n{\n    foreach (var drawable in drawables)\n    {\n        drawable.Draw(); // Polymorphic call\n        \n        // Check if object also implements IResizable\n        if (drawable is IResizable resizable)\n        {\n            resizable.Resize(1.1); // Make it 10% bigger\n        }\n    }\n}</code></pre><h4>üèóÔ∏è Abstraction - Simplifying Complexity</h4><p>Abstraction involves hiding complex implementation details and exposing only the necessary functionality through interfaces and abstract classes.</p><h5>Abstract Classes vs Interfaces:</h5><pre><code>// Abstract class - provides partial implementation\npublic abstract class DatabaseConnection\n{\n    protected string _connectionString;\n    protected bool _isConnected;\n    \n    protected DatabaseConnection(string connectionString)\n    {\n        _connectionString = connectionString;\n        _isConnected = false;\n    }\n    \n    // Concrete method available to all derived classes\n    public bool IsConnected => _isConnected;\n    \n    // Abstract methods - must be implemented\n    public abstract void Connect();\n    public abstract void Disconnect();\n    public abstract IDataReader ExecuteQuery(string sql);\n    \n    // Virtual method with default implementation\n    public virtual void ExecuteNonQuery(string sql)\n    {\n        if (!_isConnected)\n            throw new InvalidOperationException(\"Not connected to database\");\n        \n        // Default implementation\n        Console.WriteLine($\"Executing: {sql}\");\n    }\n}\n\n// Interface - pure abstraction\npublic interface IRepository<T>\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> CreateAsync(T entity);\n    Task<T> UpdateAsync(T entity);\n    Task<bool> DeleteAsync(int id);\n}\n\n// Implementing both abstract class and interface\npublic class SqlServerConnection : DatabaseConnection\n{\n    public SqlServerConnection(string connectionString) : base(connectionString)\n    {\n    }\n    \n    public override void Connect()\n    {\n        // SQL Server specific connection logic\n        Console.WriteLine(\"Connecting to SQL Server...\");\n        _isConnected = true;\n    }\n    \n    public override void Disconnect()\n    {\n        Console.WriteLine(\"Disconnecting from SQL Server...\");\n        _isConnected = false;\n    }\n    \n    public override IDataReader ExecuteQuery(string sql)\n    {\n        if (!_isConnected)\n            throw new InvalidOperationException(\"Not connected\");\n        \n        // SQL Server specific query execution\n        Console.WriteLine($\"Executing SQL Server query: {sql}\");\n        return null; // Simplified for example\n    }\n}</code></pre><h4>üîÑ Method Overriding vs Method Hiding</h4><h5>Virtual/Override (Polymorphic):</h5><pre><code>public class Animal\n{\n    public virtual void MakeSound()\n    {\n        Console.WriteLine(\"Animal makes a generic sound\");\n    }\n}\n\npublic class Dog : Animal\n{\n    public override void MakeSound() // Polymorphic override\n    {\n        Console.WriteLine(\"Dog barks: Woof!\");\n    }\n}\n\nAnimal animal = new Dog();\nanimal.MakeSound(); // Output: \"Dog barks: Woof!\" (dynamic dispatch)</code></pre><h5>New Keyword (Method Hiding):</h5><pre><code>public class Cat : Animal\n{\n    public new void MakeSound() // Hides base method (not polymorphic)\n    {\n        Console.WriteLine(\"Cat meows: Meow!\");\n    }\n}\n\nAnimal animal = new Cat();\nanimal.MakeSound(); // Output: \"Animal makes a generic sound\" (static dispatch)\n\nCat cat = new Cat();\ncat.MakeSound(); // Output: \"Cat meows: Meow!\"</code></pre><h4>üéØ SOLID Principles in Practice</h4><h5>Single Responsibility Principle:</h5><pre><code>// ‚ùå Bad: Multiple responsibilities\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n    \n    public void Save() { /* Database logic */ }\n    public void SendEmail() { /* Email logic */ }\n    public void ValidateData() { /* Validation logic */ }\n}\n\n// ‚úÖ Good: Separated responsibilities\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class UserRepository\n{\n    public void Save(User user) { /* Database logic */ }\n}\n\npublic class EmailService\n{\n    public void SendWelcomeEmail(User user) { /* Email logic */ }\n}\n\npublic class UserValidator\n{\n    public bool IsValid(User user) { /* Validation logic */ }\n}</code></pre><h5>Liskov Substitution Principle:</h5><pre><code>// ‚úÖ Good: Square can substitute Rectangle without breaking functionality\npublic class Rectangle\n{\n    public virtual int Width { get; set; }\n    public virtual int Height { get; set; }\n    \n    public virtual int CalculateArea() => Width * Height;\n}\n\npublic class Square : Rectangle\n{\n    private int _side;\n    \n    public override int Width\n    {\n        get => _side;\n        set => _side = value;\n    }\n    \n    public override int Height\n    {\n        get => _side;\n        set => _side = value;\n    }\n}</code></pre><h4>‚ö†Ô∏è Common OOP Pitfalls</h4><ul><li><strong>God objects:</strong> Classes that do too much</li><li><strong>Inappropriate inheritance:</strong> Using inheritance when composition is better</li><li><strong>Breaking encapsulation:</strong> Exposing internal state unnecessarily</li><li><strong>Circular dependencies:</strong> Classes depending on each other</li><li><strong>Interface segregation violation:</strong> Interfaces that are too large</li><li><strong>Premature abstraction:</strong> Creating abstractions before they're needed</li></ul><h4>üèÜ Best Practices</h4><ul><li>Favor composition over inheritance</li><li>Program to interfaces, not implementations</li><li>Keep classes small and focused</li><li>Use meaningful names for classes and methods</li><li>Apply SOLID principles</li><li>Minimize public surface area</li><li>Use abstract classes for shared implementation</li><li>Use interfaces for contracts</li><li>Document complex inheritance hierarchies</li></ul><h4>üöÄ Modern C# OOP Features</h4><h5>Default Interface Methods (C# 8+):</h5><pre><code>public interface ILogger\n{\n    void Log(string message);\n    \n    // Default implementation\n    void LogError(string message)\n    {\n        Log($\"ERROR: {message}\");\n    }\n    \n    void LogWarning(string message)\n    {\n        Log($\"WARNING: {message}\");\n    }\n}</code></pre><h5>Records with Inheritance (C# 9+):</h5><pre><code>public abstract record Shape(double X, double Y);\npublic record Circle(double X, double Y, double Radius) : Shape(X, Y);\npublic record Rectangle(double X, double Y, double Width, double Height) : Shape(X, Y);</code></pre></div>",
      "code": "public abstract class Shape { public abstract double Area(); }\npublic class Rect: Shape { public double W,H; public override double Area()=> W*H; }",
      "quiz": [ {"q":"Which enables dynamic dispatch?","options":["override","new"],"answer":0} ]
    },
    {
      "id": 12,
      "tier": 1,
      "title": "Advanced OOP",
      "description": "Structs vs classes, enums, nested, partial.",
      "concepts": ["Structs vs Classes", "Enums", "Nested Classes", "Partial Classes/Methods"],
      "requirements": ["Define a struct and compare assignment semantics"],
      "theory": "<div class='theory-content'><h4>üèóÔ∏è Advanced OOP - Beyond the Basics</h4><p>Advanced OOP concepts in C# provide powerful tools for creating efficient, maintainable, and well-structured code. Understanding these concepts is essential for professional development.</p><h4>üß± Structs vs Classes - Value vs Reference Types</h4><p>Understanding the difference between structs and classes is crucial for performance and memory management in C#.</p><h5>Key Differences:</h5><table><tr><th>Aspect</th><th>Struct (Value Type)</th><th>Class (Reference Type)</th></tr><tr><td>Memory Location</td><td>Stack (usually)</td><td>Heap</td></tr><tr><td>Assignment</td><td>Copies the value</td><td>Copies the reference</td></tr><tr><td>Null Values</td><td>Cannot be null*</td><td>Can be null</td></tr><tr><td>Inheritance</td><td>Cannot inherit/be inherited</td><td>Supports inheritance</td></tr><tr><td>Default Constructor</td><td>Always provided</td><td>Optional</td></tr><tr><td>Performance</td><td>Fast allocation/deallocation</td><td>GC overhead</td></tr></table><p>*Nullable structs (int?, DateTime?) can be null</p><h5>Struct Examples:</h5><pre><code>// Simple struct for coordinates\npublic struct Point\n{\n    public int X { get; }\n    public int Y { get; }\n    \n    public Point(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n    \n    // Computed property\n    public double DistanceFromOrigin => Math.Sqrt(X * X + Y * Y);\n    \n    // Override ToString for better display\n    public override string ToString() => $\"({X}, {Y})\";\n    \n    // Override Equals for value equality\n    public override bool Equals(object obj)\n    {\n        return obj is Point other && X == other.X && Y == other.Y;\n    }\n    \n    public override int GetHashCode()\n    {\n        return HashCode.Combine(X, Y);\n    }\n}\n\n// Record struct (C# 10+) - even more concise\npublic readonly record struct Point3D(int X, int Y, int Z);\n\n// Demonstrating value semantics\nPoint p1 = new Point(1, 2);\nPoint p2 = p1; // Copies the entire value\np2 = new Point(3, 4);\nConsole.WriteLine(p1); // Still (1, 2) - p1 unchanged\nConsole.WriteLine(p2); // (3, 4)</code></pre><h5>When to Use Structs:</h5><ul><li><strong>Small data:</strong> Typically 16 bytes or less</li><li><strong>Immutable data:</strong> Values that don't change after creation</li><li><strong>Value semantics:</strong> When you want copy behavior</li><li><strong>Performance critical:</strong> Avoiding GC pressure</li><li><strong>Mathematical concepts:</strong> Points, vectors, colors, etc.</li></ul><h5>Struct Best Practices:</h5><pre><code>// ‚úÖ Good struct design - immutable and small\npublic readonly struct Money\n{\n    public decimal Amount { get; }\n    public string Currency { get; }\n    \n    public Money(decimal amount, string currency)\n    {\n        Amount = amount;\n        Currency = currency ?? throw new ArgumentNullException(nameof(currency));\n    }\n    \n    public Money Add(Money other)\n    {\n        if (Currency != other.Currency)\n            throw new InvalidOperationException(\"Cannot add different currencies\");\n        \n        return new Money(Amount + other.Amount, Currency);\n    }\n}\n\n// ‚ùå Bad struct design - large and mutable\npublic struct LargeStruct\n{\n    public string Field1 { get; set; } // Mutable\n    public string Field2 { get; set; }\n    public string Field3 { get; set; }\n    public DateTime Field4 { get; set; }\n    public decimal Field5 { get; set; }\n    // ... many more fields (too large)\n}</code></pre><h4>üè∑Ô∏è Enums - Named Constants</h4><p>Enums provide a way to define named constants, making code more readable and maintainable.</p><h5>Basic Enum Usage:</h5><pre><code>public enum Priority\n{\n    Low,    // 0\n    Medium, // 1\n    High,   // 2\n    Critical // 3\n}\n\n// Explicit values\npublic enum HttpStatusCode\n{\n    OK = 200,\n    NotFound = 404,\n    InternalServerError = 500\n}\n\n// Flags enum for combinations\n[Flags]\npublic enum FilePermissions\n{\n    None = 0,\n    Read = 1,\n    Write = 2,\n    Execute = 4,\n    ReadWrite = Read | Write,\n    All = Read | Write | Execute\n}\n\n// Usage examples\nPriority taskPriority = Priority.High;\nHttpStatusCode status = HttpStatusCode.OK;\nFilePermissions perms = FilePermissions.Read | FilePermissions.Write;</code></pre><h5>Advanced Enum Features:</h5><pre><code>public enum LogLevel : byte // Specify underlying type\n{\n    Trace = 0,\n    Debug = 1,\n    Information = 2,\n    Warning = 3,\n    Error = 4,\n    Critical = 5\n}\n\npublic static class EnumExtensions\n{\n    public static string GetDescription(this LogLevel level)\n    {\n        return level switch\n        {\n            LogLevel.Trace => \"Detailed trace information\",\n            LogLevel.Debug => \"Debug information\",\n            LogLevel.Information => \"General information\",\n            LogLevel.Warning => \"Warning messages\",\n            LogLevel.Error => \"Error messages\",\n            LogLevel.Critical => \"Critical errors\",\n            _ => \"Unknown level\"\n        };\n    }\n}\n\n// Working with enums\npublic static void DemonstrateEnums()\n{\n    // Parsing from string\n    if (Enum.TryParse<LogLevel>(\"Error\", out var level))\n    {\n        Console.WriteLine($\"Parsed level: {level}\");\n    }\n    \n    // Getting all values\n    foreach (LogLevel logLevel in Enum.GetValues<LogLevel>())\n    {\n        Console.WriteLine($\"{logLevel}: {logLevel.GetDescription()}\");\n    }\n    \n    // Flags manipulation\n    FilePermissions permissions = FilePermissions.Read;\n    permissions |= FilePermissions.Write; // Add write permission\n    \n    if (permissions.HasFlag(FilePermissions.Read))\n    {\n        Console.WriteLine(\"Has read permission\");\n    }\n}</code></pre><h4>ü™Ü Nested Classes - Organization and Encapsulation</h4><p>Nested classes allow you to define classes within other classes, providing better organization and encapsulation.</p><h5>Nested Class Examples:</h5><pre><code>public class Database\n{\n    private string _connectionString;\n    private List<Query> _queries = new();\n    \n    public Database(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    // Nested class - has access to outer class members\n    public class Query\n    {\n        private readonly Database _database;\n        public string Sql { get; }\n        public DateTime CreatedAt { get; }\n        \n        internal Query(Database database, string sql)\n        {\n            _database = database;\n            Sql = sql;\n            CreatedAt = DateTime.Now;\n        }\n        \n        public void Execute()\n        {\n            Console.WriteLine($\"Executing on {_database._connectionString}: {Sql}\");\n        }\n    }\n    \n    // Static nested class - independent of outer instance\n    public static class QueryBuilder\n    {\n        public static string Select(string table, params string[] columns)\n        {\n            var columnList = string.Join(\", \", columns);\n            return $\"SELECT {columnList} FROM {table}\";\n        }\n        \n        public static string Insert(string table, Dictionary<string, object> values)\n        {\n            var columns = string.Join(\", \", values.Keys);\n            var parameters = string.Join(\", \", values.Keys.Select(k => $\"@{k}\"));\n            return $\"INSERT INTO {table} ({columns}) VALUES ({parameters})\";\n        }\n    }\n    \n    public Query CreateQuery(string sql)\n    {\n        var query = new Query(this, sql);\n        _queries.Add(query);\n        return query;\n    }\n}\n\n// Usage\nvar db = new Database(\"Server=localhost;Database=MyDB\");\nvar query = db.CreateQuery(\"SELECT * FROM Users\");\n\n// Static nested class usage\nstring selectSql = Database.QueryBuilder.Select(\"Users\", \"Id\", \"Name\", \"Email\");</code></pre><h5>Nested Enum in Class:</h5><pre><code>public class OrderProcessor\n{\n    public enum OrderStatus\n    {\n        Pending,\n        Processing,\n        Shipped,\n        Delivered,\n        Cancelled\n    }\n    \n    public enum Priority\n    {\n        Standard,\n        Express,\n        Overnight\n    }\n    \n    public OrderStatus Status { get; private set; }\n    public Priority OrderPriority { get; set; }\n    \n    public void UpdateStatus(OrderStatus newStatus)\n    {\n        Status = newStatus;\n        Console.WriteLine($\"Order status updated to: {newStatus}\");\n    }\n}</code></pre><h4>üß© Partial Classes and Methods</h4><p>Partial classes allow you to split a class definition across multiple files, useful for code generation and organization.</p><h5>Partial Class Example:</h5><pre><code>// File: Person.Core.cs\npublic partial class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public DateTime BirthDate { get; set; }\n    \n    partial void OnNameChanged(); // Partial method declaration\n    \n    public string FullName\n    {\n        get => $\"{FirstName} {LastName}\";\n        set\n        {\n            var parts = value.Split(' ', 2);\n            FirstName = parts[0];\n            LastName = parts.Length > 1 ? parts[1] : \"\";\n            OnNameChanged(); // Call partial method\n        }\n    }\n}\n\n// File: Person.Extensions.cs\npublic partial class Person\n{\n    // Computed properties\n    public int Age => DateTime.Today.Year - BirthDate.Year - \n        (DateTime.Today.DayOfYear < BirthDate.DayOfYear ? 1 : 0);\n    \n    public string Initials => $\"{FirstName.FirstOrDefault()}.{LastName.FirstOrDefault()}.\";\n    \n    // Partial method implementation\n    partial void OnNameChanged()\n    {\n        Console.WriteLine($\"Name changed to: {FullName}\");\n    }\n    \n    // Additional methods\n    public bool IsAdult() => Age >= 18;\n    \n    public string GetGreeting()\n    {\n        var timeOfDay = DateTime.Now.Hour switch\n        {\n            < 12 => \"Good morning\",\n            < 17 => \"Good afternoon\",\n            _ => \"Good evening\"\n        };\n        \n        return $\"{timeOfDay}, {FirstName}!\";\n    }\n}\n\n// File: Person.Validation.cs\npublic partial class Person\n{\n    public bool IsValid(out List<string> errors)\n    {\n        errors = new List<string>();\n        \n        if (string.IsNullOrWhiteSpace(FirstName))\n            errors.Add(\"First name is required\");\n        \n        if (string.IsNullOrWhiteSpace(LastName))\n            errors.Add(\"Last name is required\");\n        \n        if (BirthDate > DateTime.Today)\n            errors.Add(\"Birth date cannot be in the future\");\n        \n        if (Age > 150)\n            errors.Add(\"Age seems unrealistic\");\n        \n        return errors.Count == 0;\n    }\n}</code></pre><h5>Partial Methods (C# 9+ Extended):</h5><pre><code>public partial class EventProcessor\n{\n    // Traditional partial method (optional implementation)\n    partial void OnEventProcessing(string eventType);\n    \n    // Extended partial method (C# 9+) - can have return value and parameters\n    public partial string ProcessEvent(string eventData);\n    \n    public void HandleEvent(string eventType, string eventData)\n    {\n        OnEventProcessing(eventType); // May or may not be implemented\n        \n        string result = ProcessEvent(eventData); // Must be implemented\n        Console.WriteLine($\"Event processed: {result}\");\n    }\n}\n\n// Implementation in another file\npublic partial class EventProcessor\n{\n    partial void OnEventProcessing(string eventType)\n    {\n        Console.WriteLine($\"Processing event of type: {eventType}\");\n    }\n    \n    public partial string ProcessEvent(string eventData)\n    {\n        // Complex event processing logic\n        return $\"Processed: {eventData.ToUpper()}\";\n    }\n}</code></pre><h4>üéØ Generic Classes and Constraints</h4><h5>Generic Class with Constraints:</h5><pre><code>public class Repository<T> where T : class, new()\n{\n    private readonly List<T> _items = new();\n    \n    public void Add(T item)\n    {\n        if (item == null)\n            throw new ArgumentNullException(nameof(item));\n        \n        _items.Add(item);\n    }\n    \n    public T CreateNew()\n    {\n        return new T(); // Requires 'new()' constraint\n    }\n    \n    public IEnumerable<T> GetAll() => _items.AsReadOnly();\n}\n\n// Multiple constraints\npublic class SortedRepository<T> where T : class, IComparable<T>, new()\n{\n    private readonly SortedList<T, T> _items = new();\n    \n    public void Add(T item)\n    {\n        _items.Add(item, item);\n    }\n}\n\n// Nested generic class\npublic class Container<T>\n{\n    public class Item<U>\n    {\n        public T ContainerData { get; set; }\n        public U ItemData { get; set; }\n        \n        public override string ToString()\n        {\n            return $\"Container: {ContainerData}, Item: {ItemData}\";\n        }\n    }\n}</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Large structs:</strong> Can hurt performance due to copying</li><li><strong>Mutable structs:</strong> Can lead to confusing behavior</li><li><strong>Boxing structs:</strong> Performance penalty when cast to object</li><li><strong>Enum parsing:</strong> Can throw exceptions; use TryParse</li><li><strong>Nested class accessibility:</strong> Consider if nesting is really necessary</li><li><strong>Partial class abuse:</strong> Don't split classes unnecessarily</li></ul><h4>üèÜ Best Practices</h4><ul><li>Use structs for small, immutable value types</li><li>Prefer readonly structs when possible</li><li>Use enums instead of magic numbers</li><li>Consider Flags attribute for combinable enums</li><li>Use nested classes only when they're closely related</li><li>Use partial classes for code generation scenarios</li><li>Keep partial method implementations simple</li><li>Override Equals and GetHashCode for structs</li><li>Use meaningful names for enum values</li></ul><h4>üöÄ Modern C# Advanced Features</h4><h5>Record Structs (C# 10+):</h5><pre><code>public readonly record struct Point3D(double X, double Y, double Z)\n{\n    public double Magnitude => Math.Sqrt(X * X + Y * Y + Z * Z);\n    \n    public Point3D Normalize()\n    {\n        var mag = Magnitude;\n        return mag == 0 ? this : new Point3D(X / mag, Y / mag, Z / mag);\n    }\n}</code></pre><h5>File-scoped Types (C# 11+):</h5><pre><code>file class InternalHelper // Only visible within this file\n{\n    public static string ProcessData(string input) => input.Trim().ToUpper();\n}</code></pre></div>",
      "code": "public struct Point { public int X,Y; }\npublic enum Color { Red, Green, Blue }",
      "quiz": [ {"q":"Struct assignment copies?","options":["Reference","Value"],"answer":1} ]
    },
    {
      "id": 13,
      "tier": 1,
      "title": "Built-in Collections",
      "description": "Arrays, List, Dictionary, Set, Queue, Stack, concurrent collections.",
      "concepts": ["Arrays", "List<T>", "Dictionary<K,V>", "HashSet<T>", "Queue<T>", "Stack<T>", "Concurrent Collections"],
      "requirements": ["Choose the right collection for a task"],
      "theory": "<div class='theory-content'><h4>üì¶ Built-in Collections - Data Structure Toolkit</h4><p>C# provides a rich set of built-in collections that are essential for efficient data manipulation. Understanding when and how to use each collection type is crucial for writing performant applications.</p><h4>üìã Arrays - Fixed-Size Sequential Storage</h4><h5>Array Types and Declaration:</h5><pre><code>// Single-dimensional arrays\nint[] numbers = new int[5];              // Creates array of 5 integers\nstring[] names = {\"Alice\", \"Bob\", \"Charlie\"}; // Array with initialization\nvar scores = new double[] {95.5, 87.2, 92.8}; // Type inference\n\n// Multi-dimensional arrays\nint[,] matrix = new int[3, 3];           // 3x3 2D array\nstring[,] grid = {\n    {\"A1\", \"B1\", \"C1\"},\n    {\"A2\", \"B2\", \"C2\"}\n};\n\n// Jagged arrays (array of arrays)\nint[][] jaggedArray = new int[3][];\njaggedArray[0] = new int[4] {1, 2, 3, 4};\njaggedArray[1] = new int[2] {5, 6};\njaggedArray[2] = new int[3] {7, 8, 9};</code></pre><h5>Array Operations:</h5><pre><code>int[] numbers = {3, 1, 4, 1, 5, 9, 2, 6};\n\n// Basic operations\nConsole.WriteLine($\"Length: {numbers.Length}\");\nConsole.WriteLine($\"First: {numbers[0]}, Last: {numbers[^1]}\");\n\n// Array methods\nArray.Sort(numbers);              // Sort in place\nArray.Reverse(numbers);           // Reverse in place\nint index = Array.IndexOf(numbers, 5);  // Find index of value\nbool exists = Array.Exists(numbers, x => x > 10);\n\n// Modern array operations with ranges and indices (C# 8+)\nint[] slice = numbers[1..4];      // Elements at index 1, 2, 3\nint[] lastThree = numbers[^3..];  // Last 3 elements\nint[] firstHalf = numbers[..^(numbers.Length/2)];\n\n// Array.Copy for copying\nint[] copy = new int[numbers.Length];\nArray.Copy(numbers, copy, numbers.Length);</code></pre><h4>üìà List<T> - Dynamic Arrays</h4><h5>List Creation and Basic Operations:</h5><pre><code>// List creation\nvar numbers = new List<int>();\nvar names = new List<string> {\"Alice\", \"Bob\", \"Charlie\"};\nvar range = Enumerable.Range(1, 10).ToList(); // 1 to 10\n\n// Adding elements\nnumbers.Add(42);\nnumbers.AddRange(new[] {1, 2, 3});\nnumbers.Insert(0, 99);  // Insert at specific position\n\n// Accessing elements\nint first = numbers[0];\nint last = numbers[numbers.Count - 1];\nint found = numbers.Find(x => x > 40);  // First match or default\nList<int> allFound = numbers.FindAll(x => x > 2);  // All matches\n\n// Removing elements\nnumbers.Remove(42);        // Remove first occurrence\nnumbers.RemoveAt(0);       // Remove at index\nnumbers.RemoveAll(x => x < 5);  // Remove all matching\nnumbers.Clear();           // Remove all elements</code></pre><h5>Advanced List Operations:</h5><pre><code>var students = new List<Student>\n{\n    new(\"Alice\", 95),\n    new(\"Bob\", 87),\n    new(\"Charlie\", 92)\n};\n\n// Searching and filtering\nStudent topStudent = students.OrderByDescending(s => s.Score).First();\nvar passingStudents = students.Where(s => s.Score >= 90).ToList();\nbool hasFailures = students.Any(s => s.Score < 60);\n\n// Transforming\nvar names = students.Select(s => s.Name).ToList();\nvar summary = students.Select(s => new { s.Name, Grade = GetGrade(s.Score) });\n\n// Sorting\nstudents.Sort((s1, s2) => s1.Score.CompareTo(s2.Score));  // Custom sort\nstudents.Sort(); // If Student implements IComparable<Student>\n\n// Capacity management for performance\nvar largeList = new List<int>(1000); // Pre-allocate capacity\nlargeList.TrimExcess(); // Reduce capacity to actual count</code></pre><h4>üóÉÔ∏è Dictionary<TKey, TValue> - Key-Value Mapping</h4><h5>Dictionary Operations:</h5><pre><code>// Dictionary creation\nvar ages = new Dictionary<string, int>();\nvar scores = new Dictionary<string, double>\n{\n    [\"Alice\"] = 95.5,\n    [\"Bob\"] = 87.2,\n    [\"Charlie\"] = 92.8\n};\n\n// Adding and updating\nages[\"Alice\"] = 25;        // Add or update\nages.Add(\"Bob\", 30);       // Add (throws if key exists)\nages.TryAdd(\"Charlie\", 35); // Add only if key doesn't exist\n\n// Accessing values safely\nif (ages.TryGetValue(\"Alice\", out int aliceAge))\n{\n    Console.WriteLine($\"Alice is {aliceAge} years old\");\n}\n\n// Checking existence\nbool hasAlice = ages.ContainsKey(\"Alice\");\nbool hasAge25 = ages.ContainsValue(25);\n\n// Iterating\nforeach (var kvp in ages)\n{\n    Console.WriteLine($\"{kvp.Key}: {kvp.Value}\");\n}\n\n// Working with keys and values\nvar allNames = ages.Keys.ToList();\nvar allAges = ages.Values.ToList();</code></pre><h5>Advanced Dictionary Patterns:</h5><pre><code>// Dictionary with complex values\nvar studentGrades = new Dictionary<string, List<double>>();\n\n// Safe initialization pattern\nif (!studentGrades.TryGetValue(\"Alice\", out var aliceGrades))\n{\n    aliceGrades = new List<double>();\n    studentGrades[\"Alice\"] = aliceGrades;\n}\naliceGrades.Add(95.5);\n\n// Or using GetValueOrDefault (C# 11+)\nvar grades = studentGrades.GetValueOrDefault(\"Bob\", new List<double>());\n\n// Grouping data into dictionary\nvar students = GetStudents();\nvar studentsByGrade = students\n    .GroupBy(s => GetGrade(s.Score))\n    .ToDictionary(g => g.Key, g => g.ToList());\n\n// Case-insensitive dictionary\nvar caseInsensitive = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);\ncaseInsensitive[\"NAME\"] = 1;\nConsole.WriteLine(caseInsensitive[\"name\"]); // Works! Returns 1</code></pre><h4>üéØ HashSet<T> - Unique Elements</h4><h5>HashSet Operations:</h5><pre><code>// HashSet creation\nvar uniqueNumbers = new HashSet<int> {1, 2, 3, 2, 1}; // {1, 2, 3}\nvar words = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n// Adding elements\nbool added = uniqueNumbers.Add(4);  // Returns true if added\nbool notAdded = uniqueNumbers.Add(1); // Returns false (already exists)\n\n// Set operations\nvar set1 = new HashSet<int> {1, 2, 3, 4};\nvar set2 = new HashSet<int> {3, 4, 5, 6};\n\n// Union (all elements from both sets)\nvar union = new HashSet<int>(set1);\nunion.UnionWith(set2); // {1, 2, 3, 4, 5, 6}\n\n// Intersection (common elements)\nvar intersection = new HashSet<int>(set1);\nintersection.IntersectWith(set2); // {3, 4}\n\n// Difference (elements in set1 but not in set2)\nvar difference = new HashSet<int>(set1);\ndifference.ExceptWith(set2); // {1, 2}\n\n// Symmetric difference (elements in either set but not both)\nvar symDiff = new HashSet<int>(set1);\nsymDiff.SymmetricExceptWith(set2); // {1, 2, 5, 6}</code></pre><h5>HashSet Use Cases:</h5><pre><code>// Removing duplicates from a list\nvar numbersWithDuplicates = new List<int> {1, 2, 2, 3, 3, 3, 4};\nvar uniqueNumbers = new HashSet<int>(numbersWithDuplicates);\nvar uniqueList = uniqueNumbers.ToList();\n\n// Fast membership testing\nvar validIds = new HashSet<int> {100, 101, 102, 103};\nforeach (var id in userInputIds)\n{\n    if (validIds.Contains(id)) // O(1) lookup\n    {\n        ProcessValidId(id);\n    }\n}\n\n// Tracking visited items\nvar visited = new HashSet<string>();\nforeach (var url in urlsToProcess)\n{\n    if (visited.Add(url)) // Add returns false if already exists\n    {\n        ProcessUrl(url);\n    }\n}</code></pre><h4>üö∂ Queue<T> - First In, First Out (FIFO)</h4><h5>Queue Operations:</h5><pre><code>// Queue creation and basic operations\nvar queue = new Queue<string>();\n\n// Adding items (to the back)\nqueue.Enqueue(\"First\");\nqueue.Enqueue(\"Second\");\nqueue.Enqueue(\"Third\");\n\n// Removing items (from the front)\nstring first = queue.Dequeue();  // \"First\"\nstring next = queue.Peek();      // \"Second\" (doesn't remove)\n\n// Checking queue state\nbool hasItems = queue.Count > 0;\nif (queue.TryDequeue(out string item))\n{\n    Console.WriteLine($\"Dequeued: {item}\");\n}\n\n// Converting to array (preserves order)\nstring[] queueArray = queue.ToArray();</code></pre><h5>Queue Use Cases:</h5><pre><code>// Breadth-First Search (BFS)\npublic void BreadthFirstTraversal(TreeNode root)\n{\n    var queue = new Queue<TreeNode>();\n    queue.Enqueue(root);\n    \n    while (queue.Count > 0)\n    {\n        var current = queue.Dequeue();\n        Console.WriteLine(current.Value);\n        \n        foreach (var child in current.Children)\n        {\n            queue.Enqueue(child);\n        }\n    }\n}\n\n// Task processing system\npublic class TaskProcessor\n{\n    private readonly Queue<Task> _taskQueue = new();\n    \n    public void AddTask(Task task)\n    {\n        _taskQueue.Enqueue(task);\n    }\n    \n    public void ProcessNextTask()\n    {\n        if (_taskQueue.TryDequeue(out var task))\n        {\n            task.Execute();\n        }\n    }\n}</code></pre><h4>üìö Stack<T> - Last In, First Out (LIFO)</h4><h5>Stack Operations:</h5><pre><code>// Stack creation and basic operations\nvar stack = new Stack<int>();\n\n// Adding items (to the top)\nstack.Push(1);\nstack.Push(2);\nstack.Push(3);\n\n// Removing items (from the top)\nint top = stack.Pop();    // 3\nint peek = stack.Peek();  // 2 (doesn't remove)\n\n// Safe operations\nif (stack.TryPop(out int value))\n{\n    Console.WriteLine($\"Popped: {value}\");\n}\n\n// Stack state\nbool isEmpty = stack.Count == 0;</code></pre><h5>Stack Use Cases:</h5><pre><code>// Expression evaluation\npublic bool IsValidParentheses(string expression)\n{\n    var stack = new Stack<char>();\n    var pairs = new Dictionary<char, char> { {')', '('}, {']', '['}, {'}', '{'} };\n    \n    foreach (char c in expression)\n    {\n        if (\"([{\".Contains(c))\n        {\n            stack.Push(c);\n        }\n        else if (\")]}\".Contains(c))\n        {\n            if (stack.Count == 0 || stack.Pop() != pairs[c])\n                return false;\n        }\n    }\n    \n    return stack.Count == 0;\n}\n\n// Undo functionality\npublic class UndoableEditor\n{\n    private readonly Stack<ICommand> _undoStack = new();\n    private readonly Stack<ICommand> _redoStack = new();\n    \n    public void ExecuteCommand(ICommand command)\n    {\n        command.Execute();\n        _undoStack.Push(command);\n        _redoStack.Clear(); // Clear redo stack when new command is executed\n    }\n    \n    public void Undo()\n    {\n        if (_undoStack.TryPop(out var command))\n        {\n            command.Undo();\n            _redoStack.Push(command);\n        }\n    }\n    \n    public void Redo()\n    {\n        if (_redoStack.TryPop(out var command))\n        {\n            command.Execute();\n            _undoStack.Push(command);\n        }\n    }\n}</code></pre><h4>‚ö° Concurrent Collections - Thread-Safe Operations</h4><h5>ConcurrentDictionary:</h5><pre><code>using System.Collections.Concurrent;\n\n// Thread-safe dictionary\nvar concurrentDict = new ConcurrentDictionary<string, int>();\n\n// Atomic operations\nconcurrentDict.TryAdd(\"key1\", 1);\nconcurrentDict.AddOrUpdate(\"key1\", 1, (key, oldValue) => oldValue + 1);\nint value = concurrentDict.GetOrAdd(\"key2\", k => k.Length);\n\n// Safe enumeration (snapshot at time of enumeration)\nforeach (var kvp in concurrentDict)\n{\n    Console.WriteLine($\"{kvp.Key}: {kvp.Value}\");\n}</code></pre><h5>ConcurrentQueue and ConcurrentStack:</h5><pre><code>// Producer-Consumer pattern with ConcurrentQueue\nvar queue = new ConcurrentQueue<WorkItem>();\n\n// Producer\nTask.Run(() =>\n{\n    for (int i = 0; i < 100; i++)\n    {\n        queue.Enqueue(new WorkItem(i));\n    }\n});\n\n// Consumer\nTask.Run(() =>\n{\n    while (true)\n    {\n        if (queue.TryDequeue(out var item))\n        {\n            ProcessWorkItem(item);\n        }\n        else\n        {\n            Thread.Sleep(10); // Wait for more items\n        }\n    }\n});</code></pre><h5>BlockingCollection:</h5><pre><code>// Bounded producer-consumer with blocking\nvar blockingCollection = new BlockingCollection<string>(boundedCapacity: 10);\n\n// Producer (will block when capacity is reached)\nTask.Run(() =>\n{\n    for (int i = 0; i < 100; i++)\n    {\n        blockingCollection.Add($\"Item {i}\");\n    }\n    blockingCollection.CompleteAdding();\n});\n\n// Consumer (will block when no items available)\nTask.Run(() =>\n{\n    foreach (var item in blockingCollection.GetConsumingEnumerable())\n    {\n        ProcessItem(item);\n    }\n});</code></pre><h4>üöÄ Performance Considerations</h4><h5>Collection Performance Comparison:</h5><table><tr><th>Operation</th><th>Array</th><th>List&lt;T&gt;</th><th>Dictionary&lt;K,V&gt;</th><th>HashSet&lt;T&gt;</th></tr><tr><td>Random Access</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>N/A</td></tr><tr><td>Insert at End</td><td>N/A</td><td>O(1)*</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Insert at Beginning</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Search</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Remove</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td></tr></table><p>*Amortized time - occasionally O(n) when resizing</p><h5>Memory and Performance Tips:</h5><pre><code>// Pre-allocate capacity when size is known\nvar list = new List<int>(1000); // Avoids multiple resizing operations\n\n// Use StringBuilder for string concatenation instead of List<char>\nvar sb = new StringBuilder();\n\n// Choose the right collection for the job\nvar lookup = new Dictionary<string, Customer>(); // O(1) lookup by key\nvar uniqueItems = new HashSet<Product>();       // O(1) uniqueness check\nvar processingQueue = new Queue<Order>();       // FIFO processing\n\n// Avoid boxing with generic collections\nvar intList = new List<int>();     // ‚úÖ Good - no boxing\nvar arrayList = new ArrayList();   // ‚ùå Bad - boxes value types</code></pre><h4>üèÜ Best Practices</h4><ul><li>Use List&lt;T&gt; for most dynamic array needs</li><li>Use Dictionary&lt;K,V&gt; for fast key-based lookups</li><li>Use HashSet&lt;T&gt; for uniqueness and fast membership testing</li><li>Use Queue&lt;T&gt; for FIFO scenarios</li><li>Use Stack&lt;T&gt; for LIFO scenarios and undo operations</li><li>Use concurrent collections for multi-threaded scenarios</li><li>Pre-allocate capacity when final size is known</li><li>Prefer generic collections over non-generic ones</li><li>Use LINQ for complex queries and transformations</li><li>Consider memory usage and choose appropriate collection size</li></ul><h4>üéØ Collection Selection Guide</h4><ul><li><strong>Need indexed access?</strong> ‚Üí Array or List&lt;T&gt;</li><li><strong>Need key-value mapping?</strong> ‚Üí Dictionary&lt;K,V&gt;</li><li><strong>Need unique elements only?</strong> ‚Üí HashSet&lt;T&gt;</li><li><strong>Need ordered processing?</strong> ‚Üí Queue&lt;T&gt; (FIFO) or Stack&lt;T&gt; (LIFO)</li><li><strong>Need thread safety?</strong> ‚Üí Concurrent collections</li><li><strong>Need sorting?</strong> ‚Üí SortedList&lt;K,V&gt; or SortedDictionary&lt;K,V&gt;</li><li><strong>Fixed size?</strong> ‚Üí Arrays</li><li><strong>Dynamic size?</strong> ‚Üí List&lt;T&gt;</li></ul></div>",
      "code": "var dict = new Dictionary<string,int>(); dict[\"a\"]=1;\nvar set = new HashSet<int>{1,2,2}; // {1,2}",
      "quiz": [ {"q":"Which preserves insertion order by default?","options":["List","Dictionary"],"answer":0} ]
    },
    {
      "id": 14,
      "tier": 1,
      "title": "Custom Collections",
      "description": "Implementing IEnumerable/IEnumerator; linked lists and trees.",
      "concepts": ["Implementing IEnumerable", "Linked Lists", "Trees"],
      "requirements": ["Implement GetEnumerator using yield"],
      "theory": "<div class='theory-content'><h4>üîß Custom Collections - Building Your Own Data Structures</h4><p>Creating custom collections allows you to build specialized data structures tailored to your specific needs. Understanding how to implement IEnumerable and custom data structures is essential for advanced C# development.</p><h4>üîÑ Implementing IEnumerable<T> - Making Collections Enumerable</h4><h5>Basic IEnumerable Implementation:</h5><pre><code>public class NumberSequence : IEnumerable<int>\n{\n    private readonly int _start;\n    private readonly int _count;\n    \n    public NumberSequence(int start, int count)\n    {\n        _start = start;\n        _count = count;\n    }\n    \n    // Generic IEnumerator<T>\n    public IEnumerator<int> GetEnumerator()\n    {\n        for (int i = 0; i < _count; i++)\n        {\n            yield return _start + i;\n        }\n    }\n    \n    // Non-generic IEnumerator (required by IEnumerable)\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n}\n\n// Usage\nvar sequence = new NumberSequence(10, 5); // 10, 11, 12, 13, 14\nforeach (int number in sequence)\n{\n    Console.WriteLine(number);\n}\n\n// Works with LINQ\nvar evenNumbers = sequence.Where(n => n % 2 == 0).ToList();</code></pre><h5>Manual IEnumerator Implementation:</h5><pre><code>public class CustomRange : IEnumerable<int>\n{\n    private readonly int _start;\n    private readonly int _end;\n    \n    public CustomRange(int start, int end)\n    {\n        _start = start;\n        _end = end;\n    }\n    \n    public IEnumerator<int> GetEnumerator()\n    {\n        return new CustomRangeEnumerator(_start, _end);\n    }\n    \n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n    \n    private class CustomRangeEnumerator : IEnumerator<int>\n    {\n        private readonly int _start;\n        private readonly int _end;\n        private int _current;\n        private bool _started;\n        \n        public CustomRangeEnumerator(int start, int end)\n        {\n            _start = start;\n            _end = end;\n            _current = start - 1;\n            _started = false;\n        }\n        \n        public int Current { get; private set; }\n        \n        object IEnumerator.Current => Current;\n        \n        public bool MoveNext()\n        {\n            if (!_started)\n            {\n                _current = _start;\n                _started = true;\n            }\n            else\n            {\n                _current++;\n            }\n            \n            if (_current <= _end)\n            {\n                Current = _current;\n                return true;\n            }\n            \n            return false;\n        }\n        \n        public void Reset()\n        {\n            _current = _start - 1;\n            _started = false;\n        }\n        \n        public void Dispose()\n        {\n            // Clean up resources if needed\n        }\n    }\n}</code></pre><h4>üîó Linked Lists - Dynamic Node-Based Storage</h4><h5>Singly Linked List Implementation:</h5><pre><code>public class Node<T>\n{\n    public T Data { get; set; }\n    public Node<T> Next { get; set; }\n    \n    public Node(T data)\n    {\n        Data = data;\n        Next = null;\n    }\n}\n\npublic class SinglyLinkedList<T> : IEnumerable<T>\n{\n    private Node<T> _head;\n    private int _count;\n    \n    public int Count => _count;\n    public bool IsEmpty => _head == null;\n    \n    // Add to the beginning\n    public void AddFirst(T data)\n    {\n        var newNode = new Node<T>(data)\n        {\n            Next = _head\n        };\n        _head = newNode;\n        _count++;\n    }\n    \n    // Add to the end\n    public void AddLast(T data)\n    {\n        var newNode = new Node<T>(data);\n        \n        if (_head == null)\n        {\n            _head = newNode;\n        }\n        else\n        {\n            var current = _head;\n            while (current.Next != null)\n            {\n                current = current.Next;\n            }\n            current.Next = newNode;\n        }\n        _count++;\n    }\n    \n    // Remove first occurrence\n    public bool Remove(T data)\n    {\n        if (_head == null) return false;\n        \n        // If head contains the data\n        if (EqualityComparer<T>.Default.Equals(_head.Data, data))\n        {\n            _head = _head.Next;\n            _count--;\n            return true;\n        }\n        \n        // Search in the rest of the list\n        var current = _head;\n        while (current.Next != null)\n        {\n            if (EqualityComparer<T>.Default.Equals(current.Next.Data, data))\n            {\n                current.Next = current.Next.Next;\n                _count--;\n                return true;\n            }\n            current = current.Next;\n        }\n        \n        return false;\n    }\n    \n    // Find element\n    public bool Contains(T data)\n    {\n        var current = _head;\n        while (current != null)\n        {\n            if (EqualityComparer<T>.Default.Equals(current.Data, data))\n                return true;\n            current = current.Next;\n        }\n        return false;\n    }\n    \n    // Enumeration support\n    public IEnumerator<T> GetEnumerator()\n    {\n        var current = _head;\n        while (current != null)\n        {\n            yield return current.Data;\n            current = current.Next;\n        }\n    }\n    \n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n    \n    // Display the list\n    public override string ToString()\n    {\n        return string.Join(\" -> \", this) + \" -> null\";\n    }\n}</code></pre><h5>Doubly Linked List:</h5><pre><code>public class DoublyLinkedNode<T>\n{\n    public T Data { get; set; }\n    public DoublyLinkedNode<T> Next { get; set; }\n    public DoublyLinkedNode<T> Previous { get; set; }\n    \n    public DoublyLinkedNode(T data)\n    {\n        Data = data;\n    }\n}\n\npublic class DoublyLinkedList<T> : IEnumerable<T>\n{\n    private DoublyLinkedNode<T> _head;\n    private DoublyLinkedNode<T> _tail;\n    private int _count;\n    \n    public int Count => _count;\n    \n    public void AddFirst(T data)\n    {\n        var newNode = new DoublyLinkedNode<T>(data);\n        \n        if (_head == null)\n        {\n            _head = _tail = newNode;\n        }\n        else\n        {\n            newNode.Next = _head;\n            _head.Previous = newNode;\n            _head = newNode;\n        }\n        _count++;\n    }\n    \n    public void AddLast(T data)\n    {\n        var newNode = new DoublyLinkedNode<T>(data);\n        \n        if (_tail == null)\n        {\n            _head = _tail = newNode;\n        }\n        else\n        {\n            _tail.Next = newNode;\n            newNode.Previous = _tail;\n            _tail = newNode;\n        }\n        _count++;\n    }\n    \n    // Enumerate forward\n    public IEnumerator<T> GetEnumerator()\n    {\n        var current = _head;\n        while (current != null)\n        {\n            yield return current.Data;\n            current = current.Next;\n        }\n    }\n    \n    // Enumerate backward\n    public IEnumerable<T> Reverse()\n    {\n        var current = _tail;\n        while (current != null)\n        {\n            yield return current.Data;\n            current = current.Previous;\n        }\n    }\n    \n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n}</code></pre><h4>üå≥ Trees - Hierarchical Data Structures</h4><h5>Binary Tree Implementation:</h5><pre><code>public class BinaryTreeNode<T>\n{\n    public T Data { get; set; }\n    public BinaryTreeNode<T> Left { get; set; }\n    public BinaryTreeNode<T> Right { get; set; }\n    \n    public BinaryTreeNode(T data)\n    {\n        Data = data;\n    }\n    \n    public bool IsLeaf => Left == null && Right == null;\n}\n\npublic class BinaryTree<T> : IEnumerable<T>\n{\n    public BinaryTreeNode<T> Root { get; private set; }\n    \n    public BinaryTree(T rootData)\n    {\n        Root = new BinaryTreeNode<T>(rootData);\n    }\n    \n    // In-order traversal (Left, Root, Right)\n    public IEnumerable<T> InOrderTraversal(BinaryTreeNode<T> node = null)\n    {\n        node ??= Root;\n        if (node == null) yield break;\n        \n        foreach (var data in InOrderTraversal(node.Left))\n            yield return data;\n        \n        yield return node.Data;\n        \n        foreach (var data in InOrderTraversal(node.Right))\n            yield return data;\n    }\n    \n    // Pre-order traversal (Root, Left, Right)\n    public IEnumerable<T> PreOrderTraversal(BinaryTreeNode<T> node = null)\n    {\n        node ??= Root;\n        if (node == null) yield break;\n        \n        yield return node.Data;\n        \n        foreach (var data in PreOrderTraversal(node.Left))\n            yield return data;\n        \n        foreach (var data in PreOrderTraversal(node.Right))\n            yield return data;\n    }\n    \n    // Post-order traversal (Left, Right, Root)\n    public IEnumerable<T> PostOrderTraversal(BinaryTreeNode<T> node = null)\n    {\n        node ??= Root;\n        if (node == null) yield break;\n        \n        foreach (var data in PostOrderTraversal(node.Left))\n            yield return data;\n        \n        foreach (var data in PostOrderTraversal(node.Right))\n            yield return data;\n        \n        yield return node.Data;\n    }\n    \n    // Level-order traversal (Breadth-first)\n    public IEnumerable<T> LevelOrderTraversal()\n    {\n        if (Root == null) yield break;\n        \n        var queue = new Queue<BinaryTreeNode<T>>();\n        queue.Enqueue(Root);\n        \n        while (queue.Count > 0)\n        {\n            var current = queue.Dequeue();\n            yield return current.Data;\n            \n            if (current.Left != null)\n                queue.Enqueue(current.Left);\n            \n            if (current.Right != null)\n                queue.Enqueue(current.Right);\n        }\n    }\n    \n    // Default enumeration (in-order)\n    public IEnumerator<T> GetEnumerator()\n    {\n        return InOrderTraversal().GetEnumerator();\n    }\n    \n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n}</code></pre><h5>Binary Search Tree (BST):</h5><pre><code>public class BinarySearchTree<T> : IEnumerable<T> where T : IComparable<T>\n{\n    private BinaryTreeNode<T> _root;\n    \n    public void Insert(T data)\n    {\n        _root = InsertRecursive(_root, data);\n    }\n    \n    private BinaryTreeNode<T> InsertRecursive(BinaryTreeNode<T> node, T data)\n    {\n        if (node == null)\n            return new BinaryTreeNode<T>(data);\n        \n        int comparison = data.CompareTo(node.Data);\n        \n        if (comparison < 0)\n            node.Left = InsertRecursive(node.Left, data);\n        else if (comparison > 0)\n            node.Right = InsertRecursive(node.Right, data);\n        // If equal, we don't insert (no duplicates)\n        \n        return node;\n    }\n    \n    public bool Search(T data)\n    {\n        return SearchRecursive(_root, data);\n    }\n    \n    private bool SearchRecursive(BinaryTreeNode<T> node, T data)\n    {\n        if (node == null) return false;\n        \n        int comparison = data.CompareTo(node.Data);\n        \n        if (comparison == 0) return true;\n        if (comparison < 0) return SearchRecursive(node.Left, data);\n        return SearchRecursive(node.Right, data);\n    }\n    \n    public void Delete(T data)\n    {\n        _root = DeleteRecursive(_root, data);\n    }\n    \n    private BinaryTreeNode<T> DeleteRecursive(BinaryTreeNode<T> node, T data)\n    {\n        if (node == null) return null;\n        \n        int comparison = data.CompareTo(node.Data);\n        \n        if (comparison < 0)\n        {\n            node.Left = DeleteRecursive(node.Left, data);\n        }\n        else if (comparison > 0)\n        {\n            node.Right = DeleteRecursive(node.Right, data);\n        }\n        else\n        {\n            // Node to delete found\n            if (node.Left == null) return node.Right;\n            if (node.Right == null) return node.Left;\n            \n            // Node has two children\n            T minValue = FindMin(node.Right);\n            node.Data = minValue;\n            node.Right = DeleteRecursive(node.Right, minValue);\n        }\n        \n        return node;\n    }\n    \n    private T FindMin(BinaryTreeNode<T> node)\n    {\n        while (node.Left != null)\n            node = node.Left;\n        return node.Data;\n    }\n    \n    // In-order traversal gives sorted order\n    public IEnumerator<T> GetEnumerator()\n    {\n        return InOrderTraversal(_root).GetEnumerator();\n    }\n    \n    private IEnumerable<T> InOrderTraversal(BinaryTreeNode<T> node)\n    {\n        if (node == null) yield break;\n        \n        foreach (var data in InOrderTraversal(node.Left))\n            yield return data;\n        \n        yield return node.Data;\n        \n        foreach (var data in InOrderTraversal(node.Right))\n            yield return data;\n    }\n    \n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n}</code></pre><h4>üèóÔ∏è Advanced Custom Collection Features</h4><h5>Thread-Safe Custom Collection:</h5><pre><code>public class ThreadSafeList<T> : IEnumerable<T>\n{\n    private readonly List<T> _items = new();\n    private readonly ReaderWriterLockSlim _lock = new();\n    \n    public int Count\n    {\n        get\n        {\n            _lock.EnterReadLock();\n            try\n            {\n                return _items.Count;\n            }\n            finally\n            {\n                _lock.ExitReadLock();\n            }\n        }\n    }\n    \n    public void Add(T item)\n    {\n        _lock.EnterWriteLock();\n        try\n        {\n            _items.Add(item);\n        }\n        finally\n        {\n            _lock.ExitWriteLock();\n        }\n    }\n    \n    public bool Remove(T item)\n    {\n        _lock.EnterWriteLock();\n        try\n        {\n            return _items.Remove(item);\n        }\n        finally\n        {\n            _lock.ExitWriteLock();\n        }\n    }\n    \n    public IEnumerator<T> GetEnumerator()\n    {\n        _lock.EnterReadLock();\n        try\n        {\n            // Create a snapshot to avoid lock issues during enumeration\n            return _items.ToList().GetEnumerator();\n        }\n        finally\n        {\n            _lock.ExitReadLock();\n        }\n    }\n    \n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n}</code></pre><h5>Lazy-Loading Collection:</h5><pre><code>public class LazyCollection<T> : IEnumerable<T>\n{\n    private readonly Func<IEnumerable<T>> _dataSource;\n    private List<T> _cache;\n    private readonly object _lock = new object();\n    \n    public LazyCollection(Func<IEnumerable<T>> dataSource)\n    {\n        _dataSource = dataSource ?? throw new ArgumentNullException(nameof(dataSource));\n    }\n    \n    private List<T> GetData()\n    {\n        if (_cache == null)\n        {\n            lock (_lock)\n            {\n                if (_cache == null)\n                {\n                    Console.WriteLine(\"Loading data...\");\n                    _cache = _dataSource().ToList();\n                }\n            }\n        }\n        return _cache;\n    }\n    \n    public IEnumerator<T> GetEnumerator()\n    {\n        return GetData().GetEnumerator();\n    }\n    \n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n    \n    public int Count => GetData().Count;\n    \n    public void Refresh()\n    {\n        lock (_lock)\n        {\n            _cache = null;\n        }\n    }\n}</code></pre><h4>‚ö° Performance Considerations</h4><h5>Custom Collection Performance:</h5><table><tr><th>Operation</th><th>Array</th><th>LinkedList</th><th>BST</th><th>Custom Hash</th></tr><tr><td>Access by Index</td><td>O(1)</td><td>O(n)</td><td>N/A</td><td>N/A</td></tr><tr><td>Search</td><td>O(n)</td><td>O(n)</td><td>O(log n)</td><td>O(1)</td></tr><tr><td>Insert at Beginning</td><td>O(n)</td><td>O(1)</td><td>O(log n)</td><td>O(1)</td></tr><tr><td>Insert at End</td><td>O(1)*</td><td>O(1)</td><td>O(log n)</td><td>O(1)</td></tr><tr><td>Delete</td><td>O(n)</td><td>O(1)**</td><td>O(log n)</td><td>O(1)</td></tr></table><p>*Amortized, **If you have reference to node</p><h4>üèÜ Best Practices</h4><ul><li>Use yield return for lazy enumeration when possible</li><li>Implement both generic and non-generic IEnumerator</li><li>Consider thread safety for collections used across threads</li><li>Implement IDisposable when resources need cleanup</li><li>Use generic constraints to ensure type safety</li><li>Optimize for your specific use case</li><li>Provide clear documentation for custom behavior</li><li>Consider implementing ICollection&lt;T&gt; for more functionality</li><li>Use existing collections when they meet your needs</li></ul><h4>üéØ When to Create Custom Collections</h4><ul><li><strong>Specialized behavior:</strong> Unique operations not available in built-in collections</li><li><strong>Performance requirements:</strong> Need specific time/space complexity</li><li><strong>Domain-specific logic:</strong> Business rules embedded in the collection</li><li><strong>Memory constraints:</strong> Optimized memory usage patterns</li><li><strong>Thread safety:</strong> Specific concurrency requirements</li><li><strong>Integration:</strong> Need to work with existing APIs or protocols</li></ul></div>",
      "code": "public IEnumerable<int> Range(int n){ for(int i=0;i<n;i++) yield return i; }",
      "quiz": [ {"q":"yield return builds what?","options":["Iterator state machine","Array"],"answer":0} ]
    },
    {
      "id": 15,
      "tier": 1,
      "title": "Error Handling & Debugging",
      "description": "Exceptions, custom exceptions, breakpoints/logging.",
      "concepts": ["Exception Handling", "Custom Exceptions", "Debugging Techniques"],
      "requirements": ["Use try/catch/finally", "Add logging and breakpoints"],
      "theory": "<div class='theory-content'><h4>üõ†Ô∏è Error Handling & Debugging - Robust Code Development</h4><p>Proper error handling and debugging skills are essential for creating reliable applications. Understanding exceptions, debugging techniques, and logging strategies helps you build resilient software.</p><h4>‚ö†Ô∏è Exception Handling - Managing Exceptional Conditions</h4><h5>Try-Catch-Finally Structure:</h5><pre><code>public class FileProcessor\n{\n    public string ProcessFile(string filePath)\n    {\n        StreamReader reader = null;\n        try\n        {\n            // Code that might throw exceptions\n            reader = new StreamReader(filePath);\n            string content = reader.ReadToEnd();\n            \n            // Process the content\n            return ProcessContent(content);\n        }\n        catch (FileNotFoundException ex)\n        {\n            // Handle specific exception type\n            Console.WriteLine($\"File not found: {ex.FileName}\");\n            throw; // Re-throw to preserve stack trace\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            // Handle another specific exception\n            Console.WriteLine($\"Access denied: {ex.Message}\");\n            return string.Empty; // Graceful recovery\n        }\n        catch (IOException ex)\n        {\n            // Handle broader category\n            Console.WriteLine($\"IO error occurred: {ex.Message}\");\n            throw new ProcessingException(\"Failed to process file\", ex); // Wrap exception\n        }\n        catch (Exception ex)\n        {\n            // Catch-all for unexpected exceptions\n            Console.WriteLine($\"Unexpected error: {ex.Message}\");\n            throw; // Re-throw unknown exceptions\n        }\n        finally\n        {\n            // Always executed - cleanup code\n            reader?.Dispose();\n            Console.WriteLine(\"Cleanup completed\");\n        }\n    }\n}</code></pre><h5>Exception Handling Best Practices:</h5><pre><code>public class BestPracticesExample\n{\n    // ‚úÖ Good: Specific exception handling\n    public void GoodExceptionHandling()\n    {\n        try\n        {\n            var result = RiskyOperation();\n            ProcessResult(result);\n        }\n        catch (ArgumentException ex) when (ex.ParamName == \"userId\")\n        {\n            // Exception filters (C# 6+)\n            LogError(\"Invalid user ID provided\", ex);\n            throw new UserException(\"Invalid user identifier\", ex);\n        }\n        catch (InvalidOperationException ex)\n        {\n            LogError(\"Operation failed\", ex);\n            // Handle gracefully\n        }\n    }\n    \n    // ‚ùå Bad: Catching all exceptions\n    public void BadExceptionHandling()\n    {\n        try\n        {\n            RiskyOperation();\n        }\n        catch (Exception)\n        {\n            // Swallowing all exceptions - very bad!\n            // No logging, no recovery, no re-throwing\n        }\n    }\n    \n    // ‚úÖ Good: Using patterns for validation\n    public void ValidateInput(string input)\n    {\n        // Use guard clauses instead of exceptions for validation\n        if (string.IsNullOrWhiteSpace(input))\n            throw new ArgumentException(\"Input cannot be null or empty\", nameof(input));\n        \n        if (input.Length > 100)\n            throw new ArgumentException(\"Input too long\", nameof(input));\n    }\n}</code></pre><h4>üèóÔ∏è Custom Exceptions - Conveying Intent</h4><h5>Creating Custom Exception Classes:</h5><pre><code>// Base custom exception\npublic class BusinessException : Exception\n{\n    public string ErrorCode { get; }\n    \n    public BusinessException(string errorCode, string message) : base(message)\n    {\n        ErrorCode = errorCode;\n    }\n    \n    public BusinessException(string errorCode, string message, Exception innerException) \n        : base(message, innerException)\n    {\n        ErrorCode = errorCode;\n    }\n}\n\n// Specific business exceptions\npublic class UserNotFoundException : BusinessException\n{\n    public int UserId { get; }\n    \n    public UserNotFoundException(int userId) \n        : base(\"USER_NOT_FOUND\", $\"User with ID {userId} was not found\")\n    {\n        UserId = userId;\n    }\n}\n\npublic class InsufficientFundsException : BusinessException\n{\n    public decimal RequestedAmount { get; }\n    public decimal AvailableAmount { get; }\n    \n    public InsufficientFundsException(decimal requested, decimal available)\n        : base(\"INSUFFICIENT_FUNDS\", \n               $\"Requested amount {requested:C} exceeds available amount {available:C}\")\n    {\n        RequestedAmount = requested;\n        AvailableAmount = available;\n    }\n}\n\n// Validation exception with multiple errors\npublic class ValidationException : BusinessException\n{\n    public IReadOnlyList<string> Errors { get; }\n    \n    public ValidationException(IEnumerable<string> errors)\n        : base(\"VALIDATION_FAILED\", \"One or more validation errors occurred\")\n    {\n        Errors = errors.ToList().AsReadOnly();\n    }\n    \n    public override string ToString()\n    {\n        var errorsText = string.Join(Environment.NewLine, Errors);\n        return $\"{base.ToString()}{Environment.NewLine}Validation Errors:{Environment.NewLine}{errorsText}\";\n    }\n}</code></pre><h5>Exception Usage Patterns:</h5><pre><code>public class ServiceLayer\n{\n    public async Task<User> GetUserAsync(int userId)\n    {\n        try\n        {\n            var user = await _repository.GetUserAsync(userId);\n            if (user == null)\n            {\n                throw new UserNotFoundException(userId);\n            }\n            return user;\n        }\n        catch (DatabaseException ex)\n        {\n            // Wrap infrastructure exceptions\n            throw new ServiceException(\"Failed to retrieve user\", ex);\n        }\n    }\n    \n    public void TransferMoney(Account from, Account to, decimal amount)\n    {\n        // Validation\n        if (amount <= 0)\n            throw new ArgumentException(\"Amount must be positive\", nameof(amount));\n        \n        if (from.Balance < amount)\n            throw new InsufficientFundsException(amount, from.Balance);\n        \n        // Business logic\n        from.Withdraw(amount);\n        to.Deposit(amount);\n    }\n}</code></pre><h4>üîç Debugging Techniques - Finding and Fixing Issues</h4><h5>Using Debug and Trace:</h5><pre><code>using System.Diagnostics;\n\npublic class DebuggingExample\n{\n    private static readonly TraceSource Logger = new TraceSource(\"MyApp\");\n    \n    public void ProcessData(List<int> data)\n    {\n        Debug.WriteLine($\"Processing {data.Count} items\"); // Debug builds only\n        Trace.WriteLine($\"Processing started at {DateTime.Now}\"); // All builds\n        \n        // Conditional compilation\n        #if DEBUG\n        ValidateDebugAssumptions(data);\n        #endif\n        \n        for (int i = 0; i < data.Count; i++)\n        {\n            var item = data[i];\n            \n            // Debug assertions\n            Debug.Assert(item >= 0, \"Item should not be negative\");\n            \n            // Trace important values\n            Trace.WriteLineIf(item > 1000, $\"Large value detected: {item}\");\n            \n            ProcessItem(item);\n        }\n        \n        Logger.TraceInformation(\"Processing completed successfully\");\n    }\n    \n    [Conditional(\"DEBUG\")]\n    private void ValidateDebugAssumptions(List<int> data)\n    {\n        Debug.Assert(data != null, \"Data should not be null\");\n        Debug.Assert(data.Count > 0, \"Data should not be empty\");\n    }\n    \n    private void ProcessItem(int item)\n    {\n        // Breakpoint: Set conditional breakpoints in IDE\n        // if (item == specificValue) Debugger.Break();\n        \n        // Performance measurement\n        var stopwatch = Stopwatch.StartNew();\n        \n        // Actual processing\n        var result = item * 2;\n        \n        stopwatch.Stop();\n        if (stopwatch.ElapsedMilliseconds > 100)\n        {\n            Trace.TraceWarning($\"Slow processing detected: {stopwatch.ElapsedMilliseconds}ms for item {item}\");\n        }\n    }\n}</code></pre><h5>Advanced Debugging Techniques:</h5><pre><code>public class AdvancedDebugging\n{\n    // DebuggerDisplay attribute customizes debugger view\n    [DebuggerDisplay(\"Count = {Count}, Name = {Name}\")]\n    public class CustomClass\n    {\n        public int Count { get; set; }\n        public string Name { get; set; }\n        \n        // DebuggerBrowsable controls debugger visibility\n        [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n        public string InternalId { get; set; }\n    }\n    \n    // DebuggerStepThrough skips this method during debugging\n    [DebuggerStepThrough]\n    public static T Guard<T>(T value, string parameterName) where T : class\n    {\n        return value ?? throw new ArgumentNullException(parameterName);\n    }\n    \n    public void DebuggingFeatures()\n    {\n        // Debugger.Break() programmatically breaks into debugger\n        if (SomeCondition())\n        {\n            Debugger.Break();\n        }\n        \n        // Check if debugger is attached\n        if (Debugger.IsAttached)\n        {\n            Console.WriteLine(\"Running under debugger\");\n        }\n    }\n}</code></pre><h4>üìù Logging - Structured Information Gathering</h4><h5>Using Microsoft.Extensions.Logging:</h5><pre><code>using Microsoft.Extensions.Logging;\n\npublic class OrderService\n{\n    private readonly ILogger<OrderService> _logger;\n    \n    public OrderService(ILogger<OrderService> logger)\n    {\n        _logger = logger;\n    }\n    \n    public async Task<Order> CreateOrderAsync(CreateOrderRequest request)\n    {\n        // Structured logging with log levels\n        _logger.LogInformation(\"Creating order for customer {CustomerId} with {ItemCount} items\", \n                              request.CustomerId, request.Items.Count);\n        \n        try\n        {\n            // Validate request\n            if (!IsValidRequest(request))\n            {\n                _logger.LogWarning(\"Invalid order request received for customer {CustomerId}\", \n                                  request.CustomerId);\n                throw new ValidationException(GetValidationErrors(request));\n            }\n            \n            // Create order\n            var order = new Order(request);\n            await _repository.SaveAsync(order);\n            \n            _logger.LogInformation(\"Order {OrderId} created successfully for customer {CustomerId}\", \n                                  order.Id, request.CustomerId);\n            \n            return order;\n        }\n        catch (ValidationException ex)\n        {\n            _logger.LogWarning(ex, \"Order validation failed for customer {CustomerId}\", \n                              request.CustomerId);\n            throw;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to create order for customer {CustomerId}\", \n                            request.CustomerId);\n            throw new OrderCreationException(\"Failed to create order\", ex);\n        }\n    }\n}</code></pre><h5>Custom Logging Patterns:</h5><pre><code>public static class LoggerExtensions\n{\n    // High-performance logging with LoggerMessage\n    private static readonly Action<ILogger, string, int, Exception?> _processStarted =\n        LoggerMessage.Define<string, int>(\n            LogLevel.Information,\n            new EventId(1001, \"ProcessStarted\"),\n            \"Processing {ProcessName} started with {ItemCount} items\");\n    \n    private static readonly Action<ILogger, string, double, Exception?> _processCompleted =\n        LoggerMessage.Define<string, double>(\n            LogLevel.Information,\n            new EventId(1002, \"ProcessCompleted\"),\n            \"Processing {ProcessName} completed in {ElapsedMs}ms\");\n    \n    public static void LogProcessStarted(this ILogger logger, string processName, int itemCount)\n    {\n        _processStarted(logger, processName, itemCount, null);\n    }\n    \n    public static void LogProcessCompleted(this ILogger logger, string processName, double elapsedMs)\n    {\n        _processCompleted(logger, processName, elapsedMs, null);\n    }\n}\n\n// Usage\npublic class ProcessorService\n{\n    private readonly ILogger<ProcessorService> _logger;\n    \n    public void ProcessItems(List<Item> items)\n    {\n        var stopwatch = Stopwatch.StartNew();\n        _logger.LogProcessStarted(\"ItemProcessing\", items.Count);\n        \n        try\n        {\n            // Process items\n            foreach (var item in items)\n            {\n                ProcessItem(item);\n            }\n        }\n        finally\n        {\n            stopwatch.Stop();\n            _logger.LogProcessCompleted(\"ItemProcessing\", stopwatch.ElapsedMilliseconds);\n        }\n    }\n}</code></pre><h4>üîß Error Recovery Patterns</h4><h5>Retry Pattern:</h5><pre><code>public class RetryHelper\n{\n    public static async Task<T> RetryAsync<T>(\n        Func<Task<T>> operation,\n        int maxAttempts = 3,\n        TimeSpan delay = default)\n    {\n        if (delay == default) delay = TimeSpan.FromSeconds(1);\n        \n        Exception lastException = null;\n        \n        for (int attempt = 1; attempt <= maxAttempts; attempt++)\n        {\n            try\n            {\n                return await operation();\n            }\n            catch (Exception ex) when (IsRetriableException(ex))\n            {\n                lastException = ex;\n                \n                if (attempt == maxAttempts)\n                    break;\n                \n                Console.WriteLine($\"Attempt {attempt} failed, retrying in {delay.TotalSeconds}s...\");\n                await Task.Delay(delay);\n                \n                // Exponential backoff\n                delay = TimeSpan.FromMilliseconds(delay.TotalMilliseconds * 2);\n            }\n        }\n        \n        throw new RetryExhaustedException(\n            $\"Operation failed after {maxAttempts} attempts\", lastException);\n    }\n    \n    private static bool IsRetriableException(Exception ex)\n    {\n        return ex is HttpRequestException ||\n               ex is TimeoutException ||\n               ex is SocketException;\n    }\n}</code></pre><h5>Circuit Breaker Pattern:</h5><pre><code>public class CircuitBreaker\n{\n    private int _failureCount = 0;\n    private DateTime _lastFailureTime = DateTime.MinValue;\n    private readonly int _threshold;\n    private readonly TimeSpan _timeout;\n    private CircuitState _state = CircuitState.Closed;\n    \n    public CircuitBreaker(int threshold = 5, TimeSpan timeout = default)\n    {\n        _threshold = threshold;\n        _timeout = timeout == default ? TimeSpan.FromMinutes(1) : timeout;\n    }\n    \n    public async Task<T> ExecuteAsync<T>(Func<Task<T>> operation)\n    {\n        if (_state == CircuitState.Open)\n        {\n            if (DateTime.UtcNow - _lastFailureTime > _timeout)\n            {\n                _state = CircuitState.HalfOpen;\n            }\n            else\n            {\n                throw new CircuitBreakerOpenException(\"Circuit breaker is open\");\n            }\n        }\n        \n        try\n        {\n            var result = await operation();\n            OnSuccess();\n            return result;\n        }\n        catch (Exception ex)\n        {\n            OnFailure();\n            throw;\n        }\n    }\n    \n    private void OnSuccess()\n    {\n        _failureCount = 0;\n        _state = CircuitState.Closed;\n    }\n    \n    private void OnFailure()\n    {\n        _failureCount++;\n        _lastFailureTime = DateTime.UtcNow;\n        \n        if (_failureCount >= _threshold)\n        {\n            _state = CircuitState.Open;\n        }\n    }\n}\n\npublic enum CircuitState { Closed, Open, HalfOpen }</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Swallowing exceptions:</strong> Catching and ignoring exceptions without logging</li><li><strong>Throwing generic exceptions:</strong> Using Exception instead of specific types</li><li><strong>Breaking stack traces:</strong> Using 'throw ex' instead of 'throw'</li><li><strong>Overusing exceptions:</strong> Using exceptions for control flow</li><li><strong>Missing finally blocks:</strong> Not cleaning up resources</li><li><strong>Debugging in production:</strong> Leaving debug code in release builds</li></ul><h4>üèÜ Best Practices</h4><ul><li>Catch specific exceptions rather than Exception</li><li>Use 'throw' to preserve stack traces when re-throwing</li><li>Log exceptions with context and correlation IDs</li><li>Use structured logging for better searchability</li><li>Implement proper cleanup in finally blocks</li><li>Create meaningful custom exception types</li><li>Use exception filters for conditional handling</li><li>Don't catch exceptions you can't handle meaningfully</li><li>Use debugging attributes to improve debugging experience</li><li>Implement retry and circuit breaker patterns for resilience</li></ul><h4>üöÄ Modern Error Handling</h4><h5>Result Pattern (Alternative to Exceptions):</h5><pre><code>public record Result<T>\n{\n    public T? Value { get; init; }\n    public bool IsSuccess { get; init; }\n    public string? Error { get; init; }\n    \n    public static Result<T> Success(T value) => new() { Value = value, IsSuccess = true };\n    public static Result<T> Failure(string error) => new() { Error = error, IsSuccess = false };\n}\n\npublic class UserService\n{\n    public Result<User> GetUser(int id)\n    {\n        try\n        {\n            var user = _repository.GetUser(id);\n            return user != null \n                ? Result<User>.Success(user)\n                : Result<User>.Failure($\"User {id} not found\");\n        }\n        catch (Exception ex)\n        {\n            return Result<User>.Failure($\"Error retrieving user: {ex.Message}\");\n        }\n    }\n}\n\n// Usage\nvar result = userService.GetUser(123);\nif (result.IsSuccess)\n{\n    ProcessUser(result.Value);\n}\nelse\n{\n    Console.WriteLine($\"Error: {result.Error}\");\n}</code></pre></div>",
      "code": "try { DoWork(); } catch(IOException ex){ Console.Error.WriteLine(ex.Message); throw; } finally { Cleanup(); }",
      "quiz": [ {"q":"Rethrowing preserves stack?","options":["throw ex;","throw;"],"answer":1} ]
    },
    {
      "id": 20,
      "tier": 2,
      "title": "Delegates & Events",
      "description": "Delegates, lambdas, Action/Func, events.",
      "concepts": ["Delegate Types", "Lambda Expressions", "Anonymous Methods", "Action/Func", "Event Handling"],
      "requirements": ["Declare a delegate and subscribe to an event"],
      "theory": "<div class='theory-content'><h4>üéØ Delegates & Events - Functional Programming and Observer Pattern</h4><p>Delegates and events are fundamental C# concepts that enable functional programming patterns, callbacks, and the observer pattern. They provide type-safe function pointers and event-driven programming capabilities.</p><h4>üîó Delegates - Type-Safe Function Pointers</h4><h5>Basic Delegate Declaration and Usage:</h5><pre><code>// Delegate declaration\npublic delegate int MathOperation(int a, int b);\npublic delegate void NotificationHandler(string message);\npublic delegate bool Predicate<T>(T item);\n\npublic class DelegateBasics\n{\n    // Methods that match delegate signatures\n    public static int Add(int a, int b) => a + b;\n    public static int Multiply(int a, int b) => a * b;\n    public static int Subtract(int a, int b) => a - b;\n    \n    public static void LogMessage(string message)\n    {\n        Console.WriteLine($\"[LOG] {DateTime.Now}: {message}\");\n    }\n    \n    public static void EmailNotification(string message)\n    {\n        Console.WriteLine($\"[EMAIL] Sending: {message}\");\n    }\n    \n    public static void DemonstrateBasicDelegates()\n    {\n        // Single delegate assignment\n        MathOperation operation = Add;\n        int result = operation(5, 3); // 8\n        \n        // Changing delegate target\n        operation = Multiply;\n        result = operation(5, 3); // 15\n        \n        // Multicast delegates\n        NotificationHandler notify = LogMessage;\n        notify += EmailNotification; // Add another method\n        \n        notify(\"System started\"); // Calls both methods\n        \n        notify -= LogMessage; // Remove a method\n        notify(\"User logged in\"); // Calls only EmailNotification\n    }\n}</code></pre><h5>Built-in Delegate Types:</h5><pre><code>// Action delegates (no return value)\nAction simpleAction = () => Console.WriteLine(\"Hello\");\nAction<string> messageAction = msg => Console.WriteLine(msg);\nAction<int, string> paramAction = (id, name) => Console.WriteLine($\"ID: {id}, Name: {name}\");\n\n// Func delegates (with return value)\nFunc<int> getNumber = () => 42;\nFunc<int, int, int> addNumbers = (a, b) => a + b;\nFunc<string, bool> isValidEmail = email => email.Contains(\"@\");\nFunc<List<int>, int> getSum = numbers => numbers.Sum();\n\n// Predicate delegate (returns bool)\nPredicate<int> isEven = x => x % 2 == 0;\nPredicate<string> isNotEmpty = s => !string.IsNullOrEmpty(s);\n\n// Usage examples\npublic void DemonstrateBuiltInDelegates()\n{\n    // Using Action\n    simpleAction(); // \"Hello\"\n    messageAction(\"Welcome!\");\n    paramAction(123, \"Alice\");\n    \n    // Using Func\n    int number = getNumber(); // 42\n    int sum = addNumbers(10, 20); // 30\n    bool valid = isValidEmail(\"test@example.com\"); // true\n    \n    // Using Predicate with collections\n    var numbers = new List<int> { 1, 2, 3, 4, 5, 6 };\n    var evenNumbers = numbers.Where(x => isEven(x)).ToList();\n}</code></pre><h4>üé≠ Lambda Expressions - Inline Function Definitions</h4><h5>Lambda Expression Syntax:</h5><pre><code>public class LambdaExamples\n{\n    public void DemonstrateLambdas()\n    {\n        var numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n        \n        // Expression lambdas\n        Func<int, bool> isEven = x => x % 2 == 0;\n        Func<int, int> square = x => x * x;\n        Func<int, int, int> add = (x, y) => x + y;\n        \n        // Statement lambdas\n        Action<string> complexAction = message =>\n        {\n            Console.WriteLine($\"Processing: {message}\");\n            // Multiple statements\n            var processed = message.ToUpper().Trim();\n            Console.WriteLine($\"Result: {processed}\");\n        };\n        \n        // Lambdas with LINQ\n        var evenNumbers = numbers.Where(x => x % 2 == 0).ToList();\n        var squaredNumbers = numbers.Select(x => x * x).ToList();\n        var filteredAndTransformed = numbers\n            .Where(x => x > 5)\n            .Select(x => new { Number = x, Square = x * x })\n            .ToList();\n        \n        // Local functions (alternative to lambdas)\n        int CalculateFactorial(int n)\n        {\n            return n <= 1 ? 1 : n * CalculateFactorial(n - 1);\n        }\n        \n        var factorial5 = CalculateFactorial(5); // 120\n    }\n    \n    // Capturing variables (closures)\n    public Func<int, int> CreateMultiplier(int factor)\n    {\n        // Lambda captures the 'factor' variable\n        return x => x * factor;\n    }\n    \n    public void DemonstrateClosures()\n    {\n        var multiplyBy3 = CreateMultiplier(3);\n        var multiplyBy5 = CreateMultiplier(5);\n        \n        Console.WriteLine(multiplyBy3(10)); // 30\n        Console.WriteLine(multiplyBy5(10)); // 50\n        \n        // Be careful with loop variable capture\n        var actions = new List<Action>();\n        \n        // ‚ùå Wrong way - all actions will print 3\n        for (int i = 0; i < 3; i++)\n        {\n            actions.Add(() => Console.WriteLine(i)); // Captures reference to 'i'\n        }\n        \n        // ‚úÖ Correct way - capture the value\n        for (int i = 0; i < 3; i++)\n        {\n            int localI = i; // Create local copy\n            actions.Add(() => Console.WriteLine(localI));\n        }\n    }\n}</code></pre><h4>üì° Events - Publisher-Subscriber Pattern</h4><h5>Event Declaration and Usage:</h5><pre><code>public class TemperatureSensor\n{\n    // Event declaration\n    public event EventHandler<TemperatureChangedEventArgs>? TemperatureChanged;\n    public event Action<double>? CriticalTemperatureReached;\n    \n    private double _temperature;\n    \n    public double Temperature\n    {\n        get => _temperature;\n        set\n        {\n            if (Math.Abs(_temperature - value) > 0.1) // Only if significant change\n            {\n                var oldTemp = _temperature;\n                _temperature = value;\n                \n                // Raise event\n                OnTemperatureChanged(new TemperatureChangedEventArgs(oldTemp, value));\n                \n                // Check for critical temperature\n                if (value > 100)\n                {\n                    CriticalTemperatureReached?.Invoke(value);\n                }\n            }\n        }\n    }\n    \n    // Event raising method (protected virtual for inheritance)\n    protected virtual void OnTemperatureChanged(TemperatureChangedEventArgs e)\n    {\n        TemperatureChanged?.Invoke(this, e);\n    }\n}\n\n// Custom EventArgs\npublic class TemperatureChangedEventArgs : EventArgs\n{\n    public double OldTemperature { get; }\n    public double NewTemperature { get; }\n    public double Change => NewTemperature - OldTemperature;\n    \n    public TemperatureChangedEventArgs(double oldTemp, double newTemp)\n    {\n        OldTemperature = oldTemp;\n        NewTemperature = newTemp;\n    }\n}\n\n// Event subscribers\npublic class TemperatureMonitor\n{\n    public void StartMonitoring(TemperatureSensor sensor)\n    {\n        // Subscribe to events\n        sensor.TemperatureChanged += OnTemperatureChanged;\n        sensor.CriticalTemperatureReached += OnCriticalTemperature;\n    }\n    \n    public void StopMonitoring(TemperatureSensor sensor)\n    {\n        // Unsubscribe from events\n        sensor.TemperatureChanged -= OnTemperatureChanged;\n        sensor.CriticalTemperatureReached -= OnCriticalTemperature;\n    }\n    \n    private void OnTemperatureChanged(object? sender, TemperatureChangedEventArgs e)\n    {\n        Console.WriteLine($\"Temperature changed from {e.OldTemperature:F1}¬∞C to {e.NewTemperature:F1}¬∞C\");\n        \n        if (Math.Abs(e.Change) > 10)\n        {\n            Console.WriteLine(\"‚ö†Ô∏è Rapid temperature change detected!\");\n        }\n    }\n    \n    private void OnCriticalTemperature(double temperature)\n    {\n        Console.WriteLine($\"üö® CRITICAL: Temperature reached {temperature:F1}¬∞C!\");\n        // Could trigger alarms, notifications, etc.\n    }\n}</code></pre><h5>Advanced Event Patterns:</h5><pre><code>public class AdvancedEventPatterns\n{\n    // Custom event with add/remove accessors\n    private EventHandler<CustomEventArgs>? _customEvent;\n    \n    public event EventHandler<CustomEventArgs> CustomEvent\n    {\n        add\n        {\n            Console.WriteLine(\"Subscriber added\");\n            _customEvent += value;\n        }\n        remove\n        {\n            Console.WriteLine(\"Subscriber removed\");\n            _customEvent -= value;\n        }\n    }\n    \n    // Weak event pattern (prevents memory leaks)\n    public static class WeakEventManager<TEventArgs> where TEventArgs : EventArgs\n    {\n        private static readonly List<WeakReference> _handlers = new();\n        \n        public static void AddHandler(EventHandler<TEventArgs> handler)\n        {\n            _handlers.Add(new WeakReference(handler));\n        }\n        \n        public static void RemoveHandler(EventHandler<TEventArgs> handler)\n        {\n            for (int i = _handlers.Count - 1; i >= 0; i--)\n            {\n                if (!_handlers[i].IsAlive || _handlers[i].Target?.Equals(handler) == true)\n                {\n                    _handlers.RemoveAt(i);\n                }\n            }\n        }\n        \n        public static void RaiseEvent(object? sender, TEventArgs e)\n        {\n            for (int i = _handlers.Count - 1; i >= 0; i--)\n            {\n                if (_handlers[i].IsAlive && _handlers[i].Target is EventHandler<TEventArgs> handler)\n                {\n                    handler(sender, e);\n                }\n                else\n                {\n                    _handlers.RemoveAt(i); // Clean up dead references\n                }\n            }\n        }\n    }\n}</code></pre><h4>üîÑ Delegate Composition and Manipulation</h4><h5>Multicast Delegates:</h5><pre><code>public class DelegateComposition\n{\n    public delegate void ProcessingStep(string data);\n    \n    public static void ValidateData(string data)\n    {\n        Console.WriteLine($\"Validating: {data}\");\n        if (string.IsNullOrEmpty(data))\n            throw new ArgumentException(\"Data cannot be empty\");\n    }\n    \n    public static void TransformData(string data)\n    {\n        Console.WriteLine($\"Transforming: {data}\");\n    }\n    \n    public static void SaveData(string data)\n    {\n        Console.WriteLine($\"Saving: {data}\");\n    }\n    \n    public static void LogData(string data)\n    {\n        Console.WriteLine($\"Logging: {data}\");\n    }\n    \n    public void DemonstrateComposition()\n    {\n        // Build processing pipeline\n        ProcessingStep pipeline = ValidateData;\n        pipeline += TransformData;\n        pipeline += SaveData;\n        pipeline += LogData;\n        \n        // Execute entire pipeline\n        pipeline(\"Sample data\");\n        \n        // Get invocation list\n        Delegate[] steps = pipeline.GetInvocationList();\n        Console.WriteLine($\"Pipeline has {steps.Length} steps\");\n        \n        // Execute steps individually with error handling\n        foreach (ProcessingStep step in steps.Cast<ProcessingStep>())\n        {\n            try\n            {\n                step(\"Sample data\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Step failed: {ex.Message}\");\n            }\n        }\n    }\n}</code></pre><h4>üéØ Practical Applications</h4><h5>Command Pattern with Delegates:</h5><pre><code>public class CommandPattern\n{\n    public class UndoableCommand\n    {\n        public Action Execute { get; }\n        public Action Undo { get; }\n        public string Description { get; }\n        \n        public UndoableCommand(Action execute, Action undo, string description)\n        {\n            Execute = execute;\n            Undo = undo;\n            Description = description;\n        }\n    }\n    \n    public class Calculator\n    {\n        private readonly Stack<UndoableCommand> _history = new();\n        private double _value = 0;\n        \n        public double Value => _value;\n        \n        public void ExecuteCommand(UndoableCommand command)\n        {\n            command.Execute();\n            _history.Push(command);\n            Console.WriteLine($\"Executed: {command.Description}, Value: {_value}\");\n        }\n        \n        public void Undo()\n        {\n            if (_history.Count > 0)\n            {\n                var command = _history.Pop();\n                command.Undo();\n                Console.WriteLine($\"Undid: {command.Description}, Value: {_value}\");\n            }\n        }\n        \n        public UndoableCommand CreateAddCommand(double amount)\n        {\n            return new UndoableCommand(\n                execute: () => _value += amount,\n                undo: () => _value -= amount,\n                description: $\"Add {amount}\"\n            );\n        }\n        \n        public UndoableCommand CreateMultiplyCommand(double factor)\n        {\n            double originalValue = _value;\n            return new UndoableCommand(\n                execute: () => _value *= factor,\n                undo: () => _value = originalValue,\n                description: $\"Multiply by {factor}\"\n            );\n        }\n    }\n}</code></pre><h5>Observer Pattern with Events:</h5><pre><code>public class StockMarket\n{\n    public event EventHandler<StockPriceChangedEventArgs>? StockPriceChanged;\n    \n    private readonly Dictionary<string, decimal> _stockPrices = new();\n    \n    public void UpdateStockPrice(string symbol, decimal newPrice)\n    {\n        if (_stockPrices.TryGetValue(symbol, out decimal oldPrice))\n        {\n            if (oldPrice != newPrice)\n            {\n                _stockPrices[symbol] = newPrice;\n                OnStockPriceChanged(new StockPriceChangedEventArgs(symbol, oldPrice, newPrice));\n            }\n        }\n        else\n        {\n            _stockPrices[symbol] = newPrice;\n            OnStockPriceChanged(new StockPriceChangedEventArgs(symbol, 0, newPrice));\n        }\n    }\n    \n    protected virtual void OnStockPriceChanged(StockPriceChangedEventArgs e)\n    {\n        StockPriceChanged?.Invoke(this, e);\n    }\n}\n\npublic class StockPriceChangedEventArgs : EventArgs\n{\n    public string Symbol { get; }\n    public decimal OldPrice { get; }\n    public decimal NewPrice { get; }\n    public decimal ChangeAmount => NewPrice - OldPrice;\n    public decimal ChangePercent => OldPrice != 0 ? (ChangeAmount / OldPrice) * 100 : 0;\n    \n    public StockPriceChangedEventArgs(string symbol, decimal oldPrice, decimal newPrice)\n    {\n        Symbol = symbol;\n        OldPrice = oldPrice;\n        NewPrice = newPrice;\n    }\n}\n\npublic class StockTrader\n{\n    private readonly string _name;\n    \n    public StockTrader(string name)\n    {\n        _name = name;\n    }\n    \n    public void StartTrading(StockMarket market)\n    {\n        market.StockPriceChanged += OnStockPriceChanged;\n    }\n    \n    private void OnStockPriceChanged(object? sender, StockPriceChangedEventArgs e)\n    {\n        if (Math.Abs(e.ChangePercent) > 5) // Significant change\n        {\n            string action = e.ChangePercent > 0 ? \"BUY\" : \"SELL\";\n            Console.WriteLine($\"{_name}: {action} {e.Symbol} - Price: {e.NewPrice:C}, Change: {e.ChangePercent:F2}%\");\n        }\n    }\n}</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Memory leaks:</strong> Not unsubscribing from events</li><li><strong>Null reference exceptions:</strong> Not checking for null before invoking delegates</li><li><strong>Exception handling:</strong> One handler's exception can prevent other handlers from executing</li><li><strong>Closure capture:</strong> Capturing loop variables incorrectly</li><li><strong>Thread safety:</strong> Race conditions when adding/removing event handlers</li></ul><h4>üèÜ Best Practices</h4><ul><li>Use null-conditional operator (?.) when invoking delegates</li><li>Always unsubscribe from events to prevent memory leaks</li><li>Use EventHandler<T> for custom events</li><li>Make event raising methods protected virtual for inheritance</li><li>Handle exceptions in multicast delegates appropriately</li><li>Consider using weak references for long-lived event sources</li><li>Use local functions instead of lambdas when recursion is needed</li><li>Prefer Action/Func over custom delegate types when possible</li></ul><h4>üöÄ Modern Delegate Features</h4><h5>Static Lambdas (C# 9+):</h5><pre><code>// Static lambdas don't capture state\nFunc<int, int> staticLambda = static x => x * 2;\n\n// Useful for performance when no capture is needed\nvar processor = numbers.Select(static x => x.ToString()).ToArray();</code></pre><h5>Method Group Conversions:</h5><pre><code>// Method group syntax (cleaner than lambdas)\nvar numbers = new[] { 1, 2, 3, 4, 5 };\nvar strings = numbers.Select(ToString).ToArray(); // Method group\nvar evens = numbers.Where(IsEven).ToArray();      // Method group\n\nstatic bool IsEven(int x) => x % 2 == 0;</code></pre></div>",
      "code": "public event EventHandler? Changed;\nvoid Raise()=> Changed?.Invoke(this, EventArgs.Empty);",
      "quiz": [ {"q":"Which delegate has no parameters and no return?","options":["Action","Func<int>"],"answer":0} ]
    },
    {
      "id": 21,
      "tier": 2,
      "title": "LINQ",
      "description": "Query vs method syntax, IEnumerable vs IQueryable, providers.",
      "concepts": ["Query Syntax", "Method Syntax", "IEnumerable<T> vs IQueryable<T>", "LINQ Providers"],
      "requirements": ["Compose a LINQ pipeline"],
      "theory": "<div class='theory-content'><h4>üîç LINQ - Language Integrated Query</h4><p>LINQ (Language Integrated Query) revolutionizes data querying in C# by providing a unified syntax for querying various data sources. It enables functional programming patterns and makes complex data operations readable and composable.</p><h4>üìù Query Syntax vs Method Syntax</h4><h5>Query Syntax (SQL-like):</h5><pre><code>public void DemonstrateQuerySyntax()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n    \n    // Basic query syntax\n    var evenNumbers = from n in numbers\n                     where n % 2 == 0\n                     select n;\n    \n    var squaredEvens = from n in numbers\n                      where n % 2 == 0\n                      select n * n;\n    \n    // Complex query with multiple clauses\n    var complexQuery = from n in numbers\n                      where n > 3\n                      orderby n descending\n                      select new { Number = n, Square = n * n };\n    \n    // Grouping in query syntax\n    var grouped = from n in numbers\n                 group n by n % 3 into g\n                 select new { Remainder = g.Key, Numbers = g.ToList() };\n    \n    // Join in query syntax\n    var names = new[] { \"Alice\", \"Bob\", \"Charlie\" };\n    var ages = new[] { 25, 30, 35 };\n    \n    var people = from name in names.Select((n, i) => new { Name = n, Index = i })\n                join age in ages.Select((a, i) => new { Age = a, Index = i })\n                on name.Index equals age.Index\n                select new { name.Name, age.Age };\n}</code></pre><h5>Method Syntax (Fluent API):</h5><pre><code>public void DemonstrateMethodSyntax()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n    \n    // Basic method chaining\n    var evenNumbers = numbers.Where(n => n % 2 == 0);\n    \n    var squaredEvens = numbers\n        .Where(n => n % 2 == 0)\n        .Select(n => n * n);\n    \n    // Complex method chaining\n    var complexQuery = numbers\n        .Where(n => n > 3)\n        .OrderByDescending(n => n)\n        .Select(n => new { Number = n, Square = n * n });\n    \n    // Grouping with method syntax\n    var grouped = numbers\n        .GroupBy(n => n % 3)\n        .Select(g => new { Remainder = g.Key, Numbers = g.ToList() });\n    \n    // Join with method syntax\n    var names = new[] { \"Alice\", \"Bob\", \"Charlie\" };\n    var ages = new[] { 25, 30, 35 };\n    \n    var people = names\n        .Select((name, index) => new { Name = name, Index = index })\n        .Join(ages.Select((age, index) => new { Age = age, Index = index }),\n              name => name.Index,\n              age => age.Index,\n              (name, age) => new { name.Name, age.Age });\n}</code></pre><h4>üîó Core LINQ Operators</h4><h5>Filtering and Projection:</h5><pre><code>public class LinqOperators\n{\n    public void FilteringAndProjection()\n    {\n        var students = new[]\n        {\n            new { Name = \"Alice\", Grade = 95, Subject = \"Math\" },\n            new { Name = \"Bob\", Grade = 87, Subject = \"Science\" },\n            new { Name = \"Charlie\", Grade = 92, Subject = \"Math\" },\n            new { Name = \"Diana\", Grade = 88, Subject = \"Science\" },\n            new { Name = \"Eve\", Grade = 96, Subject = \"Math\" }\n        };\n        \n        // Where - filtering\n        var mathStudents = students.Where(s => s.Subject == \"Math\");\n        var highGrades = students.Where(s => s.Grade >= 90);\n        \n        // Select - projection\n        var names = students.Select(s => s.Name);\n        var gradeInfo = students.Select(s => new { s.Name, LetterGrade = GetLetterGrade(s.Grade) });\n        \n        // SelectMany - flattening\n        var classes = new[]\n        {\n            new { ClassName = \"Math\", Students = new[] { \"Alice\", \"Charlie\" } },\n            new { ClassName = \"Science\", Students = new[] { \"Bob\", \"Diana\" } }\n        };\n        \n        var allStudents = classes.SelectMany(c => c.Students);\n        var studentWithClass = classes.SelectMany(c => c.Students, \n            (c, student) => new { Student = student, Class = c.ClassName });\n    }\n    \n    private string GetLetterGrade(int grade) => grade switch\n    {\n        >= 90 => \"A\",\n        >= 80 => \"B\",\n        >= 70 => \"C\",\n        >= 60 => \"D\",\n        _ => \"F\"\n    };\n}</code></pre><h5>Ordering and Grouping:</h5><pre><code>public void OrderingAndGrouping()\n{\n    var products = new[]\n    {\n        new { Name = \"Laptop\", Category = \"Electronics\", Price = 999.99m },\n        new { Name = \"Mouse\", Category = \"Electronics\", Price = 25.99m },\n        new { Name = \"Desk\", Category = \"Furniture\", Price = 199.99m },\n        new { Name = \"Chair\", Category = \"Furniture\", Price = 149.99m },\n        new { Name = \"Monitor\", Category = \"Electronics\", Price = 299.99m }\n    };\n    \n    // Ordering\n    var byPrice = products.OrderBy(p => p.Price);\n    var byPriceDesc = products.OrderByDescending(p => p.Price);\n    var multipleSort = products\n        .OrderBy(p => p.Category)\n        .ThenByDescending(p => p.Price);\n    \n    // Grouping\n    var byCategory = products.GroupBy(p => p.Category);\n    var categoryStats = products\n        .GroupBy(p => p.Category)\n        .Select(g => new\n        {\n            Category = g.Key,\n            Count = g.Count(),\n            AveragePrice = g.Average(p => p.Price),\n            TotalValue = g.Sum(p => p.Price)\n        });\n    \n    // Complex grouping\n    var priceRanges = products\n        .GroupBy(p => p.Price switch\n        {\n            < 50 => \"Budget\",\n            < 200 => \"Mid-range\",\n            _ => \"Premium\"\n        })\n        .ToDictionary(g => g.Key, g => g.ToList());\n}</code></pre><h5>Aggregation Operations:</h5><pre><code>public void AggregationOperations()\n{\n    var sales = new[]\n    {\n        new { Product = \"Laptop\", Quantity = 5, UnitPrice = 999.99m, Date = new DateTime(2024, 1, 15) },\n        new { Product = \"Mouse\", Quantity = 20, UnitPrice = 25.99m, Date = new DateTime(2024, 1, 16) },\n        new { Product = \"Laptop\", Quantity = 3, UnitPrice = 999.99m, Date = new DateTime(2024, 1, 17) },\n        new { Product = \"Monitor\", Quantity = 8, UnitPrice = 299.99m, Date = new DateTime(2024, 1, 18) }\n    };\n    \n    // Basic aggregations\n    var totalQuantity = sales.Sum(s => s.Quantity);\n    var averagePrice = sales.Average(s => s.UnitPrice);\n    var maxPrice = sales.Max(s => s.UnitPrice);\n    var minQuantity = sales.Min(s => s.Quantity);\n    var totalSales = sales.Count();\n    \n    // Conditional aggregations\n    var laptopSales = sales\n        .Where(s => s.Product == \"Laptop\")\n        .Sum(s => s.Quantity * s.UnitPrice);\n    \n    var expensiveItems = sales.Count(s => s.UnitPrice > 100);\n    \n    // Custom aggregation with Aggregate\n    var productSummary = sales\n        .GroupBy(s => s.Product)\n        .Select(g => g.Aggregate(\n            new { Product = g.Key, TotalQuantity = 0, TotalRevenue = 0m },\n            (acc, sale) => new\n            {\n                Product = acc.Product,\n                TotalQuantity = acc.TotalQuantity + sale.Quantity,\n                TotalRevenue = acc.TotalRevenue + (sale.Quantity * sale.UnitPrice)\n            }\n        ));\n}</code></pre><h4>üåê IEnumerable vs IQueryable</h4><h5>IEnumerable<T> - In-Memory Processing:</h5><pre><code>public class EnumerableExample\n{\n    public void InMemoryLinq()\n    {\n        var numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n        \n        // IEnumerable<int> - executes locally\n        IEnumerable<int> query = numbers\n            .Where(n => n % 2 == 0)     // Executes in C#\n            .Select(n => n * n);        // Executes in C#\n        \n        // Deferred execution - query not executed until enumerated\n        Console.WriteLine(\"Query created, not executed yet\");\n        \n        // Execution happens here\n        foreach (var result in query)\n        {\n            Console.WriteLine(result); // 4, 16, 36, 64, 100\n        }\n        \n        // Multiple enumeration causes re-execution\n        var list1 = query.ToList(); // Executes query\n        var list2 = query.ToList(); // Executes query again!\n        \n        // Force immediate execution\n        var materializedQuery = numbers\n            .Where(n => n % 2 == 0)\n            .Select(n => n * n)\n            .ToList(); // Immediate execution\n    }\n}</code></pre><h5>IQueryable<T> - Expression Trees:</h5><pre><code>public class QueryableExample\n{\n    public void ExpressionTreeLinq()\n    {\n        // Simulating Entity Framework context\n        using var context = new MyDbContext();\n        \n        // IQueryable<Customer> - builds expression tree\n        IQueryable<Customer> query = context.Customers\n            .Where(c => c.Age > 18)           // Translated to SQL WHERE\n            .OrderBy(c => c.LastName)         // Translated to SQL ORDER BY\n            .Select(c => new { c.Id, c.Name }); // Translated to SQL SELECT\n        \n        // Expression tree is built, no database hit yet\n        Console.WriteLine(\"Query built as expression tree\");\n        \n        // Database execution happens here\n        var results = query.ToList(); // Generates and executes SQL\n        \n        // Inspect the expression tree\n        Console.WriteLine($\"SQL: {query}\");\n    }\n    \n    public void QueryableVsEnumerable()\n    {\n        using var context = new MyDbContext();\n        \n        // ‚ùå Bad: Brings all data to memory first\n        var badQuery = context.Customers\n            .ToList()                    // Database hit - all customers loaded\n            .Where(c => c.Age > 18)      // C# filtering in memory\n            .OrderBy(c => c.LastName);   // C# sorting in memory\n        \n        // ‚úÖ Good: Database does the filtering\n        var goodQuery = context.Customers\n            .Where(c => c.Age > 18)      // SQL WHERE clause\n            .OrderBy(c => c.LastName)    // SQL ORDER BY clause\n            .ToList();                   // Database hit with filtered results\n        \n        // ‚úÖ Even better: Only select what you need\n        var bestQuery = context.Customers\n            .Where(c => c.Age > 18)\n            .OrderBy(c => c.LastName)\n            .Select(c => new { c.Id, c.Name }) // SQL SELECT specific columns\n            .ToList();\n    }\n}</code></pre><h4>üéØ Advanced LINQ Techniques</h4><h5>Custom LINQ Extension Methods:</h5><pre><code>public static class CustomLinqExtensions\n{\n    // Extension method for chunking\n    public static IEnumerable<IEnumerable<T>> Chunk<T>(this IEnumerable<T> source, int size)\n    {\n        var chunk = new List<T>(size);\n        \n        foreach (var item in source)\n        {\n            chunk.Add(item);\n            \n            if (chunk.Count == size)\n            {\n                yield return chunk;\n                chunk = new List<T>(size);\n            }\n        }\n        \n        if (chunk.Count > 0)\n            yield return chunk;\n    }\n    \n    // Extension method for conditional filtering\n    public static IEnumerable<T> WhereIf<T>(this IEnumerable<T> source, \n        bool condition, Func<T, bool> predicate)\n    {\n        return condition ? source.Where(predicate) : source;\n    }\n    \n    // Extension method for safe Max/Min\n    public static T? SafeMax<T>(this IEnumerable<T> source) where T : IComparable<T>\n    {\n        using var enumerator = source.GetEnumerator();\n        if (!enumerator.MoveNext())\n            return default(T);\n        \n        var max = enumerator.Current;\n        while (enumerator.MoveNext())\n        {\n            if (enumerator.Current.CompareTo(max) > 0)\n                max = enumerator.Current;\n        }\n        \n        return max;\n    }\n    \n    // Extension method for pagination\n    public static IEnumerable<T> Page<T>(this IEnumerable<T> source, int pageNumber, int pageSize)\n    {\n        return source.Skip((pageNumber - 1) * pageSize).Take(pageSize);\n    }\n}\n\n// Usage\npublic void UsingCustomExtensions()\n{\n    var numbers = Enumerable.Range(1, 100);\n    \n    // Chunking\n    var chunks = numbers.Chunk(10); // Groups of 10\n    \n    // Conditional filtering\n    bool filterEnabled = true;\n    var filtered = numbers.WhereIf(filterEnabled, n => n % 2 == 0);\n    \n    // Safe aggregation\n    var emptyList = new List<int>();\n    var safeMax = emptyList.SafeMax(); // Returns null instead of throwing\n    \n    // Pagination\n    var page2 = numbers.Page(2, 10); // Items 11-20\n}</code></pre><h5>LINQ Performance Optimization:</h5><pre><code>public class LinqPerformance\n{\n    public void PerformanceConsiderations()\n    {\n        var largeList = Enumerable.Range(1, 1_000_000).ToList();\n        \n        // ‚ùå Multiple enumerations\n        var query = largeList.Where(x => x % 2 == 0).Select(x => x * x);\n        var count = query.Count();     // Enumeration 1\n        var sum = query.Sum();         // Enumeration 2\n        var max = query.Max();         // Enumeration 3\n        \n        // ‚úÖ Single enumeration with materialization\n        var materializedQuery = largeList\n            .Where(x => x % 2 == 0)\n            .Select(x => x * x)\n            .ToList(); // Single enumeration\n        \n        var count2 = materializedQuery.Count;\n        var sum2 = materializedQuery.Sum();\n        var max2 = materializedQuery.Max();\n        \n        // ‚úÖ Even better: combine operations\n        var stats = largeList\n            .Where(x => x % 2 == 0)\n            .Select(x => x * x)\n            .Aggregate(\n                new { Count = 0, Sum = 0L, Max = 0 },\n                (acc, x) => new\n                {\n                    Count = acc.Count + 1,\n                    Sum = acc.Sum + x,\n                    Max = Math.Max(acc.Max, x)\n                }\n            );\n    }\n    \n    // Parallel LINQ for CPU-intensive operations\n    public void ParallelLinq()\n    {\n        var numbers = Enumerable.Range(1, 10_000_000);\n        \n        // Sequential LINQ\n        var sequentialResult = numbers\n            .Where(n => IsPrime(n))\n            .ToList();\n        \n        // Parallel LINQ\n        var parallelResult = numbers\n            .AsParallel()\n            .Where(n => IsPrime(n))\n            .ToList();\n        \n        // Ordered parallel processing\n        var orderedParallel = numbers\n            .AsParallel()\n            .AsOrdered()\n            .Where(n => IsPrime(n))\n            .Take(100)\n            .ToList();\n    }\n    \n    private bool IsPrime(int number)\n    {\n        if (number < 2) return false;\n        for (int i = 2; i <= Math.Sqrt(number); i++)\n        {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n}</code></pre><h4>üîß LINQ Providers</h4><h5>Entity Framework LINQ Provider:</h5><pre><code>public class EntityFrameworkLinq\n{\n    public async Task EfLinqExamples(MyDbContext context)\n    {\n        // Basic querying\n        var customers = await context.Customers\n            .Where(c => c.City == \"Seattle\")\n            .ToListAsync();\n        \n        // Complex joins\n        var customerOrders = await context.Customers\n            .Join(context.Orders,\n                  customer => customer.Id,\n                  order => order.CustomerId,\n                  (customer, order) => new { customer.Name, order.Total })\n            .Where(co => co.Total > 100)\n            .ToListAsync();\n        \n        // Group by with aggregation\n        var salesByCity = await context.Customers\n            .GroupBy(c => c.City)\n            .Select(g => new\n            {\n                City = g.Key,\n                CustomerCount = g.Count(),\n                TotalSales = g.SelectMany(c => c.Orders).Sum(o => o.Total)\n            })\n            .ToListAsync();\n    }\n}</code></pre><h4>‚ö†Ô∏è Common Pitfalls</h4><ul><li><strong>Multiple enumeration:</strong> Causing queries to execute multiple times</li><li><strong>N+1 queries:</strong> Loading related data in loops with EF</li><li><strong>Memory issues:</strong> Loading large datasets into memory unnecessarily</li><li><strong>Incorrect IQueryable usage:</strong> Breaking query translation with local methods</li><li><strong>Closure capture:</strong> Accidentally capturing variables in lambdas</li></ul><h4>üèÜ Best Practices</h4><ul><li>Materialize queries when you need to enumerate multiple times</li><li>Use ToList(), ToArray(), or Count() to force immediate execution</li><li>Prefer method syntax for simple operations, query syntax for complex joins</li><li>Be aware of deferred execution and when queries actually run</li><li>Use AsParallel() for CPU-intensive operations on large datasets</li><li>Profile your LINQ queries, especially with EF</li><li>Use projection (Select) to fetch only needed data</li><li>Understand the difference between IEnumerable and IQueryable</li></ul><h4>üöÄ Modern LINQ Features</h4><h5>Pattern Matching in LINQ (C# 9+):</h5><pre><code>var people = GetPeople();\n\n// Pattern matching in Where clauses\nvar adults = people.Where(p => p.Age is >= 18 and <= 65);\nvar seniorManagers = people.Where(p => p is { Age: > 50, Position: \"Manager\" });</code></pre><h5>Index and Range in LINQ:</h5><pre><code>var numbers = Enumerable.Range(1, 100).ToArray();\n\n// Using ranges\nvar firstHalf = numbers[..50];\nvar lastTen = numbers[^10..];\nvar middle = numbers[25..75];</code></pre></div>",
      "code": "var q = nums.Where(n=>n%2==0).Select(n=>n*n);",
      "quiz": [ {"q":"Which defers execution until enumerated?","options":["IEnumerable","List"],"answer":0} ]
    },
    {
      "id": 22,
      "tier": 2,
      "title": "Asynchronous Programming",
      "description": "async/await, Tasks, Parallel.ForEach, cancellation.",
      "concepts": ["async/await", "Task", "Parallel.ForEach", "CancellationToken"],
      "requirements": ["Await an async method", "Cancel work cooperatively"],
      "theory": "<div class='theory-content'><h4>‚ö° Asynchronous Programming - Non-Blocking Code Execution</h4><p>Asynchronous programming allows your application to remain responsive while performing long-running operations. Understanding async/await, Tasks, and cancellation is crucial for modern C# development.</p><h4>üéØ Tasks - Representing Asynchronous Operations</h4><h5>Basic Task Usage:</h5><pre><code>public class TaskBasics\n{\n    // Task without return value\n    public async Task DoWorkAsync()\n    {\n        await Task.Delay(1000); // Simulate work\n        Console.WriteLine(\"Work completed\");\n    }\n    \n    // Task with return value\n    public async Task<int> CalculateAsync(int a, int b)\n    {\n        await Task.Delay(500); // Simulate calculation time\n        return a + b;\n    }\n    \n    // Creating tasks manually\n    public void ManualTaskCreation()\n    {\n        // Task.Run for CPU-bound work\n        Task<int> task1 = Task.Run(() =>\n        {\n            Thread.Sleep(1000); // Simulate CPU work\n            return 42;\n        });\n        \n        // Task.FromResult for already computed values\n        Task<string> task2 = Task.FromResult(\"Immediate result\");\n        \n        // Task.CompletedTask for void operations\n        Task task3 = Task.CompletedTask;\n        \n        // TaskCompletionSource for custom async operations\n        var tcs = new TaskCompletionSource<bool>();\n        Task<bool> task4 = tcs.Task;\n        \n        // Complete the task later\n        Task.Run(async () =>\n        {\n            await Task.Delay(2000);\n            tcs.SetResult(true);\n        });\n    }\n}</code></pre><h5>Task Continuation and Composition:</h5><pre><code>public class TaskComposition\n{\n    public async Task DemonstrateTaskContinuation()\n    {\n        // Sequential execution\n        int step1 = await Step1Async();\n        string step2 = await Step2Async(step1);\n        bool step3 = await Step3Async(step2);\n        \n        Console.WriteLine($\"Final result: {step3}\");\n    }\n    \n    public async Task DemonstrateParallelExecution()\n    {\n        // Parallel execution\n        Task<int> task1 = Step1Async();\n        Task<string> task2 = GetDataAsync();\n        Task<bool> task3 = ValidateAsync();\n        \n        // Wait for all tasks to complete\n        await Task.WhenAll(task1, task2, task3);\n        \n        // Access results\n        int result1 = await task1;  // Already completed\n        string result2 = await task2;  // Already completed\n        bool result3 = await task3;  // Already completed\n        \n        // Or use Task.WhenAll with results\n        var results = await Task.WhenAll(\n            Step1Async(),\n            GetStringAsync(),\n            GetBoolAsync()\n        );\n    }\n    \n    public async Task DemonstrateTaskWhenAny()\n    {\n        var tasks = new[]\n        {\n            DownloadFromServer1Async(),\n            DownloadFromServer2Async(),\n            DownloadFromServer3Async()\n        };\n        \n        // Wait for the first task to complete\n        Task<string> completedTask = await Task.WhenAny(tasks);\n        string result = await completedTask;\n        \n        Console.WriteLine($\"First result: {result}\");\n        \n        // Cancel remaining tasks if needed\n        // (implementation depends on cancellation support)\n    }\n    \n    private async Task<int> Step1Async() => await Task.FromResult(42);\n    private async Task<string> Step2Async(int input) => await Task.FromResult($\"Processed {input}\");\n    private async Task<bool> Step3Async(string input) => await Task.FromResult(!string.IsNullOrEmpty(input));\n    private async Task<string> GetDataAsync() => await Task.FromResult(\"Data\");\n    private async Task<bool> ValidateAsync() => await Task.FromResult(true);\n    private async Task<string> GetStringAsync() => await Task.FromResult(\"String\");\n    private async Task<bool> GetBoolAsync() => await Task.FromResult(true);\n    private async Task<string> DownloadFromServer1Async() => await Task.Delay(1000).ContinueWith(_ => \"Server1\");\n    private async Task<string> DownloadFromServer2Async() => await Task.Delay(2000).ContinueWith(_ => \"Server2\");\n    private async Task<string> DownloadFromServer3Async() => await Task.Delay(500).ContinueWith(_ => \"Server3\");\n}</code></pre><h4>üîÑ Async/Await - Simplified Asynchronous Programming</h4><h5>Async Method Patterns:</h5><pre><code>public class AsyncPatterns\n{\n    // ‚úÖ Good: Async method returning Task\n    public async Task ProcessDataAsync()\n    {\n        var data = await LoadDataAsync();\n        var processed = await ProcessAsync(data);\n        await SaveAsync(processed);\n    }\n    \n    // ‚úÖ Good: Async method returning Task<T>\n    public async Task<string> GetUserNameAsync(int userId)\n    {\n        var user = await GetUserAsync(userId);\n        return user?.Name ?? \"Unknown\";\n    }\n    \n    // ‚ö†Ô∏è Be careful: async void should only be used for event handlers\n    public async void Button_Click(object sender, EventArgs e)\n    {\n        try\n        {\n            await ProcessButtonClickAsync();\n        }\n        catch (Exception ex)\n        {\n            // Handle exception - can't be caught by caller!\n            LogError(ex);\n        }\n    }\n    \n    // ‚úÖ Better: Wrap async void in async Task for testability\n    private async Task ProcessButtonClickAsync()\n    {\n        await DoSomethingAsync();\n    }\n    \n    // ConfigureAwait usage\n    public async Task<string> LibraryMethodAsync()\n    {\n        // In library code, use ConfigureAwait(false) to avoid deadlocks\n        var result = await SomeOperationAsync().ConfigureAwait(false);\n        return result.ToUpper();\n    }\n    \n    // Exception handling in async methods\n    public async Task<string> SafeOperationAsync()\n    {\n        try\n        {\n            return await RiskyOperationAsync();\n        }\n        catch (HttpRequestException ex)\n        {\n            Console.WriteLine($\"HTTP error: {ex.Message}\");\n            return \"Default value\";\n        }\n        catch (TaskCanceledException ex)\n        {\n            Console.WriteLine(\"Operation was cancelled\");\n            throw; // Re-throw cancellation\n        }\n        finally\n        {\n            // Cleanup code\n            await CleanupAsync();\n        }\n    }\n    \n    private async Task<object> LoadDataAsync() => await Task.FromResult(new object());\n    private async Task<object> ProcessAsync(object data) => await Task.FromResult(data);\n    private async Task SaveAsync(object data) => await Task.CompletedTask;\n    private async Task<object> GetUserAsync(int userId) => await Task.FromResult(new { Name = \"User\" });\n    private async Task DoSomethingAsync() => await Task.Delay(100);\n    private async Task<string> SomeOperationAsync() => await Task.FromResult(\"result\");\n    private async Task<string> RiskyOperationAsync() => await Task.FromResult(\"result\");\n    private async Task CleanupAsync() => await Task.CompletedTask;\n    private void LogError(Exception ex) => Console.WriteLine(ex.Message);\n}</code></pre><h4>üõë Cancellation - Cooperative Cancellation</h4><h5>CancellationToken Usage:</h5><pre><code>public class CancellationExamples\n{\n    public async Task ProcessWithCancellationAsync(CancellationToken cancellationToken = default)\n    {\n        for (int i = 0; i < 100; i++)\n        {\n            // Check for cancellation periodically\n            cancellationToken.ThrowIfCancellationRequested();\n            \n            await ProcessItemAsync(i, cancellationToken);\n            \n            // Alternative: check cancellation before expensive operations\n            if (cancellationToken.IsCancellationRequested)\n            {\n                Console.WriteLine(\"Cancellation requested, cleaning up...\");\n                await CleanupAsync();\n                cancellationToken.ThrowIfCancellationRequested();\n            }\n        }\n    }\n    \n    public async Task<string> DownloadWithTimeoutAsync(string url, TimeSpan timeout)\n    {\n        using var cts = new CancellationTokenSource(timeout);\n        \n        try\n        {\n            return await DownloadAsync(url, cts.Token);\n        }\n        catch (OperationCanceledException) when (cts.Token.IsCancellationRequested)\n        {\n            throw new TimeoutException($\"Download timed out after {timeout.TotalSeconds} seconds\");\n        }\n    }\n    \n    public async Task<string> DownloadWithCombinedCancellationAsync(\n        string url, \n        CancellationToken userCancellation = default)\n    {\n        // Combine user cancellation with timeout\n        using var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(30));\n        using var combinedCts = CancellationTokenSource.CreateLinkedTokenSource(\n            userCancellation, timeoutCts.Token);\n        \n        return await DownloadAsync(url, combinedCts.Token);\n    }\n    \n    // Cancellation callbacks\n    public async Task ProcessWithCallbackAsync(CancellationToken cancellationToken)\n    {\n        // Register callback for cancellation\n        using var registration = cancellationToken.Register(() =>\n        {\n            Console.WriteLine(\"Cancellation requested - performing immediate cleanup\");\n            // Immediate cleanup operations (synchronous only)\n        });\n        \n        await LongRunningOperationAsync(cancellationToken);\n    }\n    \n    private async Task ProcessItemAsync(int item, CancellationToken cancellationToken)\n    {\n        await Task.Delay(100, cancellationToken); // Task.Delay respects cancellation\n    }\n    \n    private async Task<string> DownloadAsync(string url, CancellationToken cancellationToken)\n    {\n        using var httpClient = new HttpClient();\n        var response = await httpClient.GetStringAsync(url, cancellationToken);\n        return response;\n    }\n    \n    private async Task LongRunningOperationAsync(CancellationToken cancellationToken)\n    {\n        await Task.Delay(5000, cancellationToken);\n    }\n    \n    private async Task CleanupAsync() => await Task.Delay(10);\n}</code></pre><h4>üîÑ Parallel Programming</h4><h5>Parallel.ForEach and PLINQ:</h5><pre><code>public class ParallelProgramming\n{\n    public async Task ParallelProcessingExamples()\n    {\n        var items = Enumerable.Range(1, 1000).ToList();\n        \n        // Parallel.ForEach for CPU-bound work\n        Parallel.ForEach(items, item =>\n        {\n            ProcessItemCpuBound(item);\n        });\n        \n        // Parallel.ForEach with options\n        var parallelOptions = new ParallelOptions\n        {\n            MaxDegreeOfParallelism = Environment.ProcessorCount,\n            CancellationToken = CancellationToken.None\n        };\n        \n        Parallel.ForEach(items, parallelOptions, item =>\n        {\n            ProcessItemCpuBound(item);\n        });\n        \n        // PLINQ for parallel LINQ operations\n        var results = items\n            .AsParallel()\n            .Where(item => item % 2 == 0)\n            .Select(ProcessItemCpuBound)\n            .ToList();\n        \n        // Parallel async operations (I/O bound)\n        await ProcessItemsInParallelAsync(items);\n    }\n    \n    public async Task ProcessItemsInParallelAsync(IEnumerable<int> items)\n    {\n        // ‚úÖ Good: Parallel execution of async operations\n        var tasks = items.Select(async item =>\n        {\n            return await ProcessItemAsync(item);\n        });\n        \n        var results = await Task.WhenAll(tasks);\n        \n        // ‚úÖ Better: With concurrency control\n        await ProcessWithConcurrencyControlAsync(items, maxConcurrency: 10);\n    }\n    \n    public async Task ProcessWithConcurrencyControlAsync(\n        IEnumerable<int> items, \n        int maxConcurrency)\n    {\n        using var semaphore = new SemaphoreSlim(maxConcurrency);\n        \n        var tasks = items.Select(async item =>\n        {\n            await semaphore.WaitAsync();\n            try\n            {\n                return await ProcessItemAsync(item);\n            }\n            finally\n            {\n                semaphore.Release();\n            }\n        });\n        \n        var results = await Task.WhenAll(tasks);\n    }\n    \n    private int ProcessItemCpuBound(int item)\n    {\n        // Simulate CPU-intensive work\n        Thread.Sleep(10);\n        return item * item;\n    }\n    \n    private async Task<int> ProcessItemAsync(int item)\n    {\n        // Simulate I/O-bound work\n        await Task.Delay(10);\n        return item * item;\n    }\n}</code></pre><h4>üé≠ Advanced Async Patterns</h4><h5>AsyncEnumerable (IAsyncEnumerable):</h5><pre><code>public class AsyncEnumerableExamples\n{\n    // Async enumerable for streaming data\n    public async IAsyncEnumerable<string> ReadLinesAsync(\n        string filePath,\n        [EnumeratorCancellation] CancellationToken cancellationToken = default)\n    {\n        using var reader = new StreamReader(filePath);\n        \n        string? line;\n        while ((line = await reader.ReadLineAsync()) != null)\n        {\n            cancellationToken.ThrowIfCancellationRequested();\n            yield return line;\n        }\n    }\n    \n    // Consuming async enumerable\n    public async Task ProcessFileAsync(string filePath)\n    {\n        await foreach (var line in ReadLinesAsync(filePath))\n        {\n            await ProcessLineAsync(line);\n        }\n    }\n    \n    // Async enumerable with pagination\n    public async IAsyncEnumerable<T> GetPagedDataAsync<T>(\n        Func<int, int, Task<IEnumerable<T>>> dataSource,\n        int pageSize = 100,\n        [EnumeratorCancellation] CancellationToken cancellationToken = default)\n    {\n        int page = 0;\n        IEnumerable<T> batch;\n        \n        do\n        {\n            batch = await dataSource(page * pageSize, pageSize);\n            \n            foreach (var item in batch)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                yield return item;\n            }\n            \n            page++;\n        } while (batch.Any());\n    }\n    \n    private async Task ProcessLineAsync(string line)\n    {\n        await Task.Delay(1); // Simulate processing\n    }\n}</code></pre><h5>Async Lazy Initialization:</h5><pre><code>public class AsyncLazyExamples\n{\n    private readonly AsyncLazy<string> _expensiveResource;\n    \n    public AsyncLazyExamples()\n    {\n        _expensiveResource = new AsyncLazy<string>(async () =>\n        {\n            // Expensive initialization\n            await Task.Delay(1000);\n            return \"Expensive resource loaded\";\n        });\n    }\n    \n    public async Task<string> GetResourceAsync()\n    {\n        // Multiple calls will only initialize once\n        return await _expensiveResource;\n    }\n}\n\n// Simple AsyncLazy implementation\npublic class AsyncLazy<T>\n{\n    private readonly Lazy<Task<T>> _lazy;\n    \n    public AsyncLazy(Func<Task<T>> factory)\n    {\n        _lazy = new Lazy<Task<T>>(factory);\n    }\n    \n    public TaskAwaiter<T> GetAwaiter() => _lazy.Value.GetAwaiter();\n    \n    public Task<T> GetTask() => _lazy.Value;\n}</code></pre><h4>‚ö†Ô∏è Common Async Pitfalls</h4><h5>Deadlock Prevention:</h5><pre><code>public class AsyncPitfalls\n{\n    // ‚ùå This can cause deadlocks in synchronous contexts\n    public string BadAsyncCall()\n    {\n        return GetDataAsync().Result; // Blocking on async - can deadlock!\n    }\n    \n    // ‚ùå This can also cause deadlocks\n    public string AnotherBadAsyncCall()\n    {\n        return GetDataAsync().GetAwaiter().GetResult(); // Still blocking!\n    }\n    \n    // ‚úÖ Good: Async all the way\n    public async Task<string> GoodAsyncCall()\n    {\n        return await GetDataAsync();\n    }\n    \n    // ‚úÖ Alternative: Use ConfigureAwait(false) in library code\n    public string LibraryMethod()\n    {\n        return GetDataWithConfigureAwaitAsync().GetAwaiter().GetResult();\n    }\n    \n    private async Task<string> GetDataWithConfigureAwaitAsync()\n    {\n        var result = await SomeAsyncOperation().ConfigureAwait(false);\n        return result;\n    }\n    \n    // ‚ùå Fire and forget without error handling\n    public void BadFireAndForget()\n    {\n        DoSomethingAsync(); // Exceptions will be lost!\n    }\n    \n    // ‚úÖ Proper fire and forget\n    public void GoodFireAndForget()\n    {\n        _ = DoSomethingAsync().ContinueWith(task =>\n        {\n            if (task.IsFaulted)\n            {\n                // Log the exception\n                Console.WriteLine($\"Background task failed: {task.Exception}\");\n            }\n        }, TaskContinuationOptions.OnlyOnFaulted);\n    }\n    \n    private async Task<string> GetDataAsync() => await Task.FromResult(\"data\");\n    private async Task<string> SomeAsyncOperation() => await Task.FromResult(\"result\");\n    private async Task DoSomethingAsync() => await Task.Delay(100);\n}</code></pre><h4>üèÜ Best Practices</h4><ul><li>Use async/await instead of Task.Result or Task.Wait()</li><li>Avoid async void except for event handlers</li><li>Use ConfigureAwait(false) in library code</li><li>Don't mix blocking and async code</li><li>Use CancellationToken for long-running operations</li><li>Handle exceptions properly in async methods</li><li>Use Task.WhenAll for parallel operations</li><li>Consider using SemaphoreSlim for concurrency control</li><li>Use IAsyncEnumerable for streaming scenarios</li><li>Profile async code for performance bottlenecks</li></ul><h4>üöÄ Modern Async Features</h4><h5>ValueTask for High-Performance Scenarios:</h5><pre><code>public class ValueTaskExamples\n{\n    private readonly ConcurrentDictionary<string, string> _cache = new();\n    \n    // ValueTask for potentially synchronous operations\n    public ValueTask<string> GetCachedDataAsync(string key)\n    {\n        if (_cache.TryGetValue(key, out var value))\n        {\n            return new ValueTask<string>(value); // Synchronous path\n        }\n        \n        return LoadDataAsync(key); // Asynchronous path\n    }\n    \n    private async Task<string> LoadDataAsync(string key)\n    {\n        await Task.Delay(100); // Simulate loading\n        var value = $\"Data for {key}\";\n        _cache[key] = value;\n        return value;\n    }\n}</code></pre></div>",
      "code": "async Task<int> GetAsync(){ await Task.Delay(10); return 42; }",
      "quiz": [ {"q":"Does async void belong in library code?","options":["Yes","No"],"answer":1} ]
    },
    {
      "id": 23,
      "tier": 2,
      "title": "ADO.NET",
      "description": "Connected/disconnected, transactions.",
      "concepts": ["SqlConnection", "SqlCommand", "DataTable", "Transactions"],
      "requirements": ["Open a connection and execute a command"],
      "theory": "<div class='theory-content'><h4>üóÑÔ∏è ADO.NET - Low-Level Data Access Framework</h4><p>ADO.NET provides the foundation for data access in .NET applications. It offers both connected and disconnected models for interacting with databases, giving you full control over performance and resource management.</p><h4>üîå Connected Model - Real-Time Database Interaction</h4><h5>Basic Connection and Command Execution:</h5><pre><code>public class ConnectedDataAccess\n{\n    private readonly string _connectionString;\n    \n    public ConnectedDataAccess(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    // Execute scalar query (single value)\n    public async Task<T?> ExecuteScalarAsync<T>(string sql, params SqlParameter[] parameters)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        using var command = new SqlCommand(sql, connection);\n        \n        if (parameters.Length > 0)\n            command.Parameters.AddRange(parameters);\n        \n        await connection.OpenAsync();\n        var result = await command.ExecuteScalarAsync();\n        \n        return result is DBNull || result == null ? default(T) : (T)result;\n    }\n    \n    // Execute non-query (INSERT, UPDATE, DELETE)\n    public async Task<int> ExecuteNonQueryAsync(string sql, params SqlParameter[] parameters)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        using var command = new SqlCommand(sql, connection);\n        \n        if (parameters.Length > 0)\n            command.Parameters.AddRange(parameters);\n        \n        await connection.OpenAsync();\n        return await command.ExecuteNonQueryAsync();\n    }\n    \n    // Execute reader for multiple rows\n    public async Task<List<T>> ExecuteReaderAsync<T>(string sql, Func<SqlDataReader, T> mapper, params SqlParameter[] parameters)\n    {\n        var results = new List<T>();\n        \n        using var connection = new SqlConnection(_connectionString);\n        using var command = new SqlCommand(sql, connection);\n        \n        if (parameters.Length > 0)\n            command.Parameters.AddRange(parameters);\n        \n        await connection.OpenAsync();\n        using var reader = await command.ExecuteReaderAsync();\n        \n        while (await reader.ReadAsync())\n        {\n            results.Add(mapper(reader));\n        }\n        \n        return results;\n    }\n    \n    // Streaming data with IAsyncEnumerable\n    public async IAsyncEnumerable<T> ExecuteReaderStreamAsync<T>(\n        string sql, \n        Func<SqlDataReader, T> mapper, \n        [EnumeratorCancellation] CancellationToken cancellationToken = default, \n        params SqlParameter[] parameters)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        using var command = new SqlCommand(sql, connection);\n        \n        if (parameters.Length > 0)\n            command.Parameters.AddRange(parameters);\n        \n        await connection.OpenAsync(cancellationToken);\n        using var reader = await command.ExecuteReaderAsync(cancellationToken);\n        \n        while (await reader.ReadAsync(cancellationToken))\n        {\n            cancellationToken.ThrowIfCancellationRequested();\n            yield return mapper(reader);\n        }\n    }\n}</code></pre><h5>Advanced Connection Management:</h5><pre><code>public class ConnectionManagement\n{\n    public static void DemonstrateConnectionStates()\n    {\n        var connection = new SqlConnection(\"connection_string\");\n        \n        Console.WriteLine($\"Initial state: {connection.State}\");     // Closed\n        \n        connection.Open();\n        Console.WriteLine($\"After Open(): {connection.State}\");      // Open\n        \n        // Connection can be in various states:\n        // Closed, Open, Connecting, Executing, Fetching, Broken\n        \n        connection.Close();\n        Console.WriteLine($\"After Close(): {connection.State}\");     // Closed\n    }\n    \n    // Connection pooling best practices\n    public static async Task DemonstrateConnectionPooling()\n    {\n        var connectionString = \"Server=localhost;Database=TestDB;Integrated Security=true;Pooling=true;Max Pool Size=100;Min Pool Size=5;\";\n        \n        // ‚úÖ Good: Use 'using' statement - automatically returns connection to pool\n        using (var connection = new SqlConnection(connectionString))\n        {\n            await connection.OpenAsync();\n            // Do work...\n        } // Connection automatically closed and returned to pool\n        \n        // ‚ùå Bad: Manual connection management\n        var connection2 = new SqlConnection(connectionString);\n        await connection2.OpenAsync();\n        // Forgot to close - connection leak!\n    }\n    \n    // Connection string builders for security\n    public static string BuildSecureConnectionString()\n    {\n        var builder = new SqlConnectionStringBuilder\n        {\n            DataSource = \"localhost\",\n            InitialCatalog = \"TestDB\",\n            IntegratedSecurity = true,\n            Pooling = true,\n            MaxPoolSize = 100,\n            MinPoolSize = 5,\n            ConnectionTimeout = 30,\n            CommandTimeout = 120,\n            Encrypt = true, // Force encryption\n            TrustServerCertificate = false // Validate certificates\n        };\n        \n        return builder.ConnectionString;\n    }\n}</code></pre><h4>üìä Disconnected Model - DataTable and DataSet</h4><h5>Working with DataTable:</h5><pre><code>public class DisconnectedDataAccess\n{\n    private readonly string _connectionString;\n    \n    public DisconnectedDataAccess(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    // Load data into DataTable\n    public async Task<DataTable> GetDataTableAsync(string sql, params SqlParameter[] parameters)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        using var command = new SqlCommand(sql, connection);\n        \n        if (parameters.Length > 0)\n            command.Parameters.AddRange(parameters);\n        \n        using var adapter = new SqlDataAdapter(command);\n        var dataTable = new DataTable();\n        \n        await Task.Run(() => adapter.Fill(dataTable));\n        \n        return dataTable;\n    }\n    \n    // Update data using DataTable\n    public async Task<int> UpdateDataTableAsync(DataTable dataTable, string selectCommand)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        using var adapter = new SqlDataAdapter(selectCommand, connection);\n        \n        // Auto-generate commands\n        using var commandBuilder = new SqlCommandBuilder(adapter);\n        \n        return await Task.Run(() => adapter.Update(dataTable));\n    }\n    \n    // Demonstrate DataTable operations\n    public void DemonstrateDataTableOperations()\n    {\n        var dataTable = new DataTable(\"Users\");\n        \n        // Define columns\n        dataTable.Columns.Add(\"Id\", typeof(int));\n        dataTable.Columns.Add(\"Name\", typeof(string));\n        dataTable.Columns.Add(\"Email\", typeof(string));\n        dataTable.Columns.Add(\"CreatedDate\", typeof(DateTime));\n        \n        // Set primary key\n        dataTable.PrimaryKey = new[] { dataTable.Columns[\"Id\"]! };\n        \n        // Add rows\n        var row1 = dataTable.NewRow();\n        row1[\"Id\"] = 1;\n        row1[\"Name\"] = \"John Doe\";\n        row1[\"Email\"] = \"john@example.com\";\n        row1[\"CreatedDate\"] = DateTime.Now;\n        dataTable.Rows.Add(row1);\n        \n        // Add row using object array\n        dataTable.Rows.Add(2, \"Jane Smith\", \"jane@example.com\", DateTime.Now);\n        \n        // Query data\n        var filteredRows = dataTable.Select(\"Name LIKE 'J%'\");\n        var sortedView = dataTable.DefaultView;\n        sortedView.Sort = \"Name ASC\";\n        \n        // Track changes\n        dataTable.AcceptChanges(); // Mark all changes as accepted\n        \n        // Modify data\n        var userRow = dataTable.Rows.Find(1); // Find by primary key\n        if (userRow != null)\n        {\n            userRow[\"Email\"] = \"newemail@example.com\";\n            Console.WriteLine($\"Row state: {userRow.RowState}\"); // Modified\n        }\n        \n        // Get changes\n        var changedTable = dataTable.GetChanges(DataRowState.Modified);\n        if (changedTable != null)\n        {\n            Console.WriteLine($\"Modified rows: {changedTable.Rows.Count}\");\n        }\n    }\n}</code></pre><h5>Working with DataSet:</h5><pre><code>public class DataSetOperations\n{\n    public void DemonstrateDataSet()\n    {\n        var dataSet = new DataSet(\"CompanyData\");\n        \n        // Create related tables\n        var usersTable = CreateUsersTable();\n        var ordersTable = CreateOrdersTable();\n        \n        dataSet.Tables.Add(usersTable);\n        dataSet.Tables.Add(ordersTable);\n        \n        // Create relationship\n        var relation = new DataRelation(\n            \"UserOrders\",\n            usersTable.Columns[\"Id\"]!,\n            ordersTable.Columns[\"UserId\"]!);\n        \n        dataSet.Relations.Add(relation);\n        \n        // Navigate relationships\n        foreach (DataRow userRow in usersTable.Rows)\n        {\n            var userName = userRow[\"Name\"];\n            var userOrders = userRow.GetChildRows(\"UserOrders\");\n            \n            Console.WriteLine($\"User: {userName}, Orders: {userOrders.Length}\");\n        }\n        \n        // Serialize DataSet\n        dataSet.WriteXml(\"company_data.xml\");\n        dataSet.WriteXmlSchema(\"company_schema.xsd\");\n        \n        // Load from XML\n        var newDataSet = new DataSet();\n        newDataSet.ReadXml(\"company_data.xml\");\n    }\n    \n    private DataTable CreateUsersTable()\n    {\n        var table = new DataTable(\"Users\");\n        table.Columns.Add(\"Id\", typeof(int));\n        table.Columns.Add(\"Name\", typeof(string));\n        table.Columns.Add(\"Email\", typeof(string));\n        \n        table.Rows.Add(1, \"John Doe\", \"john@example.com\");\n        table.Rows.Add(2, \"Jane Smith\", \"jane@example.com\");\n        \n        return table;\n    }\n    \n    private DataTable CreateOrdersTable()\n    {\n        var table = new DataTable(\"Orders\");\n        table.Columns.Add(\"Id\", typeof(int));\n        table.Columns.Add(\"UserId\", typeof(int));\n        table.Columns.Add(\"Product\", typeof(string));\n        table.Columns.Add(\"Amount\", typeof(decimal));\n        \n        table.Rows.Add(1, 1, \"Laptop\", 999.99m);\n        table.Rows.Add(2, 1, \"Mouse\", 29.99m);\n        table.Rows.Add(3, 2, \"Keyboard\", 79.99m);\n        \n        return table;\n    }\n}</code></pre><h4>üíº Transaction Management</h4><h5>Database Transactions:</h5><pre><code>public class TransactionExamples\n{\n    private readonly string _connectionString;\n    \n    public TransactionExamples(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    // Basic transaction\n    public async Task<bool> TransferFundsAsync(int fromAccountId, int toAccountId, decimal amount)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        await connection.OpenAsync();\n        \n        using var transaction = connection.BeginTransaction();\n        \n        try\n        {\n            // Debit from source account\n            using var debitCommand = new SqlCommand(\n                \"UPDATE Accounts SET Balance = Balance - @Amount WHERE Id = @AccountId\",\n                connection, transaction);\n            \n            debitCommand.Parameters.AddWithValue(\"@Amount\", amount);\n            debitCommand.Parameters.AddWithValue(\"@AccountId\", fromAccountId);\n            \n            var debitResult = await debitCommand.ExecuteNonQueryAsync();\n            if (debitResult != 1)\n                throw new InvalidOperationException(\"Failed to debit source account\");\n            \n            // Credit to destination account\n            using var creditCommand = new SqlCommand(\n                \"UPDATE Accounts SET Balance = Balance + @Amount WHERE Id = @AccountId\",\n                connection, transaction);\n            \n            creditCommand.Parameters.AddWithValue(\"@Amount\", amount);\n            creditCommand.Parameters.AddWithValue(\"@AccountId\", toAccountId);\n            \n            var creditResult = await creditCommand.ExecuteNonQueryAsync();\n            if (creditResult != 1)\n                throw new InvalidOperationException(\"Failed to credit destination account\");\n            \n            // Commit transaction\n            transaction.Commit();\n            return true;\n        }\n        catch (Exception ex)\n        {\n            // Rollback on any error\n            transaction.Rollback();\n            Console.WriteLine($\"Transaction failed: {ex.Message}\");\n            return false;\n        }\n    }\n    \n    // Transaction with savepoints\n    public async Task DemonstrateeSavepointsAsync()\n    {\n        using var connection = new SqlConnection(_connectionString);\n        await connection.OpenAsync();\n        \n        using var transaction = connection.BeginTransaction();\n        \n        try\n        {\n            // First operation\n            await ExecuteCommandAsync(\"INSERT INTO Users (Name) VALUES ('User1')\", connection, transaction);\n            \n            // Create savepoint\n            transaction.Save(\"SavePoint1\");\n            \n            try\n            {\n                // Second operation (might fail)\n                await ExecuteCommandAsync(\"INSERT INTO Users (Name) VALUES ('User2')\", connection, transaction);\n                \n                // Simulate error\n                throw new Exception(\"Simulated error\");\n            }\n            catch\n            {\n                // Rollback to savepoint (User1 insert is preserved)\n                transaction.Rollback(\"SavePoint1\");\n                Console.WriteLine(\"Rolled back to SavePoint1\");\n            }\n            \n            // Continue with other operations\n            await ExecuteCommandAsync(\"INSERT INTO Users (Name) VALUES ('User3')\", connection, transaction);\n            \n            transaction.Commit();\n        }\n        catch\n        {\n            transaction.Rollback();\n            throw;\n        }\n    }\n    \n    // Distributed transactions\n    public async Task DemonstratDistributedTransactionAsync()\n    {\n        using var scope = new TransactionScope(\n            TransactionScopeOption.Required,\n            new TransactionOptions\n            {\n                IsolationLevel = IsolationLevel.ReadCommitted,\n                Timeout = TimeSpan.FromMinutes(5)\n            },\n            TransactionScopeAsyncFlowOption.Enabled);\n        \n        try\n        {\n            // Database 1 operations\n            using (var connection1 = new SqlConnection(_connectionString))\n            {\n                await connection1.OpenAsync();\n                using var command1 = new SqlCommand(\"INSERT INTO Database1.Users (Name) VALUES ('User1')\", connection1);\n                await command1.ExecuteNonQueryAsync();\n            }\n            \n            // Database 2 operations (different connection string)\n            using (var connection2 = new SqlConnection(_connectionString))\n            {\n                await connection2.OpenAsync();\n                using var command2 = new SqlCommand(\"INSERT INTO Database2.Orders (UserId) VALUES (1)\", connection2);\n                await command2.ExecuteNonQueryAsync();\n            }\n            \n            // Both operations succeed - commit distributed transaction\n            scope.Complete();\n        }\n        catch (Exception ex)\n        {\n            // If any operation fails, entire distributed transaction is rolled back\n            Console.WriteLine($\"Distributed transaction failed: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    private async Task ExecuteCommandAsync(string sql, SqlConnection connection, SqlTransaction transaction)\n    {\n        using var command = new SqlCommand(sql, connection, transaction);\n        await command.ExecuteNonQueryAsync();\n    }\n}</code></pre><h4>üîí Security and Best Practices</h4><h5>SQL Injection Prevention:</h5><pre><code>public class SecurityExamples\n{\n    // ‚ùå Vulnerable to SQL injection\n    public async Task<List<User>> GetUsersBadAsync(string nameFilter)\n    {\n        var sql = $\"SELECT * FROM Users WHERE Name LIKE '%{nameFilter}%'\"; // DON'T DO THIS!\n        // An attacker could pass: \"'; DROP TABLE Users; --\"\n        \n        return await ExecuteQueryAsync(sql);\n    }\n    \n    // ‚úÖ Safe with parameterized queries\n    public async Task<List<User>> GetUsersGoodAsync(string nameFilter)\n    {\n        var sql = \"SELECT * FROM Users WHERE Name LIKE @NameFilter\";\n        var parameters = new[] { new SqlParameter(\"@NameFilter\", $\"%{nameFilter}%\") };\n        \n        return await ExecuteQueryAsync(sql, parameters);\n    }\n    \n    // ‚úÖ Using SqlParameter with explicit types\n    public async Task<User?> GetUserByIdAsync(int userId)\n    {\n        var sql = \"SELECT Id, Name, Email, CreatedDate FROM Users WHERE Id = @UserId\";\n        \n        var parameter = new SqlParameter(\"@UserId\", SqlDbType.Int) { Value = userId };\n        \n        var users = await ExecuteQueryAsync(sql, parameter);\n        return users.FirstOrDefault();\n    }\n    \n    // ‚úÖ Stored procedures for complex operations\n    public async Task<List<User>> GetUsersByStoredProcAsync(string department, DateTime? startDate)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        using var command = new SqlCommand(\"sp_GetUsersByDepartment\", connection)\n        {\n            CommandType = CommandType.StoredProcedure\n        };\n        \n        command.Parameters.AddWithValue(\"@Department\", department);\n        command.Parameters.AddWithValue(\"@StartDate\", startDate ?? (object)DBNull.Value);\n        \n        // Output parameter\n        var totalCountParam = new SqlParameter(\"@TotalCount\", SqlDbType.Int) { Direction = ParameterDirection.Output };\n        command.Parameters.Add(totalCountParam);\n        \n        await connection.OpenAsync();\n        using var reader = await command.ExecuteReaderAsync();\n        \n        var users = new List<User>();\n        while (await reader.ReadAsync())\n        {\n            users.Add(MapUserFromReader(reader));\n        }\n        \n        // Access output parameter after reader is closed\n        reader.Close();\n        var totalCount = (int)totalCountParam.Value;\n        Console.WriteLine($\"Total matching users: {totalCount}\");\n        \n        return users;\n    }\n    \n    private User MapUserFromReader(SqlDataReader reader)\n    {\n        return new User\n        {\n            Id = reader.GetInt32(\"Id\"),\n            Name = reader.GetString(\"Name\"),\n            Email = reader.IsDBNull(\"Email\") ? null : reader.GetString(\"Email\"),\n            CreatedDate = reader.GetDateTime(\"CreatedDate\")\n        };\n    }\n    \n    // Helper methods (implementation depends on your architecture)\n    private async Task<List<User>> ExecuteQueryAsync(string sql, params SqlParameter[] parameters)\n    {\n        // Implementation would go here\n        return new List<User>();\n    }\n    \n    private readonly string _connectionString = \"\";\n}\n\npublic class User\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    public string? Email { get; set; }\n    public DateTime CreatedDate { get; set; }\n}</code></pre><h4>‚ö° Performance Optimization</h4><h5>Bulk Operations and Performance Tips:</h5><pre><code>public class PerformanceOptimization\n{\n    private readonly string _connectionString;\n    \n    public PerformanceOptimization(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    // Bulk insert using SqlBulkCopy\n    public async Task BulkInsertUsersAsync(IEnumerable<User> users)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        await connection.OpenAsync();\n        \n        using var bulkCopy = new SqlBulkCopy(connection)\n        {\n            DestinationTableName = \"Users\",\n            BatchSize = 10000,\n            BulkCopyTimeout = 300,\n            NotifyAfter = 1000\n        };\n        \n        // Map columns\n        bulkCopy.ColumnMappings.Add(\"Name\", \"Name\");\n        bulkCopy.ColumnMappings.Add(\"Email\", \"Email\");\n        bulkCopy.ColumnMappings.Add(\"CreatedDate\", \"CreatedDate\");\n        \n        // Progress notification\n        bulkCopy.SqlRowsCopied += (sender, e) =>\n        {\n            Console.WriteLine($\"Copied {e.RowsCopied} rows\");\n        };\n        \n        // Convert to DataTable for SqlBulkCopy\n        var dataTable = ConvertToDataTable(users);\n        await bulkCopy.WriteToServerAsync(dataTable);\n    }\n    \n    // Batch operations for better performance\n    public async Task<int> BatchUpdateAsync(IEnumerable<User> users)\n    {\n        using var connection = new SqlConnection(_connectionString);\n        await connection.OpenAsync();\n        \n        using var transaction = connection.BeginTransaction();\n        \n        try\n        {\n            var totalAffected = 0;\n            var batchSize = 1000;\n            var userBatches = users.Chunk(batchSize);\n            \n            foreach (var batch in userBatches)\n            {\n                using var command = new SqlCommand(connection: connection, transaction: transaction);\n                \n                var sqlBuilder = new StringBuilder();\n                var parameterIndex = 0;\n                \n                foreach (var user in batch)\n                {\n                    sqlBuilder.AppendLine($\"UPDATE Users SET Name = @Name{parameterIndex}, Email = @Email{parameterIndex} WHERE Id = @Id{parameterIndex};\");\n                    \n                    command.Parameters.AddWithValue($\"@Name{parameterIndex}\", user.Name);\n                    command.Parameters.AddWithValue($\"@Email{parameterIndex}\", user.Email ?? (object)DBNull.Value);\n                    command.Parameters.AddWithValue($\"@Id{parameterIndex}\", user.Id);\n                    \n                    parameterIndex++;\n                }\n                \n                command.CommandText = sqlBuilder.ToString();\n                totalAffected += await command.ExecuteNonQueryAsync();\n            }\n            \n            transaction.Commit();\n            return totalAffected;\n        }\n        catch\n        {\n            transaction.Rollback();\n            throw;\n        }\n    }\n    \n    // Connection pooling optimization\n    public static string GetOptimizedConnectionString(string server, string database)\n    {\n        return new SqlConnectionStringBuilder\n        {\n            DataSource = server,\n            InitialCatalog = database,\n            IntegratedSecurity = true,\n            Pooling = true,\n            MinPoolSize = 5,      // Minimum connections in pool\n            MaxPoolSize = 100,    // Maximum connections in pool\n            ConnectionTimeout = 15, // Connection timeout in seconds\n            CommandTimeout = 30,   // Command timeout in seconds\n            LoadBalanceTimeout = 0, // Connection lifetime in seconds (0 = infinite)\n            Enlist = true,         // Enable automatic transaction enlistment\n        }.ConnectionString;\n    }\n    \n    private DataTable ConvertToDataTable(IEnumerable<User> users)\n    {\n        var dataTable = new DataTable();\n        dataTable.Columns.Add(\"Name\", typeof(string));\n        dataTable.Columns.Add(\"Email\", typeof(string));\n        dataTable.Columns.Add(\"CreatedDate\", typeof(DateTime));\n        \n        foreach (var user in users)\n        {\n            dataTable.Rows.Add(user.Name, user.Email, user.CreatedDate);\n        }\n        \n        return dataTable;\n    }\n}</code></pre><h4>üèÜ Best Practices</h4><ul><li>Always use parameterized queries to prevent SQL injection</li><li>Use 'using' statements for proper resource disposal</li><li>Prefer async methods for database operations</li><li>Implement proper exception handling and logging</li><li>Use connection pooling for better performance</li><li>Consider using SqlBulkCopy for large data inserts</li><li>Use transactions for data consistency</li><li>Set appropriate command timeouts</li><li>Use stored procedures for complex business logic</li><li>Monitor and optimize query performance</li></ul><h4>üöÄ Modern Alternatives</h4><p>While ADO.NET provides low-level control, consider these modern alternatives:</p><ul><li><strong>Entity Framework Core</strong> - Full-featured ORM</li><li><strong>Dapper</strong> - Lightweight micro-ORM</li><li><strong>System.Data.SqlClient</strong> ‚Üí <strong>Microsoft.Data.SqlClient</strong> (newer package)</li><li><strong>Npgsql</strong> for PostgreSQL</li><li><strong>MySql.Data</strong> for MySQL</li></ul></div>",
      "code": "using var con = new SqlConnection(cs); await con.OpenAsync(); using var cmd = new SqlCommand(\"SELECT 1\", con); var x = await cmd.ExecuteScalarAsync();",
      "quiz": [ {"q":"Which reads forward-only?","options":["DataTable","DataReader"],"answer":1} ]
    },
    {
      "id": 24,
      "tier": 2,
      "title": "Entity Framework Core",
      "description": "Code-first vs DB-first, migrations.",
      "concepts": ["Code-First", "Database-First", "Migrations"],
      "requirements": ["Add a DbContext and a DbSet", "Run a migration"],
      "theory": "<div class='theory-content'><h4>üèóÔ∏è Entity Framework Core - Modern Object-Relational Mapping</h4><p>Entity Framework Core (EF Core) is a lightweight, extensible, and cross-platform ORM that enables .NET developers to work with databases using .NET objects, eliminating the need for most data-access code.</p><h4>üéØ Code-First vs Database-First Approaches</h4><h5>Code-First Development:</h5><pre><code>// 1. Define your entities (domain models)\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public DateTime CreatedDate { get; set; }\n    public List<Post> Posts { get; set; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string Content { get; set; } = string.Empty;\n    public DateTime PublishedDate { get; set; }\n    public int BlogId { get; set; } // Foreign key\n    public Blog Blog { get; set; } = null!; // Navigation property\n    public List<Comment> Comments { get; set; } = new List<Comment>();\n}\n\npublic class Comment\n{\n    public int Id { get; set; }\n    public string Author { get; set; } = string.Empty;\n    public string Content { get; set; } = string.Empty;\n    public DateTime CreatedDate { get; set; }\n    public int PostId { get; set; } // Foreign key\n    public Post Post { get; set; } = null!; // Navigation property\n}\n\n// 2. Create DbContext\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs => Set<Blog>();\n    public DbSet<Post> Posts => Set<Post>();\n    public DbSet<Comment> Comments => Set<Comment>();\n    \n    public BloggingContext(DbContextOptions<BloggingContext> options) : base(options)\n    {\n    }\n    \n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // Configure entity relationships and constraints\n        modelBuilder.Entity<Blog>(entity =>\n        {\n            entity.HasKey(b => b.Id);\n            entity.Property(b => b.Title).IsRequired().HasMaxLength(200);\n            entity.Property(b => b.Description).HasMaxLength(1000);\n            entity.HasIndex(b => b.Title).IsUnique();\n        });\n        \n        modelBuilder.Entity<Post>(entity =>\n        {\n            entity.HasKey(p => p.Id);\n            entity.Property(p => p.Title).IsRequired().HasMaxLength(300);\n            entity.Property(p => p.Content).IsRequired();\n            \n            // Configure foreign key relationship\n            entity.HasOne(p => p.Blog)\n                  .WithMany(b => b.Posts)\n                  .HasForeignKey(p => p.BlogId)\n                  .OnDelete(DeleteBehavior.Cascade);\n        });\n        \n        modelBuilder.Entity<Comment>(entity =>\n        {\n            entity.HasKey(c => c.Id);\n            entity.Property(c => c.Author).IsRequired().HasMaxLength(100);\n            entity.Property(c => c.Content).IsRequired().HasMaxLength(500);\n            \n            entity.HasOne(c => c.Post)\n                  .WithMany(p => p.Comments)\n                  .HasForeignKey(c => c.PostId)\n                  .OnDelete(DeleteBehavior.Cascade);\n        });\n        \n        base.OnModelCreating(modelBuilder);\n    }\n}</code></pre><h5>Database-First Development:</h5><pre><code>// 1. Scaffold from existing database using CLI\n// dotnet ef dbcontext scaffold \"Server=localhost;Database=BloggingDB;Trusted_Connection=true;\" Microsoft.EntityFrameworkCore.SqlServer -o Models\n\n// 2. Generated DbContext (simplified example)\npublic partial class BloggingDBContext : DbContext\n{\n    public BloggingDBContext()\n    {\n    }\n    \n    public BloggingDBContext(DbContextOptions<BloggingDBContext> options) : base(options)\n    {\n    }\n    \n    public virtual DbSet<Blog> Blogs { get; set; } = null!;\n    public virtual DbSet<Post> Posts { get; set; } = null!;\n    \n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        if (!optionsBuilder.IsConfigured)\n        {\n            optionsBuilder.UseSqlServer(\"Server=localhost;Database=BloggingDB;Trusted_Connection=true;\");\n        }\n    }\n    \n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // Generated configuration based on existing database schema\n        modelBuilder.Entity<Blog>(entity =>\n        {\n            entity.Property(e => e.Title).HasMaxLength(200).IsUnicode(false);\n            entity.Property(e => e.Description).HasMaxLength(1000).IsUnicode(false);\n        });\n        \n        OnModelCreatingPartial(modelBuilder);\n    }\n    \n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}</code></pre><h4>üîÑ Migrations - Database Schema Evolution</h4><h5>Creating and Managing Migrations:</h5><pre><code>// 1. Add a migration (CLI command)\n// dotnet ef migrations add InitialCreate\n\n// 2. Generated migration file\npublic partial class InitialCreate : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.CreateTable(\n            name: \"Blogs\",\n            columns: table => new\n            {\n                Id = table.Column<int>(type: \"int\", nullable: false)\n                    .Annotation(\"SqlServer:Identity\", \"1, 1\"),\n                Title = table.Column<string>(type: \"nvarchar(200)\", maxLength: 200, nullable: false),\n                Description = table.Column<string>(type: \"nvarchar(1000)\", maxLength: 1000, nullable: false),\n                CreatedDate = table.Column<DateTime>(type: \"datetime2\", nullable: false)\n            },\n            constraints: table =>\n            {\n                table.PrimaryKey(\"PK_Blogs\", x => x.Id);\n            });\n        \n        migrationBuilder.CreateTable(\n            name: \"Posts\",\n            columns: table => new\n            {\n                Id = table.Column<int>(type: \"int\", nullable: false)\n                    .Annotation(\"SqlServer:Identity\", \"1, 1\"),\n                Title = table.Column<string>(type: \"nvarchar(300)\", maxLength: 300, nullable: false),\n                Content = table.Column<string>(type: \"nvarchar(max)\", nullable: false),\n                PublishedDate = table.Column<DateTime>(type: \"datetime2\", nullable: false),\n                BlogId = table.Column<int>(type: \"int\", nullable: false)\n            },\n            constraints: table =>\n            {\n                table.PrimaryKey(\"PK_Posts\", x => x.Id);\n                table.ForeignKey(\n                    name: \"FK_Posts_Blogs_BlogId\",\n                    column: x => x.BlogId,\n                    principalTable: \"Blogs\",\n                    principalColumn: \"Id\",\n                    onDelete: ReferentialAction.Cascade);\n            });\n    }\n    \n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropTable(name: \"Posts\");\n        migrationBuilder.DropTable(name: \"Blogs\");\n    }\n}\n\n// 3. Update database (CLI command)\n// dotnet ef database update</code></pre><h5>Advanced Migration Scenarios:</h5><pre><code>public class MigrationExamples\n{\n    public void DemonstrateDataMigrations()\n    {\n        // Example of a migration with data transformation\n    }\n}\n\n// Migration with custom SQL\npublic partial class AddCustomIndex : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        // Custom SQL for complex operations\n        migrationBuilder.Sql(@\"\n            CREATE NONCLUSTERED INDEX IX_Posts_PublishedDate_Filtered\n            ON Posts (PublishedDate)\n            WHERE PublishedDate IS NOT NULL;\n        \");\n        \n        // Seed data\n        migrationBuilder.InsertData(\n            table: \"Blogs\",\n            columns: new[] { \"Title\", \"Description\", \"CreatedDate\" },\n            values: new object[,]\n            {\n                { \"Tech Blog\", \"Technology discussions\", DateTime.UtcNow },\n                { \"Personal Blog\", \"Personal thoughts\", DateTime.UtcNow }\n            });\n    }\n    \n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.Sql(\"DROP INDEX IX_Posts_PublishedDate_Filtered ON Posts;\");\n        \n        migrationBuilder.DeleteData(\n            table: \"Blogs\",\n            keyColumn: \"Title\",\n            keyValues: new object[] { \"Tech Blog\", \"Personal Blog\" });\n    }\n}\n\n// Managing migrations programmatically\npublic class MigrationService\n{\n    private readonly BloggingContext _context;\n    \n    public MigrationService(BloggingContext context)\n    {\n        _context = context;\n    }\n    \n    public async Task<bool> DatabaseExistsAsync()\n    {\n        return await _context.Database.CanConnectAsync();\n    }\n    \n    public async Task CreateDatabaseAsync()\n    {\n        await _context.Database.EnsureCreatedAsync();\n    }\n    \n    public async Task MigrateDatabaseAsync()\n    {\n        await _context.Database.MigrateAsync();\n    }\n    \n    public async Task<IEnumerable<string>> GetPendingMigrationsAsync()\n    {\n        return await _context.Database.GetPendingMigrationsAsync();\n    }\n    \n    public async Task<IEnumerable<string>> GetAppliedMigrationsAsync()\n    {\n        return await _context.Database.GetAppliedMigrationsAsync();\n    }\n}</code></pre><h4>üìä Querying Data with EF Core</h4><h5>Basic CRUD Operations:</h5><pre><code>public class BlogService\n{\n    private readonly BloggingContext _context;\n    \n    public BlogService(BloggingContext context)\n    {\n        _context = context;\n    }\n    \n    // Create\n    public async Task<Blog> CreateBlogAsync(string title, string description)\n    {\n        var blog = new Blog\n        {\n            Title = title,\n            Description = description,\n            CreatedDate = DateTime.UtcNow\n        };\n        \n        _context.Blogs.Add(blog);\n        await _context.SaveChangesAsync();\n        \n        return blog;\n    }\n    \n    // Read - Simple queries\n    public async Task<Blog?> GetBlogByIdAsync(int id)\n    {\n        return await _context.Blogs.FindAsync(id);\n    }\n    \n    public async Task<List<Blog>> GetAllBlogsAsync()\n    {\n        return await _context.Blogs\n            .OrderBy(b => b.Title)\n            .ToListAsync();\n    }\n    \n    // Read - Complex queries with navigation properties\n    public async Task<Blog?> GetBlogWithPostsAsync(int id)\n    {\n        return await _context.Blogs\n            .Include(b => b.Posts)\n                .ThenInclude(p => p.Comments)\n            .FirstOrDefaultAsync(b => b.Id == id);\n    }\n    \n    // Read - Filtered and paged queries\n    public async Task<List<Blog>> GetBlogsPagedAsync(int page, int pageSize, string? searchTerm = null)\n    {\n        var query = _context.Blogs.AsQueryable();\n        \n        if (!string.IsNullOrEmpty(searchTerm))\n        {\n            query = query.Where(b => b.Title.Contains(searchTerm) || b.Description.Contains(searchTerm));\n        }\n        \n        return await query\n            .OrderBy(b => b.Title)\n            .Skip((page - 1) * pageSize)\n            .Take(pageSize)\n            .ToListAsync();\n    }\n    \n    // Update\n    public async Task<Blog> UpdateBlogAsync(int id, string title, string description)\n    {\n        var blog = await _context.Blogs.FindAsync(id);\n        if (blog == null)\n            throw new ArgumentException($\"Blog with id {id} not found\");\n        \n        blog.Title = title;\n        blog.Description = description;\n        \n        await _context.SaveChangesAsync();\n        return blog;\n    }\n    \n    // Update - Bulk update\n    public async Task<int> UpdateBlogCategoryAsync(string oldCategory, string newCategory)\n    {\n        return await _context.Blogs\n            .Where(b => b.Description.Contains(oldCategory))\n            .ExecuteUpdateAsync(b => b.SetProperty(blog => blog.Description, \n                blog => blog.Description.Replace(oldCategory, newCategory)));\n    }\n    \n    // Delete\n    public async Task<bool> DeleteBlogAsync(int id)\n    {\n        var blog = await _context.Blogs.FindAsync(id);\n        if (blog == null)\n            return false;\n        \n        _context.Blogs.Remove(blog);\n        await _context.SaveChangesAsync();\n        return true;\n    }\n    \n    // Delete - Bulk delete\n    public async Task<int> DeleteOldBlogsAsync(DateTime cutoffDate)\n    {\n        return await _context.Blogs\n            .Where(b => b.CreatedDate < cutoffDate)\n            .ExecuteDeleteAsync();\n    }\n}</code></pre><h5>Advanced Querying Techniques:</h5><pre><code>public class AdvancedQueries\n{\n    private readonly BloggingContext _context;\n    \n    public AdvancedQueries(BloggingContext context)\n    {\n        _context = context;\n    }\n    \n    // Raw SQL queries\n    public async Task<List<Blog>> GetBlogsWithRawSqlAsync()\n    {\n        return await _context.Blogs\n            .FromSqlRaw(\"SELECT * FROM Blogs WHERE CreatedDate > {0}\", DateTime.Today.AddDays(-30))\n            .ToListAsync();\n    }\n    \n    // Stored procedure execution\n    public async Task<List<Blog>> GetPopularBlogsAsync(int minimumPosts)\n    {\n        return await _context.Blogs\n            .FromSqlInterpolated($\"EXEC GetPopularBlogs {minimumPosts}\")\n            .ToListAsync();\n    }\n    \n    // Complex joins and grouping\n    public async Task<List<BlogStats>> GetBlogStatisticsAsync()\n    {\n        return await _context.Blogs\n            .Select(b => new BlogStats\n            {\n                BlogTitle = b.Title,\n                PostCount = b.Posts.Count,\n                CommentCount = b.Posts.Sum(p => p.Comments.Count),\n                LatestPostDate = b.Posts.Max(p => (DateTime?)p.PublishedDate),\n                AveragePostLength = b.Posts.Average(p => (double?)p.Content.Length) ?? 0\n            })\n            .ToListAsync();\n    }\n    \n    // Window functions (EF Core 6+)\n    public async Task<List<PostRanking>> GetTopPostsPerBlogAsync()\n    {\n        return await _context.Posts\n            .Select(p => new PostRanking\n            {\n                PostTitle = p.Title,\n                BlogTitle = p.Blog.Title,\n                CommentCount = p.Comments.Count,\n                Rank = EF.Functions.RowNumber(EF.Functions.Over()\n                    .PartitionBy(p.BlogId)\n                    .OrderByDescending(p.Comments.Count))\n            })\n            .Where(pr => pr.Rank <= 3)\n            .ToListAsync();\n    }\n    \n    // Split queries for better performance\n    public async Task<List<Blog>> GetBlogsWithSplitQueryAsync()\n    {\n        return await _context.Blogs\n            .AsSplitQuery() // Generates separate queries for included collections\n            .Include(b => b.Posts)\n                .ThenInclude(p => p.Comments)\n            .ToListAsync();\n    }\n    \n    // No-tracking queries for read-only scenarios\n    public async Task<List<Blog>> GetBlogsReadOnlyAsync()\n    {\n        return await _context.Blogs\n            .AsNoTracking() // Better performance, no change tracking\n            .ToListAsync();\n    }\n    \n    // Compiled queries for frequently executed queries\n    private static readonly Func<BloggingContext, int, Task<Blog?>> GetBlogByIdCompiled =\n        EF.CompileAsyncQuery((BloggingContext context, int id) =>\n            context.Blogs.FirstOrDefault(b => b.Id == id));\n    \n    public async Task<Blog?> GetBlogByIdFastAsync(int id)\n    {\n        return await GetBlogByIdCompiled(_context, id);\n    }\n}\n\npublic class BlogStats\n{\n    public string BlogTitle { get; set; } = string.Empty;\n    public int PostCount { get; set; }\n    public int CommentCount { get; set; }\n    public DateTime? LatestPostDate { get; set; }\n    public double AveragePostLength { get; set; }\n}\n\npublic class PostRanking\n{\n    public string PostTitle { get; set; } = string.Empty;\n    public string BlogTitle { get; set; } = string.Empty;\n    public int CommentCount { get; set; }\n    public long Rank { get; set; }\n}</code></pre><h4>üîß Advanced Configuration</h4><h5>Fluent API Configuration:</h5><pre><code>public class AdvancedConfiguration : DbContext\n{\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // Value conversions\n        modelBuilder.Entity<Blog>()\n            .Property(b => b.CreatedDate)\n            .HasConversion(\n                v => v.ToUniversalTime(), // To database\n                v => DateTime.SpecifyKind(v, DateTimeKind.Utc) // From database\n            );\n        \n        // Custom column types\n        modelBuilder.Entity<Post>()\n            .Property(p => p.Content)\n            .HasColumnType(\"nvarchar(max)\");\n        \n        // Computed columns\n        modelBuilder.Entity<Post>()\n            .Property(p => p.ContentLength)\n            .HasComputedColumnSql(\"LEN([Content])\", stored: true);\n        \n        // Global query filters (soft delete)\n        modelBuilder.Entity<Blog>()\n            .HasQueryFilter(b => !b.IsDeleted);\n        \n        // Table splitting\n        modelBuilder.Entity<BlogMetadata>()\n            .ToTable(\"Blogs\")\n            .HasOne<Blog>()\n            .WithOne()\n            .HasForeignKey<BlogMetadata>(bm => bm.BlogId);\n        \n        // Entity type configuration\n        modelBuilder.ApplyConfiguration(new BlogConfiguration());\n        modelBuilder.ApplyConfiguration(new PostConfiguration());\n        \n        // Seed data\n        modelBuilder.Entity<Blog>().HasData(\n            new Blog { Id = 1, Title = \"Sample Blog\", Description = \"Sample Description\", CreatedDate = DateTime.UtcNow }\n        );\n    }\n}\n\n// Separate configuration classes\npublic class BlogConfiguration : IEntityTypeConfiguration<Blog>\n{\n    public void Configure(EntityTypeBuilder<Blog> builder)\n    {\n        builder.HasKey(b => b.Id);\n        \n        builder.Property(b => b.Title)\n            .IsRequired()\n            .HasMaxLength(200);\n            \n        builder.HasIndex(b => b.Title)\n            .IsUnique();\n            \n        builder.HasMany(b => b.Posts)\n            .WithOne(p => p.Blog)\n            .HasForeignKey(p => p.BlogId)\n            .OnDelete(DeleteBehavior.Cascade);\n    }\n}\n\npublic class PostConfiguration : IEntityTypeConfiguration<Post>\n{\n    public void Configure(EntityTypeBuilder<Post> builder)\n    {\n        builder.HasKey(p => p.Id);\n        \n        builder.Property(p => p.Title)\n            .IsRequired()\n            .HasMaxLength(300);\n            \n        builder.Property(p => p.Content)\n            .IsRequired();\n            \n        // Shadow properties\n        builder.Property<DateTime>(\"LastModified\");\n        \n        // Backing fields\n        builder.Property(p => p.Tags)\n            .HasField(\"_tags\")\n            .UsePropertyAccessMode(PropertyAccessMode.Field);\n    }\n}\n\n// Supporting entities\npublic class BlogMetadata\n{\n    public int BlogId { get; set; }\n    public string SeoTitle { get; set; } = string.Empty;\n    public string MetaDescription { get; set; } = string.Empty;\n    public string Keywords { get; set; } = string.Empty;\n}</code></pre><h4>üöÄ Performance Optimization</h4><h5>Change Tracking and Performance:</h5><pre><code>public class PerformanceOptimization\n{\n    private readonly BloggingContext _context;\n    \n    public PerformanceOptimization(BloggingContext context)\n    {\n        _context = context;\n    }\n    \n    // Bulk operations\n    public async Task BulkInsertPostsAsync(List<Post> posts)\n    {\n        // Disable change tracking for bulk operations\n        _context.ChangeTracker.AutoDetectChangesEnabled = false;\n        \n        try\n        {\n            await _context.Posts.AddRangeAsync(posts);\n            await _context.SaveChangesAsync();\n        }\n        finally\n        {\n            _context.ChangeTracker.AutoDetectChangesEnabled = true;\n        }\n    }\n    \n    // Optimized updates\n    public async Task OptimizedUpdateAsync(int blogId, string newTitle)\n    {\n        // Direct update without loading entity\n        await _context.Blogs\n            .Where(b => b.Id == blogId)\n            .ExecuteUpdateAsync(b => b.SetProperty(blog => blog.Title, newTitle));\n    }\n    \n    // Batch loading\n    public async Task<Dictionary<int, List<Post>>> LoadPostsForBlogsAsync(List<int> blogIds)\n    {\n        var posts = await _context.Posts\n            .Where(p => blogIds.Contains(p.BlogId))\n            .ToListAsync();\n            \n        return posts.GroupBy(p => p.BlogId)\n                   .ToDictionary(g => g.Key, g => g.ToList());\n    }\n    \n    // Connection resiliency\n    public async Task<List<Blog>> GetBlogsWithRetryAsync()\n    {\n        var strategy = _context.Database.CreateExecutionStrategy();\n        \n        return await strategy.ExecuteAsync(async () =>\n        {\n            using var context = new BloggingContext(_context.Options);\n            return await context.Blogs.ToListAsync();\n        });\n    }\n    \n    // Memory optimization for large datasets\n    public async IAsyncEnumerable<Post> GetPostsStreamAsync()\n    {\n        await foreach (var post in _context.Posts.AsAsyncEnumerable())\n        {\n            yield return post;\n        }\n    }\n}</code></pre><h4>üß™ Testing with EF Core</h4><h5>In-Memory Database for Testing:</h5><pre><code>public class BlogServiceTests\n{\n    private BloggingContext GetInMemoryContext()\n    {\n        var options = new DbContextOptionsBuilder<BloggingContext>()\n            .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())\n            .Options;\n            \n        return new BloggingContext(options);\n    }\n    \n    [Test]\n    public async Task CreateBlog_ShouldReturnBlogWithId()\n    {\n        // Arrange\n        using var context = GetInMemoryContext();\n        var service = new BlogService(context);\n        \n        // Act\n        var blog = await service.CreateBlogAsync(\"Test Blog\", \"Test Description\");\n        \n        // Assert\n        Assert.That(blog.Id, Is.GreaterThan(0));\n        Assert.That(blog.Title, Is.EqualTo(\"Test Blog\"));\n        \n        // Verify it was saved\n        var savedBlog = await context.Blogs.FindAsync(blog.Id);\n        Assert.That(savedBlog, Is.Not.Null);\n    }\n    \n    [Test]\n    public async Task GetBlogWithPosts_ShouldIncludeRelatedData()\n    {\n        // Arrange\n        using var context = GetInMemoryContext();\n        var service = new BlogService(context);\n        \n        var blog = new Blog { Title = \"Test Blog\", Description = \"Description\", CreatedDate = DateTime.UtcNow };\n        var post = new Post { Title = \"Test Post\", Content = \"Content\", PublishedDate = DateTime.UtcNow, Blog = blog };\n        \n        context.Blogs.Add(blog);\n        context.Posts.Add(post);\n        await context.SaveChangesAsync();\n        \n        // Clear tracking to ensure fresh load\n        context.ChangeTracker.Clear();\n        \n        // Act\n        var result = await service.GetBlogWithPostsAsync(blog.Id);\n        \n        // Assert\n        Assert.That(result, Is.Not.Null);\n        Assert.That(result.Posts, Has.Count.EqualTo(1));\n        Assert.That(result.Posts.First().Title, Is.EqualTo(\"Test Post\"));\n    }\n}</code></pre><h4>üèÜ Best Practices</h4><ul><li>Use async methods for all database operations</li><li>Implement proper error handling and logging</li><li>Use migrations for database schema changes</li><li>Leverage navigation properties for related data</li><li>Use AsNoTracking() for read-only queries</li><li>Implement proper transaction management</li><li>Use bulk operations for large datasets</li><li>Configure appropriate indexes in OnModelCreating</li><li>Use value converters for custom type mappings</li><li>Test with in-memory database for unit tests</li></ul><h4>üöÄ EF Core 8 Features</h4><ul><li><strong>Complex Types</strong> - Value objects as properties</li><li><strong>Primitive Collections</strong> - Arrays and lists as columns</li><li><strong>Bulk Updates/Deletes</strong> - ExecuteUpdate/ExecuteDelete methods</li><li><strong>JSON Columns</strong> - Native JSON support</li><li><strong>Raw SQL improvements</strong> - Better SQL interpolation</li><li><strong>Model building improvements</strong> - Better configuration APIs</li></ul></div>",
      "code": "public class AppDb: DbContext { public DbSet<Person> People => Set<Person>(); }",
      "quiz": [ {"q":"Which command adds a migration?","options":["dotnet ef migrations add","dotnet build"],"answer":0} ]
    },
    {
      "id": 25,
      "tier": 2,
      "title": "File I/O",
      "description": "Streams and serialization (JSON/XML/Binary).",
      "concepts": ["FileStream", "MemoryStream", "JSON", "XML", "Binary"],
      "requirements": ["Read and write a file", "Serialize to JSON"],
      "theory": "<div class='theory-content'><h4>üìÅ File I/O - File System Operations and Data Persistence</h4><p>File I/O operations are essential for reading, writing, and manipulating files and directories. .NET provides comprehensive APIs for both synchronous and asynchronous file operations with proper error handling and performance optimization.</p><h4>üìñ Reading Files - Various Approaches</h4><h5>Basic File Reading Operations:</h5><pre><code>public class FileReadingExamples\n{\n    // Read entire file as string\n    public async Task<string> ReadFileAsStringAsync(string filePath)\n    {\n        try\n        {\n            return await File.ReadAllTextAsync(filePath, Encoding.UTF8);\n        }\n        catch (FileNotFoundException)\n        {\n            Console.WriteLine($\"File not found: {filePath}\");\n            return string.Empty;\n        }\n        catch (UnauthorizedAccessException)\n        {\n            Console.WriteLine($\"Access denied: {filePath}\");\n            return string.Empty;\n        }\n        catch (IOException ex)\n        {\n            Console.WriteLine($\"IO Error reading {filePath}: {ex.Message}\");\n            return string.Empty;\n        }\n    }\n    \n    // Read file line by line\n    public async Task<List<string>> ReadFileLinesAsync(string filePath)\n    {\n        if (!File.Exists(filePath))\n            return new List<string>();\n            \n        var lines = new List<string>();\n        \n        using var reader = new StreamReader(filePath, Encoding.UTF8);\n        string? line;\n        while ((line = await reader.ReadLineAsync()) != null)\n        {\n            lines.Add(line);\n        }\n        \n        return lines;\n    }\n    \n    // Read file with streaming (memory efficient for large files)\n    public async IAsyncEnumerable<string> ReadFileLinesStreamAsync(\n        string filePath,\n        [EnumeratorCancellation] CancellationToken cancellationToken = default)\n    {\n        if (!File.Exists(filePath))\n            yield break;\n            \n        using var reader = new StreamReader(filePath, Encoding.UTF8);\n        string? line;\n        while ((line = await reader.ReadLineAsync()) != null)\n        {\n            cancellationToken.ThrowIfCancellationRequested();\n            yield return line;\n        }\n    }\n    \n    // Read binary files\n    public async Task<byte[]> ReadBinaryFileAsync(string filePath)\n    {\n        return await File.ReadAllBytesAsync(filePath);\n    }\n    \n    // Read file with custom buffer size for performance\n    public async Task<string> ReadLargeFileAsync(string filePath)\n    {\n        const int bufferSize = 8192; // 8KB buffer\n        \n        using var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read, bufferSize, useAsync: true);\n        using var reader = new StreamReader(fileStream, Encoding.UTF8);\n        \n        return await reader.ReadToEndAsync();\n    }\n    \n    // Read CSV file with parsing\n    public async Task<List<Person>> ReadCsvFileAsync(string filePath)\n    {\n        var people = new List<Person>();\n        \n        await foreach (var line in ReadFileLinesStreamAsync(filePath))\n        {\n            if (string.IsNullOrWhiteSpace(line) || line.StartsWith(\"#\")) // Skip empty lines and comments\n                continue;\n                \n            var parts = line.Split(',');\n            if (parts.Length >= 3)\n            {\n                people.Add(new Person\n                {\n                    Name = parts[0].Trim(),\n                    Age = int.TryParse(parts[1].Trim(), out var age) ? age : 0,\n                    Email = parts[2].Trim()\n                });\n            }\n        }\n        \n        return people;\n    }\n}\n\npublic class Person\n{\n    public string Name { get; set; } = string.Empty;\n    public int Age { get; set; }\n    public string Email { get; set; } = string.Empty;\n}</code></pre><h4>‚úçÔ∏è Writing Files - Creating and Updating</h4><h5>Basic File Writing Operations:</h5><pre><code>public class FileWritingExamples\n{\n    // Write string to file\n    public async Task WriteStringToFileAsync(string filePath, string content)\n    {\n        // Ensure directory exists\n        var directory = Path.GetDirectoryName(filePath);\n        if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))\n        {\n            Directory.CreateDirectory(directory);\n        }\n        \n        await File.WriteAllTextAsync(filePath, content, Encoding.UTF8);\n    }\n    \n    // Append to existing file\n    public async Task AppendToFileAsync(string filePath, string content)\n    {\n        await File.AppendAllTextAsync(filePath, content, Encoding.UTF8);\n    }\n    \n    // Write lines to file\n    public async Task WriteLinesToFileAsync(string filePath, IEnumerable<string> lines)\n    {\n        await File.WriteAllLinesAsync(filePath, lines, Encoding.UTF8);\n    }\n    \n    // Write with StreamWriter for better control\n    public async Task WriteWithStreamWriterAsync(string filePath, IEnumerable<string> data)\n    {\n        using var writer = new StreamWriter(filePath, append: false, Encoding.UTF8);\n        \n        foreach (var item in data)\n        {\n            await writer.WriteLineAsync(item);\n        }\n        \n        await writer.FlushAsync(); // Ensure data is written\n    }\n    \n    // Write binary data\n    public async Task WriteBinaryFileAsync(string filePath, byte[] data)\n    {\n        await File.WriteAllBytesAsync(filePath, data);\n    }\n    \n    // Write with buffering for large files\n    public async Task WriteLargeFileAsync(string filePath, IEnumerable<string> lines)\n    {\n        const int bufferSize = 65536; // 64KB buffer\n        \n        using var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None, bufferSize, useAsync: true);\n        using var writer = new StreamWriter(fileStream, Encoding.UTF8);\n        \n        foreach (var line in lines)\n        {\n            await writer.WriteLineAsync(line);\n        }\n    }\n    \n    // Atomic file writing (write to temp file, then rename)\n    public async Task WriteFileAtomicallyAsync(string filePath, string content)\n    {\n        var tempFilePath = Path.GetTempFileName();\n        \n        try\n        {\n            await File.WriteAllTextAsync(tempFilePath, content, Encoding.UTF8);\n            \n            // Atomic operation: replace original file\n            File.Move(tempFilePath, filePath, overwrite: true);\n        }\n        catch\n        {\n            // Clean up temp file if operation failed\n            if (File.Exists(tempFilePath))\n                File.Delete(tempFilePath);\n            throw;\n        }\n    }\n    \n    // Write CSV data\n    public async Task WriteCsvFileAsync(string filePath, IEnumerable<Person> people)\n    {\n        using var writer = new StreamWriter(filePath, append: false, Encoding.UTF8);\n        \n        // Write header\n        await writer.WriteLineAsync(\"Name,Age,Email\");\n        \n        // Write data\n        foreach (var person in people)\n        {\n            var line = $\"{EscapeCsvField(person.Name)},{person.Age},{EscapeCsvField(person.Email)}\";\n            await writer.WriteLineAsync(line);\n        }\n    }\n    \n    private string EscapeCsvField(string field)\n    {\n        if (field.Contains(',') || field.Contains('\"') || field.Contains('\\n'))\n        {\n            return $\"\\\"{field.Replace(\"\\\"\", \"\\\"\\\"\")}\\\";  // Escape quotes and wrap in quotes\n        }\n        return field;\n    }\n}</code></pre><h4>üóÇÔ∏è Serialization - JSON, XML, and Binary</h4><h5>JSON Serialization with System.Text.Json:</h5><pre><code>public class JsonSerialization\n{\n    // Save object to JSON file\n    public async Task SaveAsJsonAsync<T>(string filePath, T obj)\n    {\n        var options = new JsonSerializerOptions\n        {\n            WriteIndented = true,\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n        };\n        \n        var json = JsonSerializer.Serialize(obj, options);\n        await File.WriteAllTextAsync(filePath, json, Encoding.UTF8);\n    }\n    \n    // Load object from JSON file\n    public async Task<T?> LoadFromJsonAsync<T>(string filePath)\n    {\n        if (!File.Exists(filePath))\n            return default(T);\n            \n        try\n        {\n            var json = await File.ReadAllTextAsync(filePath, Encoding.UTF8);\n            \n            var options = new JsonSerializerOptions\n            {\n                PropertyNameCaseInsensitive = true,\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            };\n            \n            return JsonSerializer.Deserialize<T>(json, options);\n        }\n        catch (JsonException ex)\n        {\n            Console.WriteLine($\"JSON parsing error in {filePath}: {ex.Message}\");\n            return default(T);\n        }\n    }\n    \n    // Save with streaming for large objects\n    public async Task SaveAsJsonStreamAsync<T>(string filePath, T obj)\n    {\n        using var fileStream = File.Create(filePath);\n        \n        var options = new JsonSerializerOptions\n        {\n            WriteIndented = true,\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n        };\n        \n        await JsonSerializer.SerializeAsync(fileStream, obj, options);\n    }\n    \n    // Load with streaming\n    public async Task<T?> LoadFromJsonStreamAsync<T>(string filePath)\n    {\n        if (!File.Exists(filePath))\n            return default(T);\n            \n        using var fileStream = File.OpenRead(filePath);\n        \n        var options = new JsonSerializerOptions\n        {\n            PropertyNameCaseInsensitive = true\n        };\n        \n        return await JsonSerializer.DeserializeAsync<T>(fileStream, options);\n    }\n}</code></pre><h5>XML Serialization:</h5><pre><code>public class XmlSerialization\n{\n    // Save object to XML file\n    public async Task SaveAsXmlAsync<T>(string filePath, T obj)\n    {\n        var serializer = new XmlSerializer(typeof(T));\n        \n        using var fileStream = File.Create(filePath);\n        using var writer = XmlWriter.Create(fileStream, new XmlWriterSettings\n        {\n            Indent = true,\n            IndentChars = \"  \",\n            Encoding = Encoding.UTF8\n        });\n        \n        serializer.Serialize(writer, obj);\n        await writer.FlushAsync();\n    }\n    \n    // Load object from XML file\n    public async Task<T?> LoadFromXmlAsync<T>(string filePath)\n    {\n        if (!File.Exists(filePath))\n            return default(T);\n            \n        try\n        {\n            var serializer = new XmlSerializer(typeof(T));\n            \n            using var fileStream = File.OpenRead(filePath);\n            return (T?)serializer.Deserialize(fileStream);\n        }\n        catch (InvalidOperationException ex)\n        {\n            Console.WriteLine($\"XML parsing error in {filePath}: {ex.Message}\");\n            return default(T);\n        }\n    }\n}\n\n// Example XML serializable class\n[XmlRoot(\"PersonData\")]\npublic class PersonXml\n{\n    [XmlElement(\"FullName\")]\n    public string Name { get; set; } = string.Empty;\n    \n    [XmlElement(\"Years\")]\n    public int Age { get; set; }\n    \n    [XmlElement(\"EmailAddress\")]\n    public string Email { get; set; } = string.Empty;\n    \n    [XmlArray(\"Hobbies\")]\n    [XmlArrayItem(\"Hobby\")]\n    public List<string> Hobbies { get; set; } = new List<string>();\n}</code></pre><h5>Binary Serialization (for .NET objects):</h5><pre><code>public class BinarySerialization\n{\n    // Save using MessagePack (high-performance binary serializer)\n    public async Task SaveAsBinaryAsync<T>(string filePath, T obj)\n    {\n        var bytes = MessagePackSerializer.Serialize(obj);\n        await File.WriteAllBytesAsync(filePath, bytes);\n    }\n    \n    // Load using MessagePack\n    public async Task<T?> LoadFromBinaryAsync<T>(string filePath)\n    {\n        if (!File.Exists(filePath))\n            return default(T);\n            \n        try\n        {\n            var bytes = await File.ReadAllBytesAsync(filePath);\n            return MessagePackSerializer.Deserialize<T>(bytes);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Binary deserialization error in {filePath}: {ex.Message}\");\n            return default(T);\n        }\n    }\n    \n    // Custom binary format example\n    public async Task SaveCustomBinaryAsync(string filePath, List<Person> people)\n    {\n        using var fileStream = File.Create(filePath);\n        using var writer = new BinaryWriter(fileStream);\n        \n        // Write version for future compatibility\n        writer.Write(1); // Version\n        \n        // Write count\n        writer.Write(people.Count);\n        \n        // Write each person\n        foreach (var person in people)\n        {\n            writer.Write(person.Name);\n            writer.Write(person.Age);\n            writer.Write(person.Email);\n        }\n        \n        await writer.FlushAsync();\n    }\n    \n    public async Task<List<Person>> LoadCustomBinaryAsync(string filePath)\n    {\n        if (!File.Exists(filePath))\n            return new List<Person>();\n            \n        using var fileStream = File.OpenRead(filePath);\n        using var reader = new BinaryReader(fileStream);\n        \n        // Read version\n        var version = reader.ReadInt32();\n        if (version != 1)\n            throw new InvalidDataException($\"Unsupported file version: {version}\");\n        \n        // Read count\n        var count = reader.ReadInt32();\n        var people = new List<Person>(count);\n        \n        // Read each person\n        for (int i = 0; i < count; i++)\n        {\n            people.Add(new Person\n            {\n                Name = reader.ReadString(),\n                Age = reader.ReadInt32(),\n                Email = reader.ReadString()\n            });\n        }\n        \n        return people;\n    }\n}</code></pre><h4>üåä Stream Operations</h4><h5>Working with Different Stream Types:</h5><pre><code>public class StreamExamples\n{\n    // FileStream for file operations\n    public async Task FileStreamExampleAsync(string filePath)\n    {\n        // Writing with FileStream\n        using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write))\n        {\n            var data = Encoding.UTF8.GetBytes(\"Hello, FileStream!\");\n            await fileStream.WriteAsync(data, 0, data.Length);\n        }\n        \n        // Reading with FileStream\n        using (var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))\n        {\n            var buffer = new byte[fileStream.Length];\n            await fileStream.ReadAsync(buffer, 0, buffer.Length);\n            var content = Encoding.UTF8.GetString(buffer);\n            Console.WriteLine(content);\n        }\n    }\n    \n    // MemoryStream for in-memory operations\n    public async Task MemoryStreamExampleAsync()\n    {\n        using var memoryStream = new MemoryStream();\n        \n        // Write to memory stream\n        var data = Encoding.UTF8.GetBytes(\"Hello, MemoryStream!\");\n        await memoryStream.WriteAsync(data, 0, data.Length);\n        \n        // Reset position to read from beginning\n        memoryStream.Position = 0;\n        \n        // Read from memory stream\n        var buffer = new byte[memoryStream.Length];\n        await memoryStream.ReadAsync(buffer, 0, buffer.Length);\n        var content = Encoding.UTF8.GetString(buffer);\n        Console.WriteLine(content);\n        \n        // Get all bytes\n        var allBytes = memoryStream.ToArray();\n    }\n    \n    // BufferedStream for improved performance\n    public async Task BufferedStreamExampleAsync(string filePath)\n    {\n        using var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write);\n        using var bufferedStream = new BufferedStream(fileStream, bufferSize: 8192);\n        \n        // Multiple small writes are buffered\n        for (int i = 0; i < 1000; i++)\n        {\n            var data = Encoding.UTF8.GetBytes($\"Line {i}\\n\");\n            await bufferedStream.WriteAsync(data, 0, data.Length);\n        }\n        \n        // Flush to ensure all data is written\n        await bufferedStream.FlushAsync();\n    }\n    \n    // CryptoStream for encryption\n    public async Task CryptoStreamExampleAsync(string filePath, byte[] key, byte[] iv)\n    {\n        using var aes = Aes.Create();\n        aes.Key = key;\n        aes.IV = iv;\n        \n        // Encrypt and write\n        using (var fileStream = File.Create(filePath))\n        using (var cryptoStream = new CryptoStream(fileStream, aes.CreateEncryptor(), CryptoStreamMode.Write))\n        {\n            var data = Encoding.UTF8.GetBytes(\"Secret message\");\n            await cryptoStream.WriteAsync(data, 0, data.Length);\n        }\n        \n        // Read and decrypt\n        using (var fileStream = File.OpenRead(filePath))\n        using (var cryptoStream = new CryptoStream(fileStream, aes.CreateDecryptor(), CryptoStreamMode.Read))\n        {\n            var buffer = new byte[1024];\n            var bytesRead = await cryptoStream.ReadAsync(buffer, 0, buffer.Length);\n            var decryptedText = Encoding.UTF8.GetString(buffer, 0, bytesRead);\n            Console.WriteLine(decryptedText);\n        }\n    }\n    \n    // GZipStream for compression\n    public async Task GZipStreamExampleAsync(string inputFile, string compressedFile)\n    {\n        // Compress\n        using (var inputStream = File.OpenRead(inputFile))\n        using (var outputStream = File.Create(compressedFile))\n        using (var gzipStream = new GZipStream(outputStream, CompressionMode.Compress))\n        {\n            await inputStream.CopyToAsync(gzipStream);\n        }\n        \n        Console.WriteLine($\"Compression ratio: {new FileInfo(inputFile).Length / (double)new FileInfo(compressedFile).Length:F2}:1\");\n        \n        // Decompress\n        using (var compressedStream = File.OpenRead(compressedFile))\n        using (var gzipStream = new GZipStream(compressedStream, CompressionMode.Decompress))\n        using (var outputStream = File.Create(inputFile + \".decompressed\"))\n        {\n            await gzipStream.CopyToAsync(outputStream);\n        }\n    }\n}</code></pre><h4>üèÜ Best Practices</h4><ul><li>Always use async methods for file I/O operations</li><li>Implement proper exception handling for file operations</li><li>Use 'using' statements to ensure proper resource disposal</li><li>Consider file locking and concurrent access scenarios</li><li>Use appropriate buffer sizes for performance</li><li>Validate file paths and handle security concerns</li><li>Use atomic operations when consistency is critical</li><li>Implement retry logic for transient failures</li><li>Choose the right serialization format for your needs</li><li>Use streaming for large files to avoid memory issues</li></ul><h4>üöÄ Modern File I/O Features</h4><ul><li><strong>System.IO.Pipelines</strong> - High-performance I/O operations</li><li><strong>IAsyncEnumerable</strong> - Streaming file processing</li><li><strong>Memory<T> and Span<T></strong> - Zero-allocation file processing</li><li><strong>File.OpenHandle()</strong> - Low-level file handle operations</li><li><strong>Directory.EnumerateFiles()</strong> - Lazy enumeration of files</li><li><strong>Path.Join()</strong> - Cross-platform path operations</li></ul></div>",
      "code": "await File.WriteAllTextAsync(\"data.json\", JsonSerializer.Serialize(obj));",
      "quiz": [ {"q":"Which API serializes JSON in .NET?","options":["System.Text.Json","System.Xml"],"answer":0} ]
    },
    {
      "id": 26,
      "tier": 2,
      "title": "WPF Basics",
      "description": "XAML, layouts, controls, data binding.",
      "concepts": ["XAML Basics", "Layouts", "Controls", "Data Binding", "INotifyPropertyChanged"],
      "requirements": ["Bind a TextBox to a ViewModel property"],
      "theory": "<div class='theory-content'><h4>üé® WPF Basics - Windows Presentation Foundation</h4><p>WPF is a powerful framework for building rich desktop applications in .NET. It separates design from logic using XAML for UI declaration and C# for business logic, with robust data binding and styling capabilities.</p><h4>üìù XAML Fundamentals - Declarative UI</h4><h5>Basic XAML Structure:</h5><pre><code><!-- MainWindow.xaml -->\n<Window x:Class=\"MyApp.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        Title=\"My WPF Application\" Height=\"450\" Width=\"800\">\n    \n    <!-- Window Content -->\n    <Grid>\n        <!-- Define rows and columns -->\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />      <!-- Header -->\n            <RowDefinition Height=\"*\" />         <!-- Content -->\n            <RowDefinition Height=\"Auto\" />      <!-- Footer -->\n        </Grid.RowDefinitions>\n        \n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"200\" />     <!-- Sidebar -->\n            <ColumnDefinition Width=\"*\" />       <!-- Main content -->\n        </Grid.ColumnDefinitions>\n        \n        <!-- Header spanning both columns -->\n        <TextBlock Grid.Row=\"0\" Grid.ColumnSpan=\"2\" \n                   Text=\"Welcome to WPF\" \n                   FontSize=\"24\" \n                   FontWeight=\"Bold\" \n                   HorizontalAlignment=\"Center\" \n                   Margin=\"10\" />\n        \n        <!-- Sidebar -->\n        <StackPanel Grid.Row=\"1\" Grid.Column=\"0\" \n                    Background=\"LightGray\" \n                    Margin=\"5\">\n            <Button Content=\"Home\" Margin=\"5\" />\n            <Button Content=\"Settings\" Margin=\"5\" />\n            <Button Content=\"About\" Margin=\"5\" />\n        </StackPanel>\n        \n        <!-- Main content area -->\n        <Border Grid.Row=\"1\" Grid.Column=\"1\" \n                Background=\"White\" \n                BorderBrush=\"Gray\" \n                BorderThickness=\"1\" \n                Margin=\"5\">\n            <TextBlock Text=\"Main content goes here\" \n                       HorizontalAlignment=\"Center\" \n                       VerticalAlignment=\"Center\" />\n        </Border>\n        \n        <!-- Footer -->\n        <StatusBar Grid.Row=\"2\" Grid.ColumnSpan=\"2\">\n            <StatusBarItem Content=\"Ready\" />\n            <StatusBarItem HorizontalAlignment=\"Right\" \n                          Content=\"Version 1.0\" />\n        </StatusBar>\n    </Grid>\n</Window></code></pre><h5>XAML Syntax and Concepts:</h5><pre><code><!-- XAML Namespace and Class Declaration -->\n<UserControl x:Class=\"MyApp.Views.PersonView\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             xmlns:local=\"clr-namespace:MyApp.Views\">\n    \n    <StackPanel>\n        <!-- Property Element Syntax -->\n        <TextBlock>\n            <TextBlock.Text>Hello World</TextBlock.Text>\n            <TextBlock.FontSize>16</TextBlock.FontSize>\n            <TextBlock.Foreground>\n                <SolidColorBrush Color=\"Blue\" />\n            </TextBlock.Foreground>\n        </TextBlock>\n        \n        <!-- Attribute Syntax (more common) -->\n        <TextBlock Text=\"Hello World\" \n                   FontSize=\"16\" \n                   Foreground=\"Blue\" />\n        \n        <!-- Markup Extensions -->\n        <TextBlock Text=\"{Binding PersonName}\" \n                   FontSize=\"{StaticResource DefaultFontSize}\" \n                   Foreground=\"{DynamicResource PrimaryBrush}\" />\n        \n        <!-- Collections in XAML -->\n        <ListBox>\n            <ListBox.Items>\n                <ListBoxItem Content=\"Item 1\" />\n                <ListBoxItem Content=\"Item 2\" />\n                <ListBoxItem Content=\"Item 3\" />\n            </ListBox.Items>\n        </ListBox>\n        \n        <!-- Simplified collection syntax -->\n        <ListBox>\n            <ListBoxItem Content=\"Item 1\" />\n            <ListBoxItem Content=\"Item 2\" />\n            <ListBoxItem Content=\"Item 3\" />\n        </ListBox>\n        \n        <!-- Attached Properties -->\n        <Canvas>\n            <Button Content=\"Click Me\" \n                    Canvas.Left=\"50\" \n                    Canvas.Top=\"100\" />\n        </Canvas>\n        \n        <!-- Event Handlers -->\n        <Button Content=\"Click Me\" \n                Click=\"Button_Click\" \n                MouseEnter=\"Button_MouseEnter\" />\n    </StackPanel>\n</UserControl></code></pre><h4>üìã Layout Panels - Organizing UI Elements</h4><h5>Different Layout Strategies:</h5><pre><code><!-- StackPanel - Stacks elements vertically or horizontally -->\n<StackPanel Orientation=\"Vertical\" Margin=\"10\">\n    <TextBlock Text=\"Name:\" />\n    <TextBox x:Name=\"NameTextBox\" Margin=\"0,5\" />\n    <TextBlock Text=\"Email:\" Margin=\"0,10,0,0\" />\n    <TextBox x:Name=\"EmailTextBox\" Margin=\"0,5\" />\n    <Button Content=\"Submit\" Margin=\"0,10\" HorizontalAlignment=\"Left\" />\n</StackPanel>\n\n<!-- Grid - Flexible row/column layout -->\n<Grid Margin=\"10\">\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"Auto\" />\n    </Grid.RowDefinitions>\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" />\n        <ColumnDefinition Width=\"*\" />\n    </Grid.ColumnDefinitions>\n    \n    <TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Name:\" VerticalAlignment=\"Center\" Margin=\"0,0,10,0\" />\n    <TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"NameTextBox\" Margin=\"0,5\" />\n    \n    <TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Text=\"Email:\" VerticalAlignment=\"Center\" Margin=\"0,0,10,0\" />\n    <TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"EmailTextBox\" Margin=\"0,5\" />\n    \n    <Button Grid.Row=\"2\" Grid.Column=\"1\" Content=\"Submit\" HorizontalAlignment=\"Left\" Margin=\"0,10\" />\n</Grid>\n\n<!-- DockPanel - Docks elements to edges -->\n<DockPanel LastChildFill=\"True\">\n    <Menu DockPanel.Dock=\"Top\">\n        <MenuItem Header=\"File\">\n            <MenuItem Header=\"New\" />\n            <MenuItem Header=\"Open\" />\n            <MenuItem Header=\"Save\" />\n        </MenuItem>\n    </Menu>\n    \n    <StatusBar DockPanel.Dock=\"Bottom\">\n        <StatusBarItem Content=\"Ready\" />\n    </StatusBar>\n    \n    <ToolBar DockPanel.Dock=\"Top\">\n        <Button Content=\"New\" />\n        <Button Content=\"Open\" />\n        <Button Content=\"Save\" />\n    </ToolBar>\n    \n    <!-- This fills the remaining space -->\n    <TextBox AcceptsReturn=\"True\" \n             VerticalScrollBarVisibility=\"Auto\" \n             HorizontalScrollBarVisibility=\"Auto\" />\n</DockPanel>\n\n<!-- WrapPanel - Wraps elements to next line/column -->\n<WrapPanel Orientation=\"Horizontal\" Margin=\"10\">\n    <Button Content=\"Button 1\" Margin=\"5\" />\n    <Button Content=\"Button 2\" Margin=\"5\" />\n    <Button Content=\"Button 3\" Margin=\"5\" />\n    <Button Content=\"Button 4\" Margin=\"5\" />\n    <Button Content=\"Button 5\" Margin=\"5\" />\n    <!-- These will wrap to next line if window is too narrow -->\n</WrapPanel>\n\n<!-- UniformGrid - Equal-sized cells -->\n<UniformGrid Rows=\"2\" Columns=\"3\" Margin=\"10\">\n    <Button Content=\"1\" />\n    <Button Content=\"2\" />\n    <Button Content=\"3\" />\n    <Button Content=\"4\" />\n    <Button Content=\"5\" />\n    <Button Content=\"6\" />\n</UniformGrid>\n\n<!-- Canvas - Absolute positioning -->\n<Canvas Background=\"LightBlue\" Height=\"200\">\n    <Rectangle Width=\"50\" Height=\"50\" Fill=\"Red\" \n               Canvas.Left=\"10\" Canvas.Top=\"10\" />\n    <Ellipse Width=\"60\" Height=\"60\" Fill=\"Blue\" \n             Canvas.Left=\"100\" Canvas.Top=\"50\" />\n    <TextBlock Text=\"Absolute positioning\" \n               Canvas.Left=\"20\" Canvas.Top=\"100\" />\n</Canvas></code></pre><h4>üéõÔ∏è Common Controls - Building Interactive UI</h4><h5>Input Controls:</h5><pre><code><!-- Text Input Controls -->\n<StackPanel Margin=\"10\">\n    <!-- TextBox for single/multi-line text -->\n    <TextBlock Text=\"Single Line:\" />\n    <TextBox x:Name=\"SingleLineTextBox\" \n             Watermark=\"Enter text here...\" \n             Margin=\"0,5,0,10\" />\n    \n    <TextBlock Text=\"Multi Line:\" />\n    <TextBox x:Name=\"MultiLineTextBox\" \n             AcceptsReturn=\"True\" \n             TextWrapping=\"Wrap\" \n             Height=\"60\" \n             VerticalScrollBarVisibility=\"Auto\" \n             Margin=\"0,5,0,10\" />\n    \n    <!-- PasswordBox for sensitive data -->\n    <TextBlock Text=\"Password:\" />\n    <PasswordBox x:Name=\"PasswordBox\" \n                 PasswordChar=\"*\" \n                 Margin=\"0,5,0,10\" />\n    \n    <!-- RichTextBox for formatted text -->\n    <TextBlock Text=\"Rich Text:\" />\n    <RichTextBox x:Name=\"RichTextBox\" \n                 Height=\"100\" \n                 Margin=\"0,5,0,10\">\n        <FlowDocument>\n            <Paragraph>\n                <Run Text=\"Bold text\" FontWeight=\"Bold\" />\n                <Run Text=\" and \" />\n                <Run Text=\"italic text\" FontStyle=\"Italic\" />\n            </Paragraph>\n        </FlowDocument>\n    </RichTextBox>\n</StackPanel>\n\n<!-- Selection Controls -->\n<StackPanel Margin=\"10\">\n    <!-- CheckBox for boolean values -->\n    <CheckBox x:Name=\"AgreeCheckBox\" \n              Content=\"I agree to the terms\" \n              Margin=\"0,5\" />\n    \n    <CheckBox x:Name=\"ThreeStateCheckBox\" \n              Content=\"Three-state checkbox\" \n              IsThreeState=\"True\" \n              Margin=\"0,5\" />\n    \n    <!-- RadioButton for exclusive selection -->\n    <TextBlock Text=\"Select size:\" Margin=\"0,10,0,5\" />\n    <StackPanel Orientation=\"Horizontal\">\n        <RadioButton x:Name=\"SmallRadio\" \n                     Content=\"Small\" \n                     GroupName=\"Size\" \n                     Margin=\"0,0,10,0\" />\n        <RadioButton x:Name=\"MediumRadio\" \n                     Content=\"Medium\" \n                     GroupName=\"Size\" \n                     IsChecked=\"True\" \n                     Margin=\"0,0,10,0\" />\n        <RadioButton x:Name=\"LargeRadio\" \n                     Content=\"Large\" \n                     GroupName=\"Size\" />\n    </StackPanel>\n    \n    <!-- ComboBox for dropdown selection -->\n    <TextBlock Text=\"Select country:\" Margin=\"0,10,0,5\" />\n    <ComboBox x:Name=\"CountryComboBox\" \n              SelectedIndex=\"0\" \n              Margin=\"0,5\">\n        <ComboBoxItem Content=\"United States\" />\n        <ComboBoxItem Content=\"Canada\" />\n        <ComboBoxItem Content=\"United Kingdom\" />\n        <ComboBoxItem Content=\"Australia\" />\n    </ComboBox>\n    \n    <!-- ListBox for multiple selection -->\n    <TextBlock Text=\"Select interests:\" Margin=\"0,10,0,5\" />\n    <ListBox x:Name=\"InterestsListBox\" \n             SelectionMode=\"Multiple\" \n             Height=\"100\" \n             Margin=\"0,5\">\n        <ListBoxItem Content=\"Programming\" />\n        <ListBoxItem Content=\"Design\" />\n        <ListBoxItem Content=\"Music\" />\n        <ListBoxItem Content=\"Sports\" />\n        <ListBoxItem Content=\"Reading\" />\n    </ListBox>\n</StackPanel>\n\n<!-- Action Controls -->\n<StackPanel Orientation=\"Horizontal\" \n            HorizontalAlignment=\"Center\" \n            Margin=\"10\">\n    <Button x:Name=\"SaveButton\" \n            Content=\"Save\" \n            Width=\"80\" \n            Height=\"30\" \n            Margin=\"5\" \n            Click=\"SaveButton_Click\" />\n    \n    <Button x:Name=\"CancelButton\" \n            Content=\"Cancel\" \n            Width=\"80\" \n            Height=\"30\" \n            Margin=\"5\" \n            IsCancel=\"True\" />\n    \n    <Button x:Name=\"HelpButton\" \n            Content=\"Help\" \n            Width=\"80\" \n            Height=\"30\" \n            Margin=\"5\">\n        <!-- Button with custom content -->\n        <Button.Content>\n            <StackPanel Orientation=\"Horizontal\">\n                <Image Source=\"help.png\" Width=\"16\" Height=\"16\" />\n                <TextBlock Text=\"Help\" Margin=\"5,0\" />\n            </StackPanel>\n        </Button.Content>\n    </Button>\n</StackPanel></code></pre><h4>üîó Data Binding - Connecting UI to Data</h4><h5>Basic Data Binding Concepts:</h5><pre><code>// Code-behind for data binding examples\npublic partial class PersonView : UserControl, INotifyPropertyChanged\n{\n    private string _name = string.Empty;\n    private int _age;\n    private ObservableCollection<string> _hobbies;\n    \n    public PersonView()\n    {\n        InitializeComponent();\n        DataContext = this; // Set the data context to this control\n        \n        // Initialize collection\n        Hobbies = new ObservableCollection<string>\n        {\n            \"Reading\", \"Programming\", \"Gaming\"\n        };\n    }\n    \n    // Properties with change notification\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            if (_name != value)\n            {\n                _name = value;\n                OnPropertyChanged();\n                OnPropertyChanged(nameof(DisplayName)); // Update computed property\n            }\n        }\n    }\n    \n    public int Age\n    {\n        get => _age;\n        set\n        {\n            if (_age != value)\n            {\n                _age = value;\n                OnPropertyChanged();\n                OnPropertyChanged(nameof(DisplayName));\n            }\n        }\n    }\n    \n    // Computed property\n    public string DisplayName => $\"{Name} ({Age} years old)\";\n    \n    // Observable collection for list binding\n    public ObservableCollection<string> Hobbies\n    {\n        get => _hobbies;\n        set\n        {\n            _hobbies = value;\n            OnPropertyChanged();\n        }\n    }\n    \n    // INotifyPropertyChanged implementation\n    public event PropertyChangedEventHandler? PropertyChanged;\n    \n    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n    \n    // Command for button binding\n    public ICommand AddHobbyCommand => new RelayCommand(AddHobby, CanAddHobby);\n    \n    private void AddHobby(object? parameter)\n    {\n        if (parameter is string hobby && !string.IsNullOrWhiteSpace(hobby))\n        {\n            Hobbies.Add(hobby);\n        }\n    }\n    \n    private bool CanAddHobby(object? parameter)\n    {\n        return parameter is string hobby && !string.IsNullOrWhiteSpace(hobby);\n    }\n}\n\n// Simple command implementation\npublic class RelayCommand : ICommand\n{\n    private readonly Action<object?> _execute;\n    private readonly Func<object?, bool>? _canExecute;\n    \n    public RelayCommand(Action<object?> execute, Func<object?, bool>? canExecute = null)\n    {\n        _execute = execute ?? throw new ArgumentNullException(nameof(execute));\n        _canExecute = canExecute;\n    }\n    \n    public event EventHandler? CanExecuteChanged\n    {\n        add { CommandManager.RequerySuggested += value; }\n        remove { CommandManager.RequerySuggested -= value; }\n    }\n    \n    public bool CanExecute(object? parameter)\n    {\n        return _canExecute?.Invoke(parameter) ?? true;\n    }\n    \n    public void Execute(object? parameter)\n    {\n        _execute(parameter);\n    }\n}</code></pre><h5>XAML Data Binding Examples:</h5><pre><code><!-- PersonView.xaml -->\n<UserControl x:Class=\"MyApp.Views.PersonView\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n    \n    <Grid Margin=\"20\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"Auto\" />\n        </Grid.RowDefinitions>\n        \n        <!-- Two-way binding with immediate updates -->\n        <StackPanel Grid.Row=\"0\" Margin=\"0,0,0,10\">\n            <TextBlock Text=\"Name:\" />\n            <TextBox Text=\"{Binding Name, UpdateSourceTrigger=PropertyChanged}\" \n                     Margin=\"0,5\" />\n        </StackPanel>\n        \n        <!-- Numeric binding with validation -->\n        <StackPanel Grid.Row=\"1\" Margin=\"0,0,0,10\">\n            <TextBlock Text=\"Age:\" />\n            <TextBox Margin=\"0,5\">\n                <TextBox.Text>\n                    <Binding Path=\"Age\" \n                             UpdateSourceTrigger=\"PropertyChanged\"\n                             ValidatesOnDataErrors=\"True\"\n                             NotifyOnValidationError=\"True\">\n                        <Binding.ValidationRules>\n                            <local:AgeValidationRule Min=\"0\" Max=\"150\" />\n                        </Binding.ValidationRules>\n                    </Binding>\n                </TextBox.Text>\n            </TextBox>\n        </StackPanel>\n        \n        <!-- Read-only computed property binding -->\n        <StackPanel Grid.Row=\"2\" Margin=\"0,0,0,10\">\n            <TextBlock Text=\"Display Name:\" />\n            <TextBlock Text=\"{Binding DisplayName}\" \n                       FontWeight=\"Bold\" \n                       Margin=\"0,5\" />\n        </StackPanel>\n        \n        <!-- Collection binding -->\n        <StackPanel Grid.Row=\"3\" Margin=\"0,0,0,10\">\n            <TextBlock Text=\"Hobbies:\" />\n            <ListBox ItemsSource=\"{Binding Hobbies}\" \n                     Height=\"100\" \n                     Margin=\"0,5\" />\n        </StackPanel>\n        \n        <!-- Command binding -->\n        <StackPanel Grid.Row=\"4\" Orientation=\"Horizontal\">\n            <TextBox x:Name=\"NewHobbyTextBox\" \n                     Width=\"150\" \n                     Margin=\"0,0,10,0\" />\n            <Button Content=\"Add Hobby\" \n                    Command=\"{Binding AddHobbyCommand}\" \n                    CommandParameter=\"{Binding Text, ElementName=NewHobbyTextBox}\" />\n        </StackPanel>\n    </Grid>\n</UserControl>\n\n<!-- Custom validation rule -->\npublic class AgeValidationRule : ValidationRule\n{\n    public int Min { get; set; }\n    public int Max { get; set; }\n    \n    public override ValidationResult Validate(object value, CultureInfo cultureInfo)\n    {\n        if (value is string str && int.TryParse(str, out int age))\n        {\n            if (age < Min || age > Max)\n            {\n                return new ValidationResult(false, $\"Age must be between {Min} and {Max}\");\n            }\n            return ValidationResult.ValidResult;\n        }\n        \n        return new ValidationResult(false, \"Invalid age format\");\n    }\n}</code></pre><h4>üé® Styling and Resources</h4><h5>Basic Styling:</h5><pre><code><!-- App.xaml - Application-wide resources -->\n<Application x:Class=\"MyApp.App\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             StartupUri=\"MainWindow.xaml\">\n    <Application.Resources>\n        <!-- Colors -->\n        <SolidColorBrush x:Key=\"PrimaryBrush\" Color=\"#2196F3\" />\n        <SolidColorBrush x:Key=\"SecondaryBrush\" Color=\"#FFC107\" />\n        <SolidColorBrush x:Key=\"DangerBrush\" Color=\"#F44336\" />\n        \n        <!-- Font Sizes -->\n        <System:Double x:Key=\"LargeFontSize\">18</System:Double>\n        <System:Double x:Key=\"MediumFontSize\">14</System:Double>\n        <System:Double x:Key=\"SmallFontSize\">12</System:Double>\n        \n        <!-- Button Styles -->\n        <Style x:Key=\"PrimaryButtonStyle\" TargetType=\"Button\">\n            <Setter Property=\"Background\" Value=\"{StaticResource PrimaryBrush}\" />\n            <Setter Property=\"Foreground\" Value=\"White\" />\n            <Setter Property=\"FontWeight\" Value=\"Bold\" />\n            <Setter Property=\"Padding\" Value=\"15,8\" />\n            <Setter Property=\"BorderThickness\" Value=\"0\" />\n            <Setter Property=\"Cursor\" Value=\"Hand\" />\n            <Setter Property=\"Template\">\n                <Setter.Value>\n                    <ControlTemplate TargetType=\"Button\">\n                        <Border Background=\"{TemplateBinding Background}\"\n                                CornerRadius=\"4\"\n                                Padding=\"{TemplateBinding Padding}\">\n                            <ContentPresenter HorizontalAlignment=\"Center\"\n                                            VerticalAlignment=\"Center\" />\n                        </Border>\n                        <ControlTemplate.Triggers>\n                            <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                                <Setter Property=\"Background\" Value=\"#1976D2\" />\n                            </Trigger>\n                            <Trigger Property=\"IsPressed\" Value=\"True\">\n                                <Setter Property=\"Background\" Value=\"#0D47A1\" />\n                            </Trigger>\n                        </ControlTemplate.Triggers>\n                    </ControlTemplate>\n                </Setter.Value>\n            </Setter>\n        </Style>\n        \n        <!-- TextBox Style -->\n        <Style x:Key=\"ModernTextBoxStyle\" TargetType=\"TextBox\">\n            <Setter Property=\"Padding\" Value=\"8\" />\n            <Setter Property=\"BorderThickness\" Value=\"1\" />\n            <Setter Property=\"BorderBrush\" Value=\"#CCCCCC\" />\n            <Setter Property=\"FontSize\" Value=\"{StaticResource MediumFontSize}\" />\n            <Style.Triggers>\n                <Trigger Property=\"IsFocused\" Value=\"True\">\n                    <Setter Property=\"BorderBrush\" Value=\"{StaticResource PrimaryBrush}\" />\n                    <Setter Property=\"BorderThickness\" Value=\"2\" />\n                </Trigger>\n            </Style.Triggers>\n        </Style>\n    </Application.Resources>\n</Application></code></pre><h4>üèÜ Best Practices</h4><ul><li>Use MVVM pattern to separate UI from business logic</li><li>Implement INotifyPropertyChanged for data binding</li><li>Use ObservableCollection for dynamic lists</li><li>Leverage data templates for custom item presentation</li><li>Create reusable styles and control templates</li><li>Use commands instead of event handlers for better testability</li><li>Implement proper validation for user input</li><li>Use resource dictionaries to organize styles and templates</li><li>Follow naming conventions for XAML elements</li><li>Test UI thoroughly with different data scenarios</li></ul></div>",
      "code": "<TextBox Text=\"{Binding Name, UpdateSourceTrigger=PropertyChanged}\"/>",
      "quiz": [ {"q":"Which interface notifies property changes?","options":["INotifyPropertyChanged","IEnumerable"],"answer":0} ]
    },
    {
      "id": 27,
      "tier": 2,
      "title": "Advanced WPF",
      "description": "Styles, templates, commands, MVVM.",
      "concepts": ["Styles", "Templates", "ICommand", "MVVM"],
      "requirements": ["Bind a Button to an ICommand"],
      "theory": "<div class='theory-content'><h4>üé® Advanced WPF - Styles, Templates, Commands, and MVVM</h4><p>Advanced WPF development focuses on creating maintainable, testable, and visually appealing applications using sophisticated patterns and techniques for separation of concerns and code organization.</p><h4>‚ú® Styles - Consistent Visual Design</h4><h5>Creating and Using Styles:</h5><pre><code><!-- Resource Dictionary for Styles -->\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n    \n    <!-- Base Button Style -->\n    <Style x:Key=\"BaseButtonStyle\" TargetType=\"Button\">\n        <Setter Property=\"FontFamily\" Value=\"Segoe UI\" />\n        <Setter Property=\"FontSize\" Value=\"14\" />\n        <Setter Property=\"Padding\" Value=\"12,6\" />\n        <Setter Property=\"Margin\" Value=\"5\" />\n        <Setter Property=\"BorderThickness\" Value=\"1\" />\n        <Setter Property=\"Cursor\" Value=\"Hand\" />\n        <Setter Property=\"Template\">\n            <Setter.Value>\n                <ControlTemplate TargetType=\"Button\">\n                    <Border x:Name=\"Border\"\n                            Background=\"{TemplateBinding Background}\"\n                            BorderBrush=\"{TemplateBinding BorderBrush}\"\n                            BorderThickness=\"{TemplateBinding BorderThickness}\"\n                            CornerRadius=\"4\"\n                            Padding=\"{TemplateBinding Padding}\">\n                        <ContentPresenter HorizontalAlignment=\"Center\"\n                                        VerticalAlignment=\"Center\"\n                                        RecognizesAccessKey=\"True\" />\n                    </Border>\n                    <ControlTemplate.Triggers>\n                        <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                            <Setter TargetName=\"Border\" Property=\"Background\" Value=\"{DynamicResource HoverBrush}\" />\n                        </Trigger>\n                        <Trigger Property=\"IsPressed\" Value=\"True\">\n                            <Setter TargetName=\"Border\" Property=\"Background\" Value=\"{DynamicResource PressedBrush}\" />\n                        </Trigger>\n                        <Trigger Property=\"IsEnabled\" Value=\"False\">\n                            <Setter Property=\"Opacity\" Value=\"0.5\" />\n                        </Trigger>\n                    </ControlTemplate.Triggers>\n                </ControlTemplate>\n            </Setter.Value>\n        </Setter>\n    </Style>\n    \n    <!-- Primary Button Style (inherits from base) -->\n    <Style x:Key=\"PrimaryButtonStyle\" TargetType=\"Button\" BasedOn=\"{StaticResource BaseButtonStyle}\">\n        <Setter Property=\"Background\" Value=\"#2196F3\" />\n        <Setter Property=\"Foreground\" Value=\"White\" />\n        <Setter Property=\"BorderBrush\" Value=\"#1976D2\" />\n    </Style>\n    \n    <!-- Secondary Button Style -->\n    <Style x:Key=\"SecondaryButtonStyle\" TargetType=\"Button\" BasedOn=\"{StaticResource BaseButtonStyle}\">\n        <Setter Property=\"Background\" Value=\"#FFFFFF\" />\n        <Setter Property=\"Foreground\" Value=\"#2196F3\" />\n        <Setter Property=\"BorderBrush\" Value=\"#2196F3\" />\n    </Style>\n    \n    <!-- Danger Button Style -->\n    <Style x:Key=\"DangerButtonStyle\" TargetType=\"Button\" BasedOn=\"{StaticResource BaseButtonStyle}\">\n        <Setter Property=\"Background\" Value=\"#F44336\" />\n        <Setter Property=\"Foreground\" Value=\"White\" />\n        <Setter Property=\"BorderBrush\" Value=\"#D32F2F\" />\n    </Style>\n    \n    <!-- Implicit style (applies to all TextBoxes automatically) -->\n    <Style TargetType=\"TextBox\">\n        <Setter Property=\"Padding\" Value=\"8\" />\n        <Setter Property=\"BorderThickness\" Value=\"1\" />\n        <Setter Property=\"BorderBrush\" Value=\"#CCCCCC\" />\n        <Setter Property=\"FontSize\" Value=\"14\" />\n        <Style.Triggers>\n            <Trigger Property=\"IsFocused\" Value=\"True\">\n                <Setter Property=\"BorderBrush\" Value=\"#2196F3\" />\n                <Setter Property=\"BorderThickness\" Value=\"2\" />\n            </Trigger>\n            <Trigger Property=\"Validation.HasError\" Value=\"True\">\n                <Setter Property=\"BorderBrush\" Value=\"#F44336\" />\n                <Setter Property=\"BorderThickness\" Value=\"2\" />\n            </Trigger>\n        </Style.Triggers>\n    </Style>\n</ResourceDictionary>\n\n<!-- Using styles in XAML -->\n<StackPanel Margin=\"20\">\n    <Button Content=\"Primary Action\" Style=\"{StaticResource PrimaryButtonStyle}\" />\n    <Button Content=\"Secondary Action\" Style=\"{StaticResource SecondaryButtonStyle}\" />\n    <Button Content=\"Delete\" Style=\"{StaticResource DangerButtonStyle}\" />\n    \n    <!-- TextBox uses implicit style automatically -->\n    <TextBox Text=\"Styled textbox\" Margin=\"0,10\" />\n</StackPanel></code></pre><h4>üìê Templates - Completely Custom Control Appearance</h4><h5>Control Templates:</h5><pre><code><!-- Custom Button Template -->\n<Style x:Key=\"ModernButtonTemplate\" TargetType=\"Button\">\n    <Setter Property=\"Template\">\n        <Setter.Value>\n            <ControlTemplate TargetType=\"Button\">\n                <Grid>\n                    <!-- Drop shadow effect -->\n                    <Border x:Name=\"ShadowBorder\"\n                            Background=\"#20000000\"\n                            CornerRadius=\"6\"\n                            Margin=\"2,2,4,4\" />\n                    \n                    <!-- Main button border -->\n                    <Border x:Name=\"MainBorder\"\n                            Background=\"{TemplateBinding Background}\"\n                            BorderBrush=\"{TemplateBinding BorderBrush}\"\n                            BorderThickness=\"{TemplateBinding BorderThickness}\"\n                            CornerRadius=\"4\"\n                            Padding=\"{TemplateBinding Padding}\">\n                        \n                        <!-- Content with icon support -->\n                        <Grid>\n                            <Grid.ColumnDefinitions>\n                                <ColumnDefinition Width=\"Auto\" />\n                                <ColumnDefinition Width=\"*\" />\n                            </Grid.ColumnDefinitions>\n                            \n                            <!-- Icon (if specified) -->\n                            <ContentPresenter x:Name=\"IconPresenter\"\n                                            Grid.Column=\"0\"\n                                            Content=\"{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}\"\n                                            VerticalAlignment=\"Center\"\n                                            Margin=\"0,0,8,0\" />\n                            \n                            <!-- Text content -->\n                            <ContentPresenter x:Name=\"ContentPresenter\"\n                                            Grid.Column=\"1\"\n                                            HorizontalAlignment=\"Center\"\n                                            VerticalAlignment=\"Center\"\n                                            RecognizesAccessKey=\"True\" />\n                        </Grid>\n                    </Border>\n                </Grid>\n                \n                <ControlTemplate.Triggers>\n                    <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                        <Setter TargetName=\"MainBorder\" Property=\"Background\">\n                            <Setter.Value>\n                                <LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"0,1\">\n                                    <GradientStop Color=\"#4FC3F7\" Offset=\"0\" />\n                                    <GradientStop Color=\"#29B6F6\" Offset=\"1\" />\n                                </LinearGradientBrush>\n                            </Setter.Value>\n                        </Setter>\n                    </Trigger>\n                    \n                    <Trigger Property=\"IsPressed\" Value=\"True\">\n                        <Setter TargetName=\"MainBorder\" Property=\"RenderTransform\">\n                            <Setter.Value>\n                                <TranslateTransform Y=\"1\" />\n                            </Setter.Value>\n                        </Setter>\n                        <Setter TargetName=\"ShadowBorder\" Property=\"Opacity\" Value=\"0.5\" />\n                    </Trigger>\n                    \n                    <Trigger Property=\"IsEnabled\" Value=\"False\">\n                        <Setter Property=\"Opacity\" Value=\"0.6\" />\n                    </Trigger>\n                    \n                    <!-- Hide icon if Tag is null -->\n                    <Trigger Property=\"Tag\" Value=\"{x:Null}\">\n                        <Setter TargetName=\"IconPresenter\" Property=\"Visibility\" Value=\"Collapsed\" />\n                        <Setter TargetName=\"IconPresenter\" Property=\"Margin\" Value=\"0\" />\n                    </Trigger>\n                </ControlTemplate.Triggers>\n            </ControlTemplate>\n        </Setter.Value>\n    </Setter>\n    <Setter Property=\"Background\" Value=\"#2196F3\" />\n    <Setter Property=\"Foreground\" Value=\"White\" />\n    <Setter Property=\"BorderThickness\" Value=\"0\" />\n    <Setter Property=\"FontWeight\" Value=\"SemiBold\" />\n    <Setter Property=\"Padding\" Value=\"16,8\" />\n</Style>\n\n<!-- Custom ListBox Template with animations -->\n<Style x:Key=\"ModernListBoxStyle\" TargetType=\"ListBox\">\n    <Setter Property=\"Template\">\n        <Setter.Value>\n            <ControlTemplate TargetType=\"ListBox\">\n                <Border Background=\"{TemplateBinding Background}\"\n                        BorderBrush=\"{TemplateBinding BorderBrush}\"\n                        BorderThickness=\"{TemplateBinding BorderThickness}\"\n                        CornerRadius=\"8\">\n                    <ScrollViewer Focusable=\"False\"\n                                HorizontalScrollBarVisibility=\"Auto\"\n                                VerticalScrollBarVisibility=\"Auto\">\n                        <ItemsPresenter />\n                    </ScrollViewer>\n                </Border>\n            </ControlTemplate>\n        </Setter.Value>\n    </Setter>\n    <Setter Property=\"Background\" Value=\"White\" />\n    <Setter Property=\"BorderBrush\" Value=\"#E0E0E0\" />\n    <Setter Property=\"BorderThickness\" Value=\"1\" />\n</Style></code></pre><h5>Data Templates:</h5><pre><code><!-- Data Templates for different object types -->\n<Window.Resources>\n    <!-- Person Data Template -->\n    <DataTemplate x:Key=\"PersonTemplate\" DataType=\"{x:Type local:Person}\">\n        <Border Background=\"White\"\n                BorderBrush=\"#E0E0E0\"\n                BorderThickness=\"1\"\n                CornerRadius=\"8\"\n                Padding=\"15\"\n                Margin=\"5\">\n            <Grid>\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"Auto\" />\n                    <RowDefinition Height=\"Auto\" />\n                    <RowDefinition Height=\"Auto\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"60\" />\n                    <ColumnDefinition Width=\"*\" />\n                </Grid.ColumnDefinitions>\n                \n                <!-- Avatar placeholder -->\n                <Ellipse Grid.Row=\"0\" Grid.RowSpan=\"3\" Grid.Column=\"0\"\n                        Width=\"50\" Height=\"50\"\n                        Fill=\"#2196F3\"\n                        VerticalAlignment=\"Top\" />\n                \n                <!-- Name -->\n                <TextBlock Grid.Row=\"0\" Grid.Column=\"1\"\n                          Text=\"{Binding Name}\"\n                          FontWeight=\"Bold\"\n                          FontSize=\"16\"\n                          Margin=\"10,0,0,5\" />\n                \n                <!-- Email -->\n                <TextBlock Grid.Row=\"1\" Grid.Column=\"1\"\n                          Text=\"{Binding Email}\"\n                          Foreground=\"#666666\"\n                          Margin=\"10,0,0,5\" />\n                \n                <!-- Age -->\n                <TextBlock Grid.Row=\"2\" Grid.Column=\"1\"\n                          Foreground=\"#888888\"\n                          Margin=\"10,0,0,0\">\n                    <Run Text=\"Age: \" />\n                    <Run Text=\"{Binding Age}\" FontWeight=\"SemiBold\" />\n                </TextBlock>\n            </Grid>\n        </Border>\n    </DataTemplate>\n    \n    <!-- Product Data Template -->\n    <DataTemplate x:Key=\"ProductTemplate\" DataType=\"{x:Type local:Product}\">\n        <Border Background=\"#FAFAFA\"\n                BorderBrush=\"#E0E0E0\"\n                BorderThickness=\"1\"\n                CornerRadius=\"4\"\n                Padding=\"10\"\n                Margin=\"2\">\n            <StackPanel>\n                <TextBlock Text=\"{Binding Name}\" FontWeight=\"Bold\" />\n                <TextBlock Text=\"{Binding Price, StringFormat=C}\" \n                          Foreground=\"#4CAF50\" \n                          FontSize=\"14\" />\n                <TextBlock Text=\"{Binding Description}\" \n                          TextWrapping=\"Wrap\" \n                          Foreground=\"#666666\" \n                          MaxWidth=\"200\" />\n            </StackPanel>\n        </Border>\n    </DataTemplate>\n    \n    <!-- Hierarchical Data Template for TreeView -->\n    <HierarchicalDataTemplate x:Key=\"CategoryTemplate\" \n                             DataType=\"{x:Type local:Category}\"\n                             ItemsSource=\"{Binding SubCategories}\">\n        <StackPanel Orientation=\"Horizontal\">\n            <Image Source=\"{Binding IconPath}\" Width=\"16\" Height=\"16\" Margin=\"0,0,5,0\" />\n            <TextBlock Text=\"{Binding Name}\" VerticalAlignment=\"Center\" />\n            <TextBlock Text=\"{Binding ItemCount, StringFormat='({0})'}\" \n                      Foreground=\"#666666\" \n                      Margin=\"5,0,0,0\" \n                      VerticalAlignment=\"Center\" />\n        </StackPanel>\n    </HierarchicalDataTemplate>\n</Window.Resources>\n\n<!-- Using data templates -->\n<StackPanel Margin=\"20\">\n    <!-- ListBox with person template -->\n    <ListBox ItemsSource=\"{Binding People}\"\n             ItemTemplate=\"{StaticResource PersonTemplate}\"\n             Height=\"200\"\n             Margin=\"0,0,0,20\" />\n    \n    <!-- TreeView with hierarchical template -->\n    <TreeView ItemsSource=\"{Binding Categories}\"\n              ItemTemplate=\"{StaticResource CategoryTemplate}\"\n              Height=\"150\" />\n</StackPanel></code></pre><h4>‚ö° Commands - Decoupling UI Actions from Logic</h4><h5>ICommand Implementation and Usage:</h5><pre><code>// ViewModelBase for common functionality\npublic abstract class ViewModelBase : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler? PropertyChanged;\n    \n    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n    \n    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)\n    {\n        if (EqualityComparer<T>.Default.Equals(field, value))\n            return false;\n            \n        field = value;\n        OnPropertyChanged(propertyName);\n        return true;\n    }\n}\n\n// Advanced RelayCommand implementation\npublic class RelayCommand : ICommand\n{\n    private readonly Action<object?> _execute;\n    private readonly Func<object?, bool>? _canExecute;\n    \n    public RelayCommand(Action execute, Func<bool>? canExecute = null)\n        : this(_ => execute(), canExecute != null ? _ => canExecute() : null)\n    {\n    }\n    \n    public RelayCommand(Action<object?> execute, Func<object?, bool>? canExecute = null)\n    {\n        _execute = execute ?? throw new ArgumentNullException(nameof(execute));\n        _canExecute = canExecute;\n    }\n    \n    public event EventHandler? CanExecuteChanged\n    {\n        add { CommandManager.RequerySuggested += value; }\n        remove { CommandManager.RequerySuggested -= value; }\n    }\n    \n    public bool CanExecute(object? parameter)\n    {\n        return _canExecute?.Invoke(parameter) ?? true;\n    }\n    \n    public void Execute(object? parameter)\n    {\n        _execute(parameter);\n    }\n    \n    public void RaiseCanExecuteChanged()\n    {\n        CommandManager.InvalidateRequerySuggested();\n    }\n}\n\n// Generic RelayCommand\npublic class RelayCommand<T> : ICommand\n{\n    private readonly Action<T?> _execute;\n    private readonly Func<T?, bool>? _canExecute;\n    \n    public RelayCommand(Action<T?> execute, Func<T?, bool>? canExecute = null)\n    {\n        _execute = execute ?? throw new ArgumentNullException(nameof(execute));\n        _canExecute = canExecute;\n    }\n    \n    public event EventHandler? CanExecuteChanged\n    {\n        add { CommandManager.RequerySuggested += value; }\n        remove { CommandManager.RequerySuggested -= value; }\n    }\n    \n    public bool CanExecute(object? parameter)\n    {\n        return _canExecute?.Invoke((T?)parameter) ?? true;\n    }\n    \n    public void Execute(object? parameter)\n    {\n        _execute((T?)parameter);\n    }\n}\n\n// Async Command implementation\npublic class AsyncRelayCommand : ICommand\n{\n    private readonly Func<Task> _execute;\n    private readonly Func<bool>? _canExecute;\n    private bool _isExecuting;\n    \n    public AsyncRelayCommand(Func<Task> execute, Func<bool>? canExecute = null)\n    {\n        _execute = execute ?? throw new ArgumentNullException(nameof(execute));\n        _canExecute = canExecute;\n    }\n    \n    public event EventHandler? CanExecuteChanged\n    {\n        add { CommandManager.RequerySuggested += value; }\n        remove { CommandManager.RequerySuggested -= value; }\n    }\n    \n    public bool CanExecute(object? parameter)\n    {\n        return !_isExecuting && (_canExecute?.Invoke() ?? true);\n    }\n    \n    public async void Execute(object? parameter)\n    {\n        if (!CanExecute(parameter))\n            return;\n            \n        _isExecuting = true;\n        CommandManager.InvalidateRequerySuggested();\n        \n        try\n        {\n            await _execute();\n        }\n        finally\n        {\n            _isExecuting = false;\n            CommandManager.InvalidateRequerySuggested();\n        }\n    }\n}</code></pre><h4>üèóÔ∏è MVVM Pattern - Model-View-ViewModel Architecture</h4><h5>Complete MVVM Example:</h5><pre><code>// Model\npublic class Person\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public int Age { get; set; }\n    public DateTime CreatedDate { get; set; }\n}\n\n// Service Layer\npublic interface IPersonService\n{\n    Task<List<Person>> GetAllAsync();\n    Task<Person> GetByIdAsync(int id);\n    Task<Person> CreateAsync(Person person);\n    Task<Person> UpdateAsync(Person person);\n    Task<bool> DeleteAsync(int id);\n}\n\npublic class PersonService : IPersonService\n{\n    private readonly List<Person> _people = new();\n    private int _nextId = 1;\n    \n    public async Task<List<Person>> GetAllAsync()\n    {\n        await Task.Delay(100); // Simulate async operation\n        return new List<Person>(_people);\n    }\n    \n    public async Task<Person> GetByIdAsync(int id)\n    {\n        await Task.Delay(50);\n        return _people.FirstOrDefault(p => p.Id == id) ?? throw new ArgumentException(\"Person not found\");\n    }\n    \n    public async Task<Person> CreateAsync(Person person)\n    {\n        await Task.Delay(100);\n        person.Id = _nextId++;\n        person.CreatedDate = DateTime.Now;\n        _people.Add(person);\n        return person;\n    }\n    \n    public async Task<Person> UpdateAsync(Person person)\n    {\n        await Task.Delay(100);\n        var existing = await GetByIdAsync(person.Id);\n        existing.Name = person.Name;\n        existing.Email = person.Email;\n        existing.Age = person.Age;\n        return existing;\n    }\n    \n    public async Task<bool> DeleteAsync(int id)\n    {\n        await Task.Delay(100);\n        var person = _people.FirstOrDefault(p => p.Id == id);\n        if (person != null)\n        {\n            _people.Remove(person);\n            return true;\n        }\n        return false;\n    }\n}\n\n// ViewModel\npublic class PersonListViewModel : ViewModelBase\n{\n    private readonly IPersonService _personService;\n    private ObservableCollection<PersonViewModel> _people;\n    private PersonViewModel? _selectedPerson;\n    private bool _isLoading;\n    private string _searchText = string.Empty;\n    \n    public PersonListViewModel(IPersonService personService)\n    {\n        _personService = personService;\n        _people = new ObservableCollection<PersonViewModel>();\n        \n        // Initialize commands\n        LoadCommand = new AsyncRelayCommand(LoadAsync, () => !IsLoading);\n        AddCommand = new RelayCommand(Add, () => !IsLoading);\n        EditCommand = new RelayCommand<PersonViewModel>(Edit, person => person != null && !IsLoading);\n        DeleteCommand = new AsyncRelayCommand<PersonViewModel>(DeleteAsync, person => person != null && !IsLoading);\n        SearchCommand = new RelayCommand(Search);\n        \n        // Load data initially\n        _ = LoadAsync();\n    }\n    \n    // Properties\n    public ObservableCollection<PersonViewModel> People\n    {\n        get => _people;\n        set => SetProperty(ref _people, value);\n    }\n    \n    public PersonViewModel? SelectedPerson\n    {\n        get => _selectedPerson;\n        set => SetProperty(ref _selectedPerson, value);\n    }\n    \n    public bool IsLoading\n    {\n        get => _isLoading;\n        set => SetProperty(ref _isLoading, value);\n    }\n    \n    public string SearchText\n    {\n        get => _searchText;\n        set => SetProperty(ref _searchText, value);\n    }\n    \n    // Commands\n    public ICommand LoadCommand { get; }\n    public ICommand AddCommand { get; }\n    public ICommand EditCommand { get; }\n    public ICommand DeleteCommand { get; }\n    public ICommand SearchCommand { get; }\n    \n    // Command implementations\n    private async Task LoadAsync()\n    {\n        IsLoading = true;\n        \n        try\n        {\n            var people = await _personService.GetAllAsync();\n            var personViewModels = people.Select(p => new PersonViewModel(p)).ToList();\n            \n            People.Clear();\n            foreach (var personVm in personViewModels)\n            {\n                People.Add(personVm);\n            }\n        }\n        catch (Exception ex)\n        {\n            // Handle error (show message, log, etc.)\n            MessageBox.Show($\"Error loading people: {ex.Message}\", \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n        }\n        finally\n        {\n            IsLoading = false;\n        }\n    }\n    \n    private void Add()\n    {\n        var dialog = new PersonEditDialog();\n        var result = dialog.ShowDialog();\n        \n        if (result == true && dialog.Person != null)\n        {\n            _ = CreatePersonAsync(dialog.Person);\n        }\n    }\n    \n    private void Edit(PersonViewModel? person)\n    {\n        if (person == null) return;\n        \n        var dialog = new PersonEditDialog(person.Model);\n        var result = dialog.ShowDialog();\n        \n        if (result == true && dialog.Person != null)\n        {\n            _ = UpdatePersonAsync(dialog.Person);\n        }\n    }\n    \n    private async Task DeleteAsync(PersonViewModel? person)\n    {\n        if (person == null) return;\n        \n        var result = MessageBox.Show(\n            $\"Are you sure you want to delete {person.Name}?\",\n            \"Confirm Delete\",\n            MessageBoxButton.YesNo,\n            MessageBoxImage.Question);\n        \n        if (result == MessageBoxResult.Yes)\n        {\n            IsLoading = true;\n            \n            try\n            {\n                await _personService.DeleteAsync(person.Id);\n                People.Remove(person);\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"Error deleting person: {ex.Message}\", \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n            }\n            finally\n            {\n                IsLoading = false;\n            }\n        }\n    }\n    \n    private void Search()\n    {\n        // Implement search logic\n        var filteredPeople = string.IsNullOrWhiteSpace(SearchText)\n            ? People\n            : new ObservableCollection<PersonViewModel>(\n                People.Where(p => p.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||\n                                p.Email.Contains(SearchText, StringComparison.OrdinalIgnoreCase)));\n        \n        // Update view or use CollectionView for filtering\n    }\n    \n    private async Task CreatePersonAsync(Person person)\n    {\n        IsLoading = true;\n        \n        try\n        {\n            var created = await _personService.CreateAsync(person);\n            People.Add(new PersonViewModel(created));\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show($\"Error creating person: {ex.Message}\", \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n        }\n        finally\n        {\n            IsLoading = false;\n        }\n    }\n    \n    private async Task UpdatePersonAsync(Person person)\n    {\n        IsLoading = true;\n        \n        try\n        {\n            var updated = await _personService.UpdateAsync(person);\n            var existingVm = People.FirstOrDefault(p => p.Id == updated.Id);\n            if (existingVm != null)\n            {\n                existingVm.UpdateFromModel(updated);\n            }\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show($\"Error updating person: {ex.Message}\", \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n        }\n        finally\n        {\n            IsLoading = false;\n        }\n    }\n}\n\n// Person ViewModel\npublic class PersonViewModel : ViewModelBase\n{\n    private Person _model;\n    \n    public PersonViewModel(Person model)\n    {\n        _model = model;\n    }\n    \n    public Person Model => _model;\n    \n    public int Id => _model.Id;\n    \n    public string Name\n    {\n        get => _model.Name;\n        set\n        {\n            if (_model.Name != value)\n            {\n                _model.Name = value;\n                OnPropertyChanged();\n                OnPropertyChanged(nameof(DisplayName));\n            }\n        }\n    }\n    \n    public string Email\n    {\n        get => _model.Email;\n        set\n        {\n            if (_model.Email != value)\n            {\n                _model.Email = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n    \n    public int Age\n    {\n        get => _model.Age;\n        set\n        {\n            if (_model.Age != value)\n            {\n                _model.Age = value;\n                OnPropertyChanged();\n                OnPropertyChanged(nameof(DisplayName));\n            }\n        }\n    }\n    \n    public string DisplayName => $\"{Name} ({Age})\";\n    \n    public void UpdateFromModel(Person updatedModel)\n    {\n        _model = updatedModel;\n        OnPropertyChanged(nameof(Name));\n        OnPropertyChanged(nameof(Email));\n        OnPropertyChanged(nameof(Age));\n        OnPropertyChanged(nameof(DisplayName));\n    }\n}</code></pre><h5>View with MVVM Binding:</h5><pre><code><!-- PersonListView.xaml -->\n<UserControl x:Class=\"MyApp.Views.PersonListView\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n    \n    <Grid Margin=\"20\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"Auto\" />\n        </Grid.RowDefinitions>\n        \n        <!-- Header -->\n        <TextBlock Grid.Row=\"0\" \n                   Text=\"People Management\" \n                   FontSize=\"24\" \n                   FontWeight=\"Bold\" \n                   Margin=\"0,0,0,20\" />\n        \n        <!-- Search and Actions -->\n        <Grid Grid.Row=\"1\" Margin=\"0,0,0,10\">\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"*\" />\n                <ColumnDefinition Width=\"Auto\" />\n                <ColumnDefinition Width=\"Auto\" />\n                <ColumnDefinition Width=\"Auto\" />\n            </Grid.ColumnDefinitions>\n            \n            <TextBox Grid.Column=\"0\" \n                     Text=\"{Binding SearchText, UpdateSourceTrigger=PropertyChanged}\" \n                     Margin=\"0,0,10,0\">\n                <TextBox.InputBindings>\n                    <KeyBinding Key=\"Enter\" Command=\"{Binding SearchCommand}\" />\n                </TextBox.InputBindings>\n            </TextBox>\n            \n            <Button Grid.Column=\"1\" \n                    Content=\"Search\" \n                    Command=\"{Binding SearchCommand}\" \n                    Style=\"{StaticResource SecondaryButtonStyle}\" \n                    Margin=\"0,0,10,0\" />\n            \n            <Button Grid.Column=\"2\" \n                    Content=\"Add Person\" \n                    Command=\"{Binding AddCommand}\" \n                    Style=\"{StaticResource PrimaryButtonStyle}\" \n                    Margin=\"0,0,10,0\" />\n            \n            <Button Grid.Column=\"3\" \n                    Content=\"Refresh\" \n                    Command=\"{Binding LoadCommand}\" \n                    Style=\"{StaticResource SecondaryButtonStyle}\" />\n        </Grid>\n        \n        <!-- People List -->\n        <ListBox Grid.Row=\"2\" \n                 ItemsSource=\"{Binding People}\" \n                 SelectedItem=\"{Binding SelectedPerson}\" \n                 ItemTemplate=\"{StaticResource PersonTemplate}\" \n                 Style=\"{StaticResource ModernListBoxStyle}\">\n            <ListBox.ContextMenu>\n                <ContextMenu>\n                    <MenuItem Header=\"Edit\" \n                              Command=\"{Binding EditCommand}\" \n                              CommandParameter=\"{Binding SelectedPerson}\" />\n                    <MenuItem Header=\"Delete\" \n                              Command=\"{Binding DeleteCommand}\" \n                              CommandParameter=\"{Binding SelectedPerson}\" />\n                </ContextMenu>\n            </ListBox.ContextMenu>\n        </ListBox>\n        \n        <!-- Status/Loading -->\n        <StackPanel Grid.Row=\"3\" \n                    Orientation=\"Horizontal\" \n                    Margin=\"0,10,0,0\">\n            <TextBlock Text=\"Total: \" />\n            <TextBlock Text=\"{Binding People.Count}\" FontWeight=\"Bold\" />\n            \n            <TextBlock Text=\"Loading...\" \n                       Margin=\"20,0,0,0\" \n                       Visibility=\"{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}\" />\n        </StackPanel>\n    </Grid>\n</UserControl></code></pre><h4>üèÜ Best Practices</h4><ul><li>Use the MVVM pattern for separation of concerns</li><li>Implement INotifyPropertyChanged properly for data binding</li><li>Use commands instead of event handlers for better testability</li><li>Create reusable styles and templates in resource dictionaries</li><li>Use data templates to customize how objects are displayed</li><li>Implement proper validation using IDataErrorInfo or validation attributes</li><li>Use dependency injection for services in ViewModels</li><li>Keep ViewModels testable by avoiding UI dependencies</li><li>Use async commands for long-running operations</li><li>Follow naming conventions and organize code properly</li></ul><h4>üöÄ Advanced WPF Features</h4><ul><li><strong>Custom Controls</strong> - Inherit from existing controls for new functionality</li><li><strong>Attached Properties</strong> - Add properties to existing controls</li><li><strong>Markup Extensions</strong> - Custom XAML syntax extensions</li><li><strong>Behaviors</strong> - Encapsulate reusable UI logic</li><li><strong>Triggers and Animations</strong> - Create interactive and animated UIs</li><li><strong>Resource Management</strong> - Efficient handling of resources and themes</li></ul></div>",
      "code": "<Button Command=\"{Binding SaveCommand}\" Content=\"Save\"/>",
      "quiz": [ {"q":"MVVM layers?","options":["Model-View-ViewModel","Model-View-Manager"],"answer":0} ]
    },
    {
      "id": 30,
      "tier": 3,
      "title": "ASP.NET Core Fundamentals",
      "description": "Middleware pipeline, Razor Pages vs MVC, Web API.",
      "concepts": ["Middleware Pipeline", "Razor Pages vs MVC", "RESTful APIs"],
      "requirements": ["Add a custom middleware", "Build a minimal API"],
      "theory": "<div class='theory-content'><h4>üåê ASP.NET Core Fundamentals - Modern Web Development</h4><p>ASP.NET Core is a cross-platform, high-performance framework for building modern web applications, APIs, and microservices. It features a modular middleware pipeline, dependency injection, and flexible hosting options.</p><h4>üîÑ Middleware Pipeline - Request Processing Chain</h4><h5>Understanding the Pipeline:</h5><pre><code>// Program.cs - Configuring the middleware pipeline\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddRazorPages();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Add custom services\nbuilder.Services.AddScoped<IUserService, UserService>();\nbuilder.Services.AddSingleton<IConfiguration>(builder.Configuration);\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n    app.UseDeveloperExceptionPage();\n}\nelse\n{\n    app.UseExceptionHandler(\"/Error\");\n    app.UseHsts(); // HTTP Strict Transport Security\n}\n\n// Middleware order is important!\napp.UseHttpsRedirection();    // Redirect HTTP to HTTPS\napp.UseStaticFiles();         // Serve static files\napp.UseRouting();             // Enable routing\napp.UseAuthentication();      // Add authentication\napp.UseAuthorization();       // Add authorization\n\n// Custom middleware\napp.UseMiddleware<RequestLoggingMiddleware>();\napp.UseMiddleware<ErrorHandlingMiddleware>();\n\n// Map endpoints\napp.MapControllers();         // Map controller actions\napp.MapRazorPages();          // Map Razor Pages\napp.MapGet(\"/\", () => \"Hello World!\"); // Map minimal API\n\napp.Run();</code></pre><h5>Creating Custom Middleware:</h5><pre><code>// Custom logging middleware\npublic class RequestLoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<RequestLoggingMiddleware> _logger;\n    \n    public RequestLoggingMiddleware(RequestDelegate next, ILogger<RequestLoggingMiddleware> logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n    \n    public async Task InvokeAsync(HttpContext context)\n    {\n        var startTime = DateTime.UtcNow;\n        var requestId = Guid.NewGuid();\n        \n        // Log request start\n        _logger.LogInformation(\n            \"[{RequestId}] Starting request {Method} {Path} from {RemoteIp}\",\n            requestId,\n            context.Request.Method,\n            context.Request.Path,\n            context.Connection.RemoteIpAddress);\n        \n        try\n        {\n            // Call the next middleware in the pipeline\n            await _next(context);\n        }\n        finally\n        {\n            var duration = DateTime.UtcNow - startTime;\n            \n            // Log request completion\n            _logger.LogInformation(\n                \"[{RequestId}] Completed request {Method} {Path} with status {StatusCode} in {Duration}ms\",\n                requestId,\n                context.Request.Method,\n                context.Request.Path,\n                context.Response.StatusCode,\n                duration.TotalMilliseconds);\n        }\n    }\n}\n\n// Error handling middleware\npublic class ErrorHandlingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<ErrorHandlingMiddleware> _logger;\n    \n    public ErrorHandlingMiddleware(RequestDelegate next, ILogger<ErrorHandlingMiddleware> logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n    \n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"An unhandled exception occurred during request processing\");\n            await HandleExceptionAsync(context, ex);\n        }\n    }\n    \n    private static async Task HandleExceptionAsync(HttpContext context, Exception exception)\n    {\n        context.Response.StatusCode = exception switch\n        {\n            ArgumentException => 400,\n            UnauthorizedAccessException => 401,\n            NotImplementedException => 501,\n            _ => 500\n        };\n        \n        var response = new\n        {\n            error = new\n            {\n                message = exception.Message,\n                type = exception.GetType().Name,\n                statusCode = context.Response.StatusCode\n            }\n        };\n        \n        context.Response.ContentType = \"application/json\";\n        var jsonResponse = JsonSerializer.Serialize(response);\n        await context.Response.WriteAsync(jsonResponse);\n    }\n}\n\n// Extension method for easier middleware registration\npublic static class MiddlewareExtensions\n{\n    public static IApplicationBuilder UseRequestLogging(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<RequestLoggingMiddleware>();\n    }\n    \n    public static IApplicationBuilder UseErrorHandling(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<ErrorHandlingMiddleware>();\n    }\n}</code></pre><h4>üìÑ Razor Pages vs MVC - Choosing the Right Pattern</h4><h5>Razor Pages - Page-Centric Approach:</h5><pre><code>// Pages/Users/Index.cshtml.cs - Page Model\npublic class IndexModel : PageModel\n{\n    private readonly IUserService _userService;\n    private readonly ILogger<IndexModel> _logger;\n    \n    public IndexModel(IUserService userService, ILogger<IndexModel> logger)\n    {\n        _userService = userService;\n        _logger = logger;\n    }\n    \n    // Properties bound to the page\n    public List<User> Users { get; set; } = new();\n    \n    [BindProperty(SupportsGet = true)]\n    public string? SearchTerm { get; set; }\n    \n    [BindProperty(SupportsGet = true)]\n    public int PageNumber { get; set; } = 1;\n    \n    public int PageSize { get; } = 10;\n    public int TotalPages { get; set; }\n    \n    // Handler methods\n    public async Task<IActionResult> OnGetAsync()\n    {\n        try\n        {\n            var (users, totalCount) = await _userService.GetUsersAsync(SearchTerm, PageNumber, PageSize);\n            Users = users;\n            TotalPages = (int)Math.Ceiling(totalCount / (double)PageSize);\n            \n            return Page();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading users\");\n            return RedirectToPage(\"/Error\");\n        }\n    }\n    \n    public async Task<IActionResult> OnPostDeleteAsync(int id)\n    {\n        try\n        {\n            await _userService.DeleteUserAsync(id);\n            return RedirectToPage();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting user {UserId}\", id);\n            ModelState.AddModelError(\"\", \"Failed to delete user\");\n            return await OnGetAsync();\n        }\n    }\n}\n\n// Pages/Users/Create.cshtml.cs - Create User Page\npublic class CreateModel : PageModel\n{\n    private readonly IUserService _userService;\n    \n    public CreateModel(IUserService userService)\n    {\n        _userService = userService;\n    }\n    \n    [BindProperty]\n    public CreateUserRequest User { get; set; } = new();\n    \n    public IActionResult OnGet()\n    {\n        return Page();\n    }\n    \n    public async Task<IActionResult> OnPostAsync()\n    {\n        if (!ModelState.IsValid)\n        {\n            return Page();\n        }\n        \n        try\n        {\n            await _userService.CreateUserAsync(User);\n            return RedirectToPage(\"./Index\");\n        }\n        catch (Exception ex)\n        {\n            ModelState.AddModelError(\"\", \"Failed to create user\");\n            return Page();\n        }\n    }\n}\n\npublic class CreateUserRequest\n{\n    [Required]\n    [StringLength(100)]\n    public string Name { get; set; } = string.Empty;\n    \n    [Required]\n    [EmailAddress]\n    public string Email { get; set; } = string.Empty;\n    \n    [Range(18, 120)]\n    public int Age { get; set; }\n}</code></pre><h5>Razor Pages View:</h5><pre><code>@page\n@model MyApp.Pages.Users.IndexModel\n@{\n    ViewData[\"Title\"] = \"Users\";\n}\n\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h2>Users</h2>\n            \n            <!-- Search Form -->\n            <form method=\"get\" class=\"mb-3\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <input asp-for=\"SearchTerm\" class=\"form-control\" placeholder=\"Search users...\" />\n                    </div>\n                    <div class=\"col-md-2\">\n                        <button type=\"submit\" class=\"btn btn-primary\">Search</button>\n                    </div>\n                    <div class=\"col-md-4 text-end\">\n                        <a asp-page=\"./Create\" class=\"btn btn-success\">Add New User</a>\n                    </div>\n                </div>\n            </form>\n            \n            <!-- Users Table -->\n            <table class=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Email</th>\n                        <th>Age</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    @foreach (var user in Model.Users)\n                    {\n                        <tr>\n                            <td>@user.Name</td>\n                            <td>@user.Email</td>\n                            <td>@user.Age</td>\n                            <td>\n                                <a asp-page=\"./Edit\" asp-route-id=\"@user.Id\" class=\"btn btn-sm btn-primary\">Edit</a>\n                                <form method=\"post\" asp-page-handler=\"Delete\" asp-route-id=\"@user.Id\" class=\"d-inline\">\n                                    <button type=\"submit\" class=\"btn btn-sm btn-danger\" \n                                            onclick=\"return confirm('Are you sure?')\">Delete</button>\n                                </form>\n                            </td>\n                        </tr>\n                    }\n                </tbody>\n            </table>\n            \n            <!-- Pagination -->\n            @if (Model.TotalPages > 1)\n            {\n                <nav>\n                    <ul class=\"pagination\">\n                        @for (int i = 1; i <= Model.TotalPages; i++)\n                        {\n                            <li class=\"page-item @(i == Model.PageNumber ? \"active\" : \"\")\">\n                                <a class=\"page-link\" asp-page=\"./Index\" asp-route-pageNumber=\"@i\" asp-route-searchTerm=\"@Model.SearchTerm\">@i</a>\n                            </li>\n                        }\n                    </ul>\n                </nav>\n            }\n        </div>\n    </div>\n</div></code></pre><h5>MVC - Model-View-Controller Pattern:</h5><pre><code>// Controllers/UsersController.cs\n[Route(\"[controller]\")]\npublic class UsersController : Controller\n{\n    private readonly IUserService _userService;\n    private readonly ILogger<UsersController> _logger;\n    \n    public UsersController(IUserService userService, ILogger<UsersController> logger)\n    {\n        _userService = userService;\n        _logger = logger;\n    }\n    \n    // GET: /Users\n    [HttpGet]\n    public async Task<IActionResult> Index(string? searchTerm, int page = 1, int pageSize = 10)\n    {\n        try\n        {\n            var (users, totalCount) = await _userService.GetUsersAsync(searchTerm, page, pageSize);\n            \n            var viewModel = new UserIndexViewModel\n            {\n                Users = users,\n                SearchTerm = searchTerm,\n                CurrentPage = page,\n                PageSize = pageSize,\n                TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize)\n            };\n            \n            return View(viewModel);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading users\");\n            return View(\"Error\");\n        }\n    }\n    \n    // GET: /Users/Details/5\n    [HttpGet(\"{id:int}\")]\n    public async Task<IActionResult> Details(int id)\n    {\n        var user = await _userService.GetUserByIdAsync(id);\n        if (user == null)\n        {\n            return NotFound();\n        }\n        \n        return View(user);\n    }\n    \n    // GET: /Users/Create\n    [HttpGet(\"Create\")]\n    public IActionResult Create()\n    {\n        return View(new CreateUserRequest());\n    }\n    \n    // POST: /Users/Create\n    [HttpPost(\"Create\")]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> Create(CreateUserRequest request)\n    {\n        if (!ModelState.IsValid)\n        {\n            return View(request);\n        }\n        \n        try\n        {\n            await _userService.CreateUserAsync(request);\n            return RedirectToAction(nameof(Index));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating user\");\n            ModelState.AddModelError(\"\", \"Failed to create user\");\n            return View(request);\n        }\n    }\n    \n    // GET: /Users/Edit/5\n    [HttpGet(\"Edit/{id:int}\")]\n    public async Task<IActionResult> Edit(int id)\n    {\n        var user = await _userService.GetUserByIdAsync(id);\n        if (user == null)\n        {\n            return NotFound();\n        }\n        \n        var request = new UpdateUserRequest\n        {\n            Id = user.Id,\n            Name = user.Name,\n            Email = user.Email,\n            Age = user.Age\n        };\n        \n        return View(request);\n    }\n    \n    // POST: /Users/Edit/5\n    [HttpPost(\"Edit/{id:int}\")]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> Edit(int id, UpdateUserRequest request)\n    {\n        if (id != request.Id)\n        {\n            return BadRequest();\n        }\n        \n        if (!ModelState.IsValid)\n        {\n            return View(request);\n        }\n        \n        try\n        {\n            await _userService.UpdateUserAsync(request);\n            return RedirectToAction(nameof(Index));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating user {UserId}\", id);\n            ModelState.AddModelError(\"\", \"Failed to update user\");\n            return View(request);\n        }\n    }\n    \n    // POST: /Users/Delete/5\n    [HttpPost(\"Delete/{id:int}\")]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> Delete(int id)\n    {\n        try\n        {\n            await _userService.DeleteUserAsync(id);\n            return RedirectToAction(nameof(Index));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting user {UserId}\", id);\n            TempData[\"Error\"] = \"Failed to delete user\";\n            return RedirectToAction(nameof(Index));\n        }\n    }\n}\n\n// ViewModels\npublic class UserIndexViewModel\n{\n    public List<User> Users { get; set; } = new();\n    public string? SearchTerm { get; set; }\n    public int CurrentPage { get; set; }\n    public int PageSize { get; set; }\n    public int TotalPages { get; set; }\n}\n\npublic class UpdateUserRequest\n{\n    public int Id { get; set; }\n    \n    [Required]\n    [StringLength(100)]\n    public string Name { get; set; } = string.Empty;\n    \n    [Required]\n    [EmailAddress]\n    public string Email { get; set; } = string.Empty;\n    \n    [Range(18, 120)]\n    public int Age { get; set; }\n}</code></pre><h4>üöÄ Web API - RESTful Services</h4><h5>Building RESTful APIs:</h5><pre><code>// Controllers/Api/UsersApiController.cs\n[ApiController]\n[Route(\"api/[controller]\")]\n[Produces(\"application/json\")]\npublic class UsersController : ControllerBase\n{\n    private readonly IUserService _userService;\n    private readonly ILogger<UsersController> _logger;\n    \n    public UsersController(IUserService userService, ILogger<UsersController> logger)\n    {\n        _userService = userService;\n        _logger = logger;\n    }\n    \n    /// <summary>\n    /// Get all users with optional filtering and pagination\n    /// </summary>\n    /// <param name=\"searchTerm\">Search term for filtering users</param>\n    /// <param name=\"page\">Page number (default: 1)</param>\n    /// <param name=\"pageSize\">Page size (default: 10)</param>\n    /// <returns>Paginated list of users</returns>\n    [HttpGet]\n    [ProducesResponseType(typeof(PagedResult<UserDto>), StatusCodes.Status200OK)]\n    public async Task<ActionResult<PagedResult<UserDto>>> GetUsers(\n        [FromQuery] string? searchTerm,\n        [FromQuery] int page = 1,\n        [FromQuery] int pageSize = 10)\n    {\n        try\n        {\n            var (users, totalCount) = await _userService.GetUsersAsync(searchTerm, page, pageSize);\n            \n            var userDtos = users.Select(u => new UserDto\n            {\n                Id = u.Id,\n                Name = u.Name,\n                Email = u.Email,\n                Age = u.Age,\n                CreatedDate = u.CreatedDate\n            }).ToList();\n            \n            var result = new PagedResult<UserDto>\n            {\n                Data = userDtos,\n                CurrentPage = page,\n                PageSize = pageSize,\n                TotalCount = totalCount,\n                TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize)\n            };\n            \n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving users\");\n            return StatusCode(StatusCodes.Status500InternalServerError, \"An error occurred while retrieving users\");\n        }\n    }\n    \n    /// <summary>\n    /// Get a specific user by ID\n    /// </summary>\n    /// <param name=\"id\">User ID</param>\n    /// <returns>User details</returns>\n    [HttpGet(\"{id:int}\")]\n    [ProducesResponseType(typeof(UserDto), StatusCodes.Status200OK)]\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\n    public async Task<ActionResult<UserDto>> GetUser(int id)\n    {\n        try\n        {\n            var user = await _userService.GetUserByIdAsync(id);\n            if (user == null)\n            {\n                return NotFound($\"User with ID {id} not found\");\n            }\n            \n            var userDto = new UserDto\n            {\n                Id = user.Id,\n                Name = user.Name,\n                Email = user.Email,\n                Age = user.Age,\n                CreatedDate = user.CreatedDate\n            };\n            \n            return Ok(userDto);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving user {UserId}\", id);\n            return StatusCode(StatusCodes.Status500InternalServerError, \"An error occurred while retrieving the user\");\n        }\n    }\n    \n    /// <summary>\n    /// Create a new user\n    /// </summary>\n    /// <param name=\"request\">User creation request</param>\n    /// <returns>Created user</returns>\n    [HttpPost]\n    [ProducesResponseType(typeof(UserDto), StatusCodes.Status201Created)]\n    [ProducesResponseType(StatusCodes.Status400BadRequest)]\n    public async Task<ActionResult<UserDto>> CreateUser([FromBody] CreateUserRequest request)\n    {\n        if (!ModelState.IsValid)\n        {\n            return BadRequest(ModelState);\n        }\n        \n        try\n        {\n            var user = await _userService.CreateUserAsync(request);\n            \n            var userDto = new UserDto\n            {\n                Id = user.Id,\n                Name = user.Name,\n                Email = user.Email,\n                Age = user.Age,\n                CreatedDate = user.CreatedDate\n            };\n            \n            return CreatedAtAction(\n                nameof(GetUser),\n                new { id = user.Id },\n                userDto);\n        }\n        catch (ArgumentException ex)\n        {\n            return BadRequest(ex.Message);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating user\");\n            return StatusCode(StatusCodes.Status500InternalServerError, \"An error occurred while creating the user\");\n        }\n    }\n    \n    /// <summary>\n    /// Update an existing user\n    /// </summary>\n    /// <param name=\"id\">User ID</param>\n    /// <param name=\"request\">User update request</param>\n    /// <returns>Updated user</returns>\n    [HttpPut(\"{id:int}\")]\n    [ProducesResponseType(typeof(UserDto), StatusCodes.Status200OK)]\n    [ProducesResponseType(StatusCodes.Status400BadRequest)]\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\n    public async Task<ActionResult<UserDto>> UpdateUser(int id, [FromBody] UpdateUserRequest request)\n    {\n        if (id != request.Id)\n        {\n            return BadRequest(\"ID in URL does not match ID in request body\");\n        }\n        \n        if (!ModelState.IsValid)\n        {\n            return BadRequest(ModelState);\n        }\n        \n        try\n        {\n            var user = await _userService.UpdateUserAsync(request);\n            if (user == null)\n            {\n                return NotFound($\"User with ID {id} not found\");\n            }\n            \n            var userDto = new UserDto\n            {\n                Id = user.Id,\n                Name = user.Name,\n                Email = user.Email,\n                Age = user.Age,\n                CreatedDate = user.CreatedDate\n            };\n            \n            return Ok(userDto);\n        }\n        catch (ArgumentException ex)\n        {\n            return BadRequest(ex.Message);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating user {UserId}\", id);\n            return StatusCode(StatusCodes.Status500InternalServerError, \"An error occurred while updating the user\");\n        }\n    }\n    \n    /// <summary>\n    /// Delete a user\n    /// </summary>\n    /// <param name=\"id\">User ID</param>\n    /// <returns>No content</returns>\n    [HttpDelete(\"{id:int}\")]\n    [ProducesResponseType(StatusCodes.Status204NoContent)]\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\n    public async Task<IActionResult> DeleteUser(int id)\n    {\n        try\n        {\n            var success = await _userService.DeleteUserAsync(id);\n            if (!success)\n            {\n                return NotFound($\"User with ID {id} not found\");\n            }\n            \n            return NoContent();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting user {UserId}\", id);\n            return StatusCode(StatusCodes.Status500InternalServerError, \"An error occurred while deleting the user\");\n        }\n    }\n}\n\n// DTOs (Data Transfer Objects)\npublic class UserDto\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public int Age { get; set; }\n    public DateTime CreatedDate { get; set; }\n}\n\npublic class PagedResult<T>\n{\n    public List<T> Data { get; set; } = new();\n    public int CurrentPage { get; set; }\n    public int PageSize { get; set; }\n    public int TotalCount { get; set; }\n    public int TotalPages { get; set; }\n    public bool HasPreviousPage => CurrentPage > 1;\n    public bool HasNextPage => CurrentPage < TotalPages;\n}</code></pre><h4>‚ö° Minimal APIs - Lightweight Endpoints</h4><h5>Creating Minimal APIs:</h5><pre><code>// Program.cs - Minimal API endpoints\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nbuilder.Services.AddScoped<IUserService, UserService>();\n\nvar app = builder.Build();\n\n// Configure pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\n// Minimal API endpoints\nvar usersApi = app.MapGroup(\"/api/users\")\n    .WithTags(\"Users\")\n    .WithOpenApi();\n\n// GET /api/users\nusersApi.MapGet(\"/\", async (IUserService userService, string? search, int page = 1, int pageSize = 10) =>\n{\n    var (users, totalCount) = await userService.GetUsersAsync(search, page, pageSize);\n    return Results.Ok(new { users, totalCount, page, pageSize });\n})\n.WithName(\"GetUsers\")\n.WithSummary(\"Get all users\")\n.Produces<object>(StatusCodes.Status200OK);\n\n// GET /api/users/{id}\nusersApi.MapGet(\"/{id:int}\", async (int id, IUserService userService) =>\n{\n    var user = await userService.GetUserByIdAsync(id);\n    return user is not null ? Results.Ok(user) : Results.NotFound();\n})\n.WithName(\"GetUser\")\n.WithSummary(\"Get user by ID\")\n.Produces<User>(StatusCodes.Status200OK)\n.Produces(StatusCodes.Status404NotFound);\n\n// POST /api/users\nusersApi.MapPost(\"/\", async (CreateUserRequest request, IUserService userService) =>\n{\n    try\n    {\n        var user = await userService.CreateUserAsync(request);\n        return Results.CreatedAtRoute(\"GetUser\", new { id = user.Id }, user);\n    }\n    catch (ArgumentException ex)\n    {\n        return Results.BadRequest(ex.Message);\n    }\n})\n.WithName(\"CreateUser\")\n.WithSummary(\"Create a new user\")\n.Accepts<CreateUserRequest>(\"application/json\")\n.Produces<User>(StatusCodes.Status201Created)\n.Produces(StatusCodes.Status400BadRequest);\n\n// PUT /api/users/{id}\nusersApi.MapPut(\"/{id:int}\", async (int id, UpdateUserRequest request, IUserService userService) =>\n{\n    if (id != request.Id)\n        return Results.BadRequest(\"ID mismatch\");\n    \n    try\n    {\n        var user = await userService.UpdateUserAsync(request);\n        return user is not null ? Results.Ok(user) : Results.NotFound();\n    }\n    catch (ArgumentException ex)\n    {\n        return Results.BadRequest(ex.Message);\n    }\n})\n.WithName(\"UpdateUser\")\n.WithSummary(\"Update an existing user\")\n.Accepts<UpdateUserRequest>(\"application/json\")\n.Produces<User>(StatusCodes.Status200OK)\n.Produces(StatusCodes.Status400BadRequest)\n.Produces(StatusCodes.Status404NotFound);\n\n// DELETE /api/users/{id}\nusersApi.MapDelete(\"/{id:int}\", async (int id, IUserService userService) =>\n{\n    var success = await userService.DeleteUserAsync(id);\n    return success ? Results.NoContent() : Results.NotFound();\n})\n.WithName(\"DeleteUser\")\n.WithSummary(\"Delete a user\")\n.Produces(StatusCodes.Status204NoContent)\n.Produces(StatusCodes.Status404NotFound);\n\n// Health check endpoint\napp.MapGet(\"/health\", () => new { status = \"healthy\", timestamp = DateTime.UtcNow })\n    .WithTags(\"Health\")\n    .WithSummary(\"Health check\");\n\n// File upload endpoint\napp.MapPost(\"/api/upload\", async (IFormFile file) =>\n{\n    if (file.Length == 0)\n        return Results.BadRequest(\"No file uploaded\");\n    \n    var uploadsDir = Path.Combine(Directory.GetCurrentDirectory(), \"uploads\");\n    Directory.CreateDirectory(uploadsDir);\n    \n    var fileName = $\"{Guid.NewGuid()}_{file.FileName}\";\n    var filePath = Path.Combine(uploadsDir, fileName);\n    \n    using var stream = File.Create(filePath);\n    await file.CopyToAsync(stream);\n    \n    return Results.Ok(new { fileName, size = file.Length });\n})\n.WithTags(\"Files\")\n.WithSummary(\"Upload a file\")\n.Accepts<IFormFile>(\"multipart/form-data\")\n.Produces<object>(StatusCodes.Status200OK)\n.Produces(StatusCodes.Status400BadRequest);\n\napp.Run();</code></pre><h4>üèÜ Best Practices</h4><ul><li>Use dependency injection for services and configuration</li><li>Implement proper error handling with custom middleware</li><li>Use async/await for all I/O operations</li><li>Follow RESTful conventions for API design</li><li>Implement proper validation using data annotations</li><li>Use DTOs to control data exposure in APIs</li><li>Add comprehensive logging and monitoring</li><li>Implement security measures (authentication, authorization, CORS)</li><li>Use environment-specific configuration</li><li>Write unit and integration tests for your endpoints</li></ul><h4>üöÄ Advanced Features</h4><ul><li><strong>Authentication & Authorization</strong> - JWT, OAuth, Identity</li><li><strong>Caching</strong> - Memory cache, distributed cache</li><li><strong>Background Services</strong> - Hosted services, message queues</li><li><strong>Real-time Communication</strong> - SignalR for WebSocket connections</li><li><strong>API Versioning</strong> - URL, header, or query string versioning</li><li><strong>Rate Limiting</strong> - Protect APIs from abuse</li></ul></div>",
      "code": "var app = WebApplication.Create(); app.Use(async (ctx,next)=>{ await next(); }); app.MapGet(\"/hello\", ()=>\"hi\");",
      "quiz": [ {"q":"Middleware order matters?","options":["Yes","No"],"answer":0} ]
    },
    {
      "id": 31,
      "tier": 3,
      "title": "Blazor",
      "description": "Components, binding, routing, DI, Server vs WASM.",
      "concepts": ["Components", "Data Binding", "Routing", "Dependency Injection", "Server vs WebAssembly"],
      "requirements": ["Create a component with @code and bind an input"],
      "theory": "<div class='theory-content'><h4>üåü Blazor - Full-Stack Web Development with C#</h4><p>Blazor enables building interactive web applications using C# instead of JavaScript. It offers two hosting models: Blazor Server (components run on server) and Blazor WebAssembly (components run in browser). Both share the same component model and programming experience.</p><h4>üèóÔ∏è Blazor Architecture Overview</h4><h5>Blazor Server vs WebAssembly:</h5><pre><code>// Blazor Server Characteristics:\n// ‚úÖ Smaller download size (no .NET runtime to download)\n// ‚úÖ Full .NET Core API access on server\n// ‚úÖ Works on older browsers\n// ‚ùå Requires constant connection to server\n// ‚ùå Higher latency for interactions\n// ‚ùå Server load increases with users\n\n// Blazor WebAssembly (WASM) Characteristics:\n// ‚úÖ Runs entirely in browser (offline capable)\n// ‚úÖ No server dependency after download\n// ‚úÖ Better performance for complex UI interactions\n// ‚ùå Larger initial download (includes .NET runtime)\n// ‚ùå Limited to browser sandbox security\n// ‚ùå Not all .NET APIs available</code></pre><h4>üß© Razor Components - Building Interactive UI</h4><h5>Basic Component Structure:</h5><pre><code>@* Counter.razor *@\n@page \"/counter\"\n@page \"/counter/{InitialCount:int}\"\n\n@* Component directive and imports *@\n@using System.ComponentModel.DataAnnotations\n@inject IJSRuntime JSRuntime\n@inject ILogger<Counter> Logger\n\n<PageTitle>Counter Example</PageTitle>\n\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <h3>Interactive Counter</h3>\n            \n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <h4 class=\"card-title text-center mb-4\">\n                        Current Count: <span class=\"badge badge-primary\">@currentCount</span>\n                    </h4>\n                    \n                    <div class=\"mb-3\">\n                        <label for=\"step-input\" class=\"form-label\">Step Size:</label>\n                        <input id=\"step-input\" \n                               type=\"number\" \n                               @bind=\"stepSize\" \n                               @bind:event=\"oninput\"\n                               class=\"form-control\" \n                               min=\"1\" \n                               max=\"100\" />\n                    </div>\n                    \n                    <div class=\"d-grid gap-2\">\n                        <button class=\"btn btn-primary\" \n                                @onclick=\"IncrementCount\"\n                                disabled=\"@isProcessing\">\n                            @if (isProcessing)\n                            {\n                                <span class=\"spinner-border spinner-border-sm me-2\"></span>\n                            }\n                            Increment (+@stepSize)\n                        </button>\n                        \n                        <button class=\"btn btn-secondary\" \n                                @onclick=\"DecrementCount\"\n                                disabled=\"@isProcessing\">\n                            Decrement (-@stepSize)\n                        </button>\n                        \n                        <button class=\"btn btn-warning\" \n                                @onclick=\"ResetCount\">\n                            Reset to @InitialCount\n                        </button>\n                        \n                        <button class=\"btn btn-info\" \n                                @onclick=\"ShowAlert\">\n                            Show JavaScript Alert\n                        </button>\n                    </div>\n                    \n                    @if (!string.IsNullOrEmpty(statusMessage))\n                    {\n                        <div class=\"alert alert-info mt-3\">\n                            @statusMessage\n                        </div>\n                    }\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"col-md-6\">\n            <h4>Count History</h4>\n            <div class=\"list-group\" style=\"max-height: 300px; overflow-y: auto;\">\n                @foreach (var entry in countHistory.TakeLast(10).Reverse())\n                {\n                    <div class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <span>@entry.Action</span>\n                        <div>\n                            <span class=\"badge bg-secondary me-2\">@entry.Count</span>\n                            <small class=\"text-muted\">@entry.Timestamp.ToString(\"HH:mm:ss\")</small>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    </div>\n</div>\n\n@code {\n    // Component parameters\n    [Parameter] public int InitialCount { get; set; } = 0;\n    \n    // Private fields\n    private int currentCount = 0;\n    private int stepSize = 1;\n    private bool isProcessing = false;\n    private string statusMessage = string.Empty;\n    private List<CountEntry> countHistory = new();\n    \n    // Component lifecycle\n    protected override void OnInitialized()\n    {\n        currentCount = InitialCount;\n        AddToHistory(\"Initialized\", currentCount);\n        Logger.LogInformation(\"Counter component initialized with value {Count}\", currentCount);\n    }\n    \n    // Event handlers\n    private async Task IncrementCount()\n    {\n        isProcessing = true;\n        statusMessage = \"Processing increment...\";\n        \n        // Simulate async operation\n        await Task.Delay(500);\n        \n        currentCount += stepSize;\n        AddToHistory($\"Incremented by {stepSize}\", currentCount);\n        \n        statusMessage = $\"Count incremented to {currentCount}\";\n        isProcessing = false;\n        \n        // Clear status message after 2 seconds\n        _ = Task.Delay(2000).ContinueWith(_ => \n        {\n            statusMessage = string.Empty;\n            InvokeAsync(StateHasChanged);\n        });\n    }\n    \n    private async Task DecrementCount()\n    {\n        isProcessing = true;\n        statusMessage = \"Processing decrement...\";\n        \n        await Task.Delay(300);\n        \n        currentCount -= stepSize;\n        AddToHistory($\"Decremented by {stepSize}\", currentCount);\n        \n        statusMessage = $\"Count decremented to {currentCount}\";\n        isProcessing = false;\n        \n        _ = Task.Delay(2000).ContinueWith(_ => \n        {\n            statusMessage = string.Empty;\n            InvokeAsync(StateHasChanged);\n        });\n    }\n    \n    private void ResetCount()\n    {\n        currentCount = InitialCount;\n        AddToHistory(\"Reset\", currentCount);\n        statusMessage = $\"Count reset to {InitialCount}\";\n        \n        _ = Task.Delay(2000).ContinueWith(_ => \n        {\n            statusMessage = string.Empty;\n            InvokeAsync(StateHasChanged);\n        });\n    }\n    \n    private async Task ShowAlert()\n    {\n        await JSRuntime.InvokeVoidAsync(\"alert\", $\"Current count is: {currentCount}\");\n    }\n    \n    private void AddToHistory(string action, int count)\n    {\n        countHistory.Add(new CountEntry\n        {\n            Action = action,\n            Count = count,\n            Timestamp = DateTime.Now\n        });\n        \n        // Keep only last 50 entries\n        if (countHistory.Count > 50)\n        {\n            countHistory.RemoveRange(0, countHistory.Count - 50);\n        }\n    }\n    \n    // Helper class\n    private class CountEntry\n    {\n        public string Action { get; set; } = string.Empty;\n        public int Count { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}</code></pre><h4>üîÑ Data Binding - Two-Way Communication</h4><h5>Comprehensive Form Binding:</h5><pre><code>@* UserForm.razor *@\n@using System.ComponentModel.DataAnnotations\n\n<div class=\"container\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n            <h3>User Registration Form</h3>\n            \n            <EditForm Model=\"@userModel\" OnValidSubmit=\"@HandleValidSubmit\" OnInvalidSubmit=\"@HandleInvalidSubmit\">\n                <DataAnnotationsValidator />\n                <ValidationSummary class=\"alert alert-danger\" />\n                \n                <!-- Basic Input Types -->\n                <div class=\"row\">\n                    <div class=\"col-md-6 mb-3\">\n                        <label for=\"firstName\" class=\"form-label\">First Name *</label>\n                        <InputText id=\"firstName\" \n                                   class=\"form-control\" \n                                   @bind-Value=\"userModel.FirstName\" \n                                   placeholder=\"Enter first name\" />\n                        <ValidationMessage For=\"@(() => userModel.FirstName)\" class=\"text-danger\" />\n                    </div>\n                    \n                    <div class=\"col-md-6 mb-3\">\n                        <label for=\"lastName\" class=\"form-label\">Last Name *</label>\n                        <InputText id=\"lastName\" \n                                   class=\"form-control\" \n                                   @bind-Value=\"userModel.LastName\" \n                                   placeholder=\"Enter last name\" />\n                        <ValidationMessage For=\"@(() => userModel.LastName)\" class=\"text-danger\" />\n                    </div>\n                </div>\n                \n                <div class=\"mb-3\">\n                    <label for=\"email\" class=\"form-label\">Email Address *</label>\n                    <InputText id=\"email\" \n                               type=\"email\" \n                               class=\"form-control\" \n                               @bind-Value=\"userModel.Email\" \n                               placeholder=\"user@example.com\" />\n                    <ValidationMessage For=\"@(() => userModel.Email)\" class=\"text-danger\" />\n                </div>\n                \n                <div class=\"row\">\n                    <div class=\"col-md-4 mb-3\">\n                        <label for=\"age\" class=\"form-label\">Age *</label>\n                        <InputNumber id=\"age\" \n                                     class=\"form-control\" \n                                     @bind-Value=\"userModel.Age\" \n                                     min=\"13\" \n                                     max=\"120\" />\n                        <ValidationMessage For=\"@(() => userModel.Age)\" class=\"text-danger\" />\n                    </div>\n                    \n                    <div class=\"col-md-4 mb-3\">\n                        <label for=\"birthDate\" class=\"form-label\">Birth Date</label>\n                        <InputDate id=\"birthDate\" \n                                   class=\"form-control\" \n                                   @bind-Value=\"userModel.BirthDate\" />\n                    </div>\n                    \n                    <div class=\"col-md-4 mb-3\">\n                        <label for=\"salary\" class=\"form-label\">Salary</label>\n                        <InputNumber id=\"salary\" \n                                     class=\"form-control\" \n                                     @bind-Value=\"userModel.Salary\" \n                                     @bind-Value:format=\"F2\"\n                                     step=\"0.01\" />\n                    </div>\n                </div>\n                \n                <!-- Select Dropdown -->\n                <div class=\"mb-3\">\n                    <label for=\"department\" class=\"form-label\">Department *</label>\n                    <InputSelect id=\"department\" \n                                 class=\"form-control\" \n                                 @bind-Value=\"userModel.DepartmentId\">\n                        <option value=\"\">-- Select Department --</option>\n                        @foreach (var dept in departments)\n                        {\n                            <option value=\"@dept.Id\">@dept.Name</option>\n                        }\n                    </InputSelect>\n                    <ValidationMessage For=\"@(() => userModel.DepartmentId)\" class=\"text-danger\" />\n                </div>\n                \n                <!-- Multi-select -->\n                <div class=\"mb-3\">\n                    <label class=\"form-label\">Skills</label>\n                    <div class=\"form-check-group\">\n                        @foreach (var skill in availableSkills)\n                        {\n                            <div class=\"form-check form-check-inline\">\n                                <input class=\"form-check-input\" \n                                       type=\"checkbox\" \n                                       id=\"skill-@skill.Id\" \n                                       @onchange=\"@((e) => ToggleSkill(skill.Id, (bool)e.Value!))\"\n                                       checked=\"@userModel.SkillIds.Contains(skill.Id)\" />\n                                <label class=\"form-check-label\" for=\"skill-@skill.Id\">\n                                    @skill.Name\n                                </label>\n                            </div>\n                        }\n                    </div>\n                </div>\n                \n                <!-- Radio Buttons -->\n                <div class=\"mb-3\">\n                    <label class=\"form-label\">Experience Level</label>\n                    <div>\n                        @foreach (var level in Enum.GetValues<ExperienceLevel>())\n                        {\n                            <div class=\"form-check\">\n                                <InputRadio class=\"form-check-input\" \n                                           id=\"exp-@level\" \n                                           Value=\"level\" \n                                           @bind-Value=\"userModel.ExperienceLevel\" />\n                                <label class=\"form-check-label\" for=\"exp-@level\">\n                                    @level\n                                </label>\n                            </div>\n                        }\n                    </div>\n                </div>\n                \n                <!-- Textarea -->\n                <div class=\"mb-3\">\n                    <label for=\"bio\" class=\"form-label\">Bio</label>\n                    <InputTextArea id=\"bio\" \n                                   class=\"form-control\" \n                                   rows=\"4\" \n                                   @bind-Value=\"userModel.Bio\" \n                                   placeholder=\"Tell us about yourself...\" />\n                    <ValidationMessage For=\"@(() => userModel.Bio)\" class=\"text-danger\" />\n                </div>\n                \n                <!-- Checkboxes -->\n                <div class=\"mb-3\">\n                    <div class=\"form-check\">\n                        <InputCheckbox id=\"isActive\" \n                                       class=\"form-check-input\" \n                                       @bind-Value=\"userModel.IsActive\" />\n                        <label class=\"form-check-label\" for=\"isActive\">\n                            Active User\n                        </label>\n                    </div>\n                    \n                    <div class=\"form-check\">\n                        <InputCheckbox id=\"acceptTerms\" \n                                       class=\"form-check-input\" \n                                       @bind-Value=\"userModel.AcceptTerms\" />\n                        <label class=\"form-check-label\" for=\"acceptTerms\">\n                            I accept the terms and conditions *\n                        </label>\n                    </div>\n                    <ValidationMessage For=\"@(() => userModel.AcceptTerms)\" class=\"text-danger\" />\n                </div>\n                \n                <!-- Submit Buttons -->\n                <div class=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                    <button type=\"button\" class=\"btn btn-secondary me-md-2\" @onclick=\"ResetForm\">\n                        Reset Form\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" disabled=\"@isSubmitting\">\n                        @if (isSubmitting)\n                        {\n                            <span class=\"spinner-border spinner-border-sm me-2\"></span>\n                        }\n                        @(IsEditMode ? \"Update\" : \"Create\") User\n                    </button>\n                </div>\n            </EditForm>\n            \n            @if (!string.IsNullOrEmpty(submitMessage))\n            {\n                <div class=\"alert @(isSuccess ? \"alert-success\" : \"alert-danger\") mt-3\">\n                    @submitMessage\n                </div>\n            }\n            \n            <!-- Live Preview -->\n            <div class=\"card mt-4\">\n                <div class=\"card-header\">\n                    <h5>Live Preview</h5>\n                </div>\n                <div class=\"card-body\">\n                    <pre><code>@System.Text.Json.JsonSerializer.Serialize(userModel, new JsonSerializerOptions { WriteIndented = true })</code></pre>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n@code {\n    [Parameter] public UserModel? InitialUser { get; set; }\n    [Parameter] public bool IsEditMode { get; set; }\n    [Parameter] public EventCallback<UserModel> OnUserSaved { get; set; }\n    \n    private UserModel userModel = new();\n    private bool isSubmitting = false;\n    private string submitMessage = string.Empty;\n    private bool isSuccess = false;\n    \n    private List<Department> departments = new()\n    {\n        new() { Id = 1, Name = \"Engineering\" },\n        new() { Id = 2, Name = \"Marketing\" },\n        new() { Id = 3, Name = \"Sales\" },\n        new() { Id = 4, Name = \"HR\" }\n    };\n    \n    private List<Skill> availableSkills = new()\n    {\n        new() { Id = 1, Name = \"C#\" },\n        new() { Id = 2, Name = \"JavaScript\" },\n        new() { Id = 3, Name = \"Python\" },\n        new() { Id = 4, Name = \"SQL\" },\n        new() { Id = 5, Name = \"Azure\" }\n    };\n    \n    protected override void OnParametersSet()\n    {\n        if (InitialUser != null)\n        {\n            userModel = new UserModel\n            {\n                FirstName = InitialUser.FirstName,\n                LastName = InitialUser.LastName,\n                Email = InitialUser.Email,\n                Age = InitialUser.Age,\n                BirthDate = InitialUser.BirthDate,\n                Salary = InitialUser.Salary,\n                DepartmentId = InitialUser.DepartmentId,\n                SkillIds = new HashSet<int>(InitialUser.SkillIds),\n                ExperienceLevel = InitialUser.ExperienceLevel,\n                Bio = InitialUser.Bio,\n                IsActive = InitialUser.IsActive,\n                AcceptTerms = InitialUser.AcceptTerms\n            };\n        }\n    }\n    \n    private async Task HandleValidSubmit()\n    {\n        isSubmitting = true;\n        submitMessage = string.Empty;\n        \n        try\n        {\n            // Simulate API call\n            await Task.Delay(1000);\n            \n            if (IsEditMode)\n            {\n                submitMessage = \"User updated successfully!\";\n            }\n            else\n            {\n                submitMessage = \"User created successfully!\";\n            }\n            \n            isSuccess = true;\n            await OnUserSaved.InvokeAsync(userModel);\n        }\n        catch (Exception ex)\n        {\n            submitMessage = $\"Error: {ex.Message}\";\n            isSuccess = false;\n        }\n        finally\n        {\n            isSubmitting = false;\n        }\n    }\n    \n    private void HandleInvalidSubmit()\n    {\n        submitMessage = \"Please correct the validation errors and try again.\";\n        isSuccess = false;\n    }\n    \n    private void ToggleSkill(int skillId, bool isSelected)\n    {\n        if (isSelected)\n        {\n            userModel.SkillIds.Add(skillId);\n        }\n        else\n        {\n            userModel.SkillIds.Remove(skillId);\n        }\n    }\n    \n    private void ResetForm()\n    {\n        userModel = new UserModel();\n        submitMessage = string.Empty;\n    }\n}\n\n// Supporting classes\npublic class UserModel\n{\n    [Required(ErrorMessage = \"First name is required\")]\n    [StringLength(50, ErrorMessage = \"First name cannot exceed 50 characters\")]\n    public string FirstName { get; set; } = string.Empty;\n    \n    [Required(ErrorMessage = \"Last name is required\")]\n    [StringLength(50, ErrorMessage = \"Last name cannot exceed 50 characters\")]\n    public string LastName { get; set; } = string.Empty;\n    \n    [Required(ErrorMessage = \"Email is required\")]\n    [EmailAddress(ErrorMessage = \"Invalid email format\")]\n    public string Email { get; set; } = string.Empty;\n    \n    [Range(13, 120, ErrorMessage = \"Age must be between 13 and 120\")]\n    public int Age { get; set; } = 18;\n    \n    public DateTime? BirthDate { get; set; }\n    \n    [Range(0, 1000000, ErrorMessage = \"Salary must be a positive number\")]\n    public decimal? Salary { get; set; }\n    \n    [Required(ErrorMessage = \"Department is required\")]\n    public int DepartmentId { get; set; }\n    \n    public HashSet<int> SkillIds { get; set; } = new();\n    \n    public ExperienceLevel ExperienceLevel { get; set; } = ExperienceLevel.Junior;\n    \n    [StringLength(500, ErrorMessage = \"Bio cannot exceed 500 characters\")]\n    public string Bio { get; set; } = string.Empty;\n    \n    public bool IsActive { get; set; } = true;\n    \n    [MustBeTrue(ErrorMessage = \"You must accept the terms and conditions\")]\n    public bool AcceptTerms { get; set; }\n}\n\npublic enum ExperienceLevel\n{\n    Intern,\n    Junior,\n    Mid,\n    Senior,\n    Lead,\n    Principal\n}\n\npublic class Department\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n}\n\npublic class Skill\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n}\n\n// Custom validation attribute\npublic class MustBeTrueAttribute : ValidationAttribute\n{\n    public override bool IsValid(object? value)\n    {\n        return value is bool b && b;\n    }\n}</code></pre><h4>üß≠ Routing and Navigation</h4><h5>Advanced Routing Patterns:</h5><pre><code>@* App.razor - Application Shell *@\n<Router AppAssembly=\"@typeof(App).Assembly\" AdditionalAssemblies=\"new[] { typeof(ComponentLibrary.MyComponent).Assembly }\">\n    <Found Context=\"routeData\">\n        <AuthorizeView>\n            <Authorized>\n                <RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\">\n                    <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n                </RouteView>\n            </Authorized>\n            <NotAuthorized>\n                <RedirectToLogin />\n            </NotAuthorized>\n        </AuthorizeView>\n    </Found>\n    <NotFound>\n        <PageTitle>Not found</PageTitle>\n        <LayoutView Layout=\"@typeof(MainLayout)\">\n            <div class=\"container mt-5\">\n                <div class=\"row justify-content-center\">\n                    <div class=\"col-md-6 text-center\">\n                        <h1 class=\"display-1\">404</h1>\n                        <h2>Page Not Found</h2>\n                        <p class=\"lead\">Sorry, the page you're looking for doesn't exist.</p>\n                        <a href=\"/\" class=\"btn btn-primary\">Go Home</a>\n                    </div>\n                </div>\n            </div>\n        </LayoutView>\n    </NotFound>\n</Router>\n\n@* ProductDetails.razor - Complex Routing *@\n@page \"/products/{ProductId:int}\"\n@page \"/products/{ProductId:int}/category/{CategoryId:int}\"\n@page \"/products/{ProductId:int}/reviews\"\n@page \"/products/{ProductId:int}/specifications\"\n@inject NavigationManager Navigation\n@inject IProductService ProductService\n\n<PageTitle>@(product?.Name ?? \"Product Details\")</PageTitle>\n\n@if (product == null)\n{\n    <div class=\"text-center p-5\">\n        <div class=\"spinner-border\" role=\"status\">\n            <span class=\"visually-hidden\">Loading...</span>\n        </div>\n    </div>\n}\nelse\n{\n    <div class=\"container\">\n        <nav aria-label=\"breadcrumb\">\n            <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n                <li class=\"breadcrumb-item\"><a href=\"/products\">Products</a></li>\n                @if (CategoryId.HasValue)\n                {\n                    <li class=\"breadcrumb-item\"><a href=\"/products/category/@CategoryId\">Category</a></li>\n                }\n                <li class=\"breadcrumb-item active\">@product.Name</li>\n            </ol>\n        </nav>\n        \n        <div class=\"row\">\n            <div class=\"col-md-8\">\n                <h1>@product.Name</h1>\n                <p class=\"lead\">@product.Description</p>\n                \n                <!-- Tab Navigation -->\n                <ul class=\"nav nav-tabs mb-3\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link @(IsActiveTab(\"details\") ? \"active\" : \"\")\" \n                           href=\"/products/@ProductId\">Details</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link @(IsActiveTab(\"reviews\") ? \"active\" : \"\")\" \n                           href=\"/products/@ProductId/reviews\">Reviews</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link @(IsActiveTab(\"specifications\") ? \"active\" : \"\")\" \n                           href=\"/products/@ProductId/specifications\">Specifications</a>\n                    </li>\n                </ul>\n                \n                <!-- Tab Content -->\n                @if (IsActiveTab(\"reviews\"))\n                {\n                    <ProductReviews ProductId=\"@ProductId\" />\n                }\n                else if (IsActiveTab(\"specifications\"))\n                {\n                    <ProductSpecifications ProductId=\"@ProductId\" />\n                }\n                else\n                {\n                    <!-- Default details view -->\n                    <div class=\"product-details\">\n                        <p>@product.DetailedDescription</p>\n                        <h4>Features:</h4>\n                        <ul>\n                            @foreach (var feature in product.Features)\n                            {\n                                <li>@feature</li>\n                            }\n                        </ul>\n                    </div>\n                }\n            </div>\n            \n            <div class=\"col-md-4\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Price: $@product.Price.ToString(\"F2\")</h5>\n                        <button class=\"btn btn-primary w-100 mb-2\" @onclick=\"AddToCart\">\n                            Add to Cart\n                        </button>\n                        <button class=\"btn btn-outline-secondary w-100\" @onclick=\"AddToWishlist\">\n                            Add to Wishlist\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n}\n\n@code {\n    [Parameter] public int ProductId { get; set; }\n    [Parameter] public int? CategoryId { get; set; }\n    \n    private Product? product;\n    private string currentTab = \"details\";\n    \n    protected override async Task OnParametersSetAsync()\n    {\n        product = await ProductService.GetProductByIdAsync(ProductId);\n        \n        // Determine active tab from URL\n        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);\n        var path = uri.LocalPath;\n        \n        if (path.EndsWith(\"/reviews\"))\n            currentTab = \"reviews\";\n        else if (path.EndsWith(\"/specifications\"))\n            currentTab = \"specifications\";\n        else\n            currentTab = \"details\";\n    }\n    \n    private bool IsActiveTab(string tabName) => currentTab == tabName;\n    \n    private async Task AddToCart()\n    {\n        // Implementation for adding to cart\n        await Task.Delay(100);\n        // Show success message or navigate to cart\n    }\n    \n    private async Task AddToWishlist()\n    {\n        // Implementation for adding to wishlist\n        await Task.Delay(100);\n    }\n}\n\n// Supporting classes\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public string DetailedDescription { get; set; } = string.Empty;\n    public decimal Price { get; set; }\n    public List<string> Features { get; set; } = new();\n}</code></pre><h4>üíâ Dependency Injection in Blazor</h4><h5>Service Registration and Usage:</h5><pre><code>// Program.cs - Service Registration\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"#app\");\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\n\n// HTTP Client services\nbuilder.Services.AddScoped(sp => new HttpClient\n{\n    BaseAddress = new Uri(builder.HostEnvironment.BaseAddress)\n});\n\n// Custom services\nbuilder.Services.AddScoped<IUserService, UserService>();\nbuilder.Services.AddScoped<IProductService, ProductService>();\nbuilder.Services.AddSingleton<IAppStateService, AppStateService>();\nbuilder.Services.AddTransient<INotificationService, NotificationService>();\n\n// Third-party services\nbuilder.Services.AddBlazoredLocalStorage();\nbuilder.Services.AddBlazoredToast();\n\n// Authentication\nbuilder.Services.AddOidcAuthentication(options =>\n{\n    builder.Configuration.Bind(\"Local\", options.ProviderOptions);\n});\n\nawait builder.Build().RunAsync();\n\n// IUserService.cs - Service Interface\npublic interface IUserService\n{\n    Task<List<User>> GetUsersAsync();\n    Task<User?> GetUserByIdAsync(int id);\n    Task<User> CreateUserAsync(CreateUserRequest request);\n    Task<User> UpdateUserAsync(UpdateUserRequest request);\n    Task<bool> DeleteUserAsync(int id);\n    event Action<string>? UserChanged;\n}\n\n// UserService.cs - Service Implementation\npublic class UserService : IUserService\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger<UserService> _logger;\n    private readonly ILocalStorageService _localStorage;\n    \n    public event Action<string>? UserChanged;\n    \n    public UserService(\n        HttpClient httpClient, \n        ILogger<UserService> logger,\n        ILocalStorageService localStorage)\n    {\n        _httpClient = httpClient;\n        _logger = logger;\n        _localStorage = localStorage;\n    }\n    \n    public async Task<List<User>> GetUsersAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Fetching users from API\");\n            \n            // Try to get from cache first\n            var cachedUsers = await _localStorage.GetItemAsync<List<User>>(\"users\");\n            if (cachedUsers != null && cachedUsers.Any())\n            {\n                _logger.LogInformation(\"Returning cached users\");\n                return cachedUsers;\n            }\n            \n            // Fetch from API\n            var users = await _httpClient.GetFromJsonAsync<List<User>>(\"api/users\") ?? new List<User>();\n            \n            // Cache for 5 minutes\n            await _localStorage.SetItemAsync(\"users\", users);\n            await _localStorage.SetItemAsync(\"users_timestamp\", DateTime.UtcNow);\n            \n            return users;\n        }\n        catch (HttpRequestException ex)\n        {\n            _logger.LogError(ex, \"HTTP error while fetching users\");\n            throw new UserServiceException(\"Failed to fetch users from server\", ex);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Unexpected error while fetching users\");\n            throw;\n        }\n    }\n    \n    public async Task<User?> GetUserByIdAsync(int id)\n    {\n        try\n        {\n            return await _httpClient.GetFromJsonAsync<User>($\"api/users/{id}\");\n        }\n        catch (HttpRequestException ex) when (ex.Message.Contains(\"404\"))\n        {\n            return null;\n        }\n    }\n    \n    public async Task<User> CreateUserAsync(CreateUserRequest request)\n    {\n        try\n        {\n            var response = await _httpClient.PostAsJsonAsync(\"api/users\", request);\n            response.EnsureSuccessStatusCode();\n            \n            var user = await response.Content.ReadFromJsonAsync<User>();\n            if (user == null)\n                throw new UserServiceException(\"Failed to deserialize created user\");\n            \n            // Clear cache\n            await _localStorage.RemoveItemAsync(\"users\");\n            \n            // Notify subscribers\n            UserChanged?.Invoke($\"User '{user.Name}' created\");\n            \n            return user;\n        }\n        catch (HttpRequestException ex)\n        {\n            _logger.LogError(ex, \"HTTP error while creating user\");\n            throw new UserServiceException(\"Failed to create user\", ex);\n        }\n    }\n    \n    public async Task<User> UpdateUserAsync(UpdateUserRequest request)\n    {\n        try\n        {\n            var response = await _httpClient.PutAsJsonAsync($\"api/users/{request.Id}\", request);\n            response.EnsureSuccessStatusCode();\n            \n            var user = await response.Content.ReadFromJsonAsync<User>();\n            if (user == null)\n                throw new UserServiceException(\"Failed to deserialize updated user\");\n            \n            // Clear cache\n            await _localStorage.RemoveItemAsync(\"users\");\n            \n            // Notify subscribers\n            UserChanged?.Invoke($\"User '{user.Name}' updated\");\n            \n            return user;\n        }\n        catch (HttpRequestException ex)\n        {\n            _logger.LogError(ex, \"HTTP error while updating user {UserId}\", request.Id);\n            throw new UserServiceException(\"Failed to update user\", ex);\n        }\n    }\n    \n    public async Task<bool> DeleteUserAsync(int id)\n    {\n        try\n        {\n            var response = await _httpClient.DeleteAsync($\"api/users/{id}\");\n            \n            if (response.IsSuccessStatusCode)\n            {\n                // Clear cache\n                await _localStorage.RemoveItemAsync(\"users\");\n                \n                // Notify subscribers\n                UserChanged?.Invoke($\"User with ID {id} deleted\");\n                \n                return true;\n            }\n            \n            return false;\n        }\n        catch (HttpRequestException ex)\n        {\n            _logger.LogError(ex, \"HTTP error while deleting user {UserId}\", id);\n            throw new UserServiceException(\"Failed to delete user\", ex);\n        }\n    }\n}\n\npublic class UserServiceException : Exception\n{\n    public UserServiceException(string message) : base(message) { }\n    public UserServiceException(string message, Exception innerException) : base(message, innerException) { }\n}\n\n@* UserManagement.razor - Using Services *@\n@page \"/user-management\"\n@inject IUserService UserService\n@inject INotificationService NotificationService\n@inject ILogger<UserManagement> Logger\n@implements IDisposable\n\n<PageTitle>User Management</PageTitle>\n\n<div class=\"container\">\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n        <h1>User Management</h1>\n        <button class=\"btn btn-primary\" @onclick=\"ShowCreateModal\">\n            <i class=\"fas fa-plus\"></i> Add New User\n        </button>\n    </div>\n    \n    @if (isLoading)\n    {\n        <div class=\"text-center p-5\">\n            <div class=\"spinner-border\" role=\"status\">\n                <span class=\"visually-hidden\">Loading users...</span>\n            </div>\n        </div>\n    }\n    else if (error != null)\n    {\n        <div class=\"alert alert-danger\">\n            <h4>Error Loading Users</h4>\n            <p>@error</p>\n            <button class=\"btn btn-outline-danger\" @onclick=\"LoadUsers\">Retry</button>\n        </div>\n    }\n    else\n    {\n        <div class=\"table-responsive\">\n            <table class=\"table table-striped table-hover\">\n                <thead class=\"table-dark\">\n                    <tr>\n                        <th>Name</th>\n                        <th>Email</th>\n                        <th>Created</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    @foreach (var user in users)\n                    {\n                        <tr>\n                            <td>@user.Name</td>\n                            <td>@user.Email</td>\n                            <td>@user.CreatedDate.ToString(\"dd/MM/yyyy\")</td>\n                            <td>\n                                <div class=\"btn-group btn-group-sm\">\n                                    <button class=\"btn btn-outline-primary\" @onclick=\"() => EditUser(user)\">\n                                        Edit\n                                    </button>\n                                    <button class=\"btn btn-outline-danger\" @onclick=\"() => DeleteUser(user)\">\n                                        Delete\n                                    </button>\n                                </div>\n                            </td>\n                        </tr>\n                    }\n                </tbody>\n            </table>\n        </div>\n    }\n</div>\n\n@code {\n    private List<User> users = new();\n    private bool isLoading = true;\n    private string? error;\n    \n    protected override async Task OnInitializedAsync()\n    {\n        // Subscribe to service events\n        UserService.UserChanged += OnUserChanged;\n        \n        await LoadUsers();\n    }\n    \n    private async Task LoadUsers()\n    {\n        try\n        {\n            isLoading = true;\n            error = null;\n            \n            users = await UserService.GetUsersAsync();\n            Logger.LogInformation(\"Loaded {Count} users\", users.Count);\n        }\n        catch (UserServiceException ex)\n        {\n            error = ex.Message;\n            Logger.LogError(ex, \"Error loading users\");\n        }\n        catch (Exception ex)\n        {\n            error = \"An unexpected error occurred\";\n            Logger.LogError(ex, \"Unexpected error loading users\");\n        }\n        finally\n        {\n            isLoading = false;\n        }\n    }\n    \n    private void OnUserChanged(string message)\n    {\n        NotificationService.ShowSuccess(message);\n        \n        // Reload users to reflect changes\n        InvokeAsync(LoadUsers);\n    }\n    \n    private void ShowCreateModal()\n    {\n        // Implementation for showing create modal\n    }\n    \n    private void EditUser(User user)\n    {\n        // Implementation for editing user\n    }\n    \n    private async Task DeleteUser(User user)\n    {\n        // Implementation for deleting user\n        var confirmed = await NotificationService.ConfirmAsync($\"Are you sure you want to delete {user.Name}?\");\n        if (confirmed)\n        {\n            await UserService.DeleteUserAsync(user.Id);\n        }\n    }\n    \n    public void Dispose()\n    {\n        UserService.UserChanged -= OnUserChanged;\n    }\n}</code></pre><h4>üèÜ Best Practices</h4><ul><li>Use proper component hierarchy and parameter passing</li><li>Implement two-way data binding with validation</li><li>Leverage dependency injection for services and configuration</li><li>Handle async operations and loading states properly</li><li>Use EventCallback for component communication</li><li>Implement proper error handling and user feedback</li><li>Follow accessibility guidelines (ARIA labels, semantic HTML)</li><li>Optimize rendering with ShouldRender when necessary</li><li>Use cascading parameters for cross-cutting concerns</li><li>Test components with bUnit or similar frameworks</li></ul><h4>üöÄ Advanced Features</h4><ul><li><strong>Server vs WebAssembly</strong> - Choose the right hosting model</li><li><strong>JavaScript Interop</strong> - Integrate with existing JS libraries</li><li><strong>SignalR Integration</strong> - Real-time communication</li><li><strong>Progressive Web Apps</strong> - Offline capabilities</li><li><strong>Component Libraries</strong> - Reusable UI components</li><li><strong>Virtualization</strong> - Handle large datasets efficiently</li></ul></div>",
      "code": "<input @bind=\"Name\" /> <p>@Name</p>",
      "quiz": [ {"q":"Blazor WASM runs where?","options":["Server","Browser"],"answer":1} ]
    },
    {
      "id": 32,
      "tier": 3,
      "title": "Security",
      "description": "AuthN (JWT, Cookies), AuthZ (Roles/Policies), HTTPS, CORS.",
      "concepts": ["Authentication", "Authorization", "HTTPS", "CORS"],
      "requirements": ["Protect a minimal API endpoint"],
      "theory": "<p>Authenticate users (cookies/JWT). Authorize via roles/policies. Always use HTTPS; configure CORS for cross-origin access.</p>",
      "code": "builder.Services.AddAuthorization(); app.MapGet(\"/secure\", ()=>\"ok\").RequireAuthorization();",
      "quiz": [ {"q":"Which guards cross-origin requests?","options":["CORS","CSR"],"answer":0} ]
    },
    {
      "id": 33,
      "tier": 3,
      "title": "Cross-Platform (Xamarin/MAUI)",
      "description": "Xamarin.Forms layouts/navigation, SQLite, DependencyService, OAuth, .NET MAUI intro.",
      "concepts": ["XAML Layouts", "Navigation", "SQLite.NET", "DependencyService", "OAuth 2.0", ".NET MAUI Intro"],
      "requirements": ["Create a simple page with navigation"],
      "theory": "<p>Xamarin.Forms uses XAML for UI and supports navigation stacks. MAUI is the evolution for .NET multi-platform apps.</p>",
      "code": "await Navigation.PushAsync(new DetailsPage());",
      "quiz": [ {"q":"MAUI stands for?","options":["Multi-platform App UI","Mobile App UI"],"answer":0} ]
    },
    {
      "id": 34,
      "tier": 3,
      "title": "Deployment & DevOps",
      "description": "Azure App Service, Docker, AWS Beanstalk, CI/CD (GitHub Actions, Azure DevOps), build book in CI.",
      "concepts": ["Azure App Service", "Docker Containers", "AWS Elastic Beanstalk", "GitHub Actions", "Azure DevOps", "Build book in CI"],
      "requirements": ["Add a CI workflow step", "Containerize a web API"],
      "theory": "<p>Continuous Integration builds and tests on every push. Containers bundle app + runtime. Cloud services host your apps globally.</p>",
      "code": "# GitHub Actions YAML & Dockerfile are part of this repo",
      "quiz": [ {"q":"Which file defines container steps?","options":["Dockerfile","package.json"],"answer":0} ]
    }
  ]
}